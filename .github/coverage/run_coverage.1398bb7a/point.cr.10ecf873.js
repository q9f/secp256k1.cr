var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2022 Afr Schoe @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"# Links GMP to directly leverage integer exponentiation."},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# Ref: https://github.com/crystal-lang/crystal/issues/8612"},
{"lineNum":"   18","line":"@[Link(\"gmp\")]"},
{"lineNum":"   19","line":"lib LibGMP"},
{"lineNum":"   20","line":"  fun mpz_powm_sec = __gmpz_powm_sec(rop : MPZ*, base : MPZ*, exp : MPZ*, mod : MPZ*)"},
{"lineNum":"   21","line":"end"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"# Provides a point in the two-dimensional space of any elliptic curve."},
{"lineNum":"   24","line":"# In most cases, such a point on a given curve represents a public key."},
{"lineNum":"   25","line":"# However, for keypairs, a `Key` type shall be used!"},
{"lineNum":"   26","line":"#"},
{"lineNum":"   27","line":"# Properties:"},
{"lineNum":"   28","line":"# * `x` (`Num`): the position on the x-axis."},
{"lineNum":"   29","line":"# * `y` (`Num`): the position on the y-axis."},
{"lineNum":"   30","line":"class Secp256k1::Point"},
{"lineNum":"   31","line":"  # The position on the x-axis."},
{"lineNum":"   32","line":"  property x : Num"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"  # The position on the y-axis."},
{"lineNum":"   35","line":"  property y : Num"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  # Provides a public point in the two-dimensional space on the given `Secp256k1`"},
{"lineNum":"   38","line":"  # elliptic curve by passing the x- and y-coordinates (public key)."},
{"lineNum":"   39","line":"  #"},
{"lineNum":"   40","line":"  # Parameters:"},
{"lineNum":"   41","line":"  # * `x` (`Num`): the position on the x-axis."},
{"lineNum":"   42","line":"  # * `y` (`Num`): the position on the y-axis."},
{"lineNum":"   43","line":"  #"},
{"lineNum":"   44","line":"  # ```"},
{"lineNum":"   45","line":"  # x = Num.new \"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\""},
{"lineNum":"   46","line":"  # y = Num.new \"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\""},
{"lineNum":"   47","line":"  # Point.new x, y"},
{"lineNum":"   48","line":"  # # => #<Secp256k1::Point:0x7f47952e6f00"},
{"lineNum":"   49","line":"  # #          @x=#<Secp256k1::Num:0x7f47952e9480"},
{"lineNum":"   50","line":"  # #              @hex=\"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\","},
{"lineNum":"   51","line":"  # #              @dec=108450790312736419148091503336190989867379581793003243037811027177541631669413,"},
{"lineNum":"   52","line":"  # #              @bin=Bytes[239, 196, 248, 216, 191, 199, 120, 70, 62, 77, 73, 22, 216, 139, 243, 240, 87, 230, 220, 150, 203, 42, 220, 38, 223, 185, 25, 89, 196, 190, 244, 165]>,"},
{"lineNum":"   53","line":"  # #          @y=#<Secp256k1::Num:0x7f47952e93c0"},
{"lineNum":"   54","line":"  # #              @hex=\"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\","},
{"lineNum":"   55","line":"  # #              @dec=93539716883975436131751270446270238300906572229893209404647676230869395610336,"},
{"lineNum":"   56","line":"  # #              @bin=Bytes[206, 205, 154, 131, 254, 250, 252, 179, 207, 153, 253, 224, 195, 64, 187, 226, 254, 217, 205, 208, 210, 91, 83, 244, 224, 130, 84, 172, 239, 182, 154, 224]>>"},
{"lineNum":"   57","line":"  # ```"},
{"lineNum":"   58","line":"  def initialize(x : Num, y : Num)","class":"lineCov","hits":"3","order":"19","possible_hits":"3",},
{"lineNum":"   59","line":"    @x = x","class":"lineCov","hits":"1","order":"20","possible_hits":"1",},
{"lineNum":"   60","line":"    @y = y","class":"lineCov","hits":"1","order":"21","possible_hits":"1",},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  # Provides a public point in the two-dimensional space on the given `Secp256k1`"},
{"lineNum":"   64","line":"  # elliptic curve by passing a random number (private key). Note, that the"},
{"lineNum":"   65","line":"  # private key will be consumed by this constructor and should only be used"},
{"lineNum":"   66","line":"  # to retrieve a public key. To manage keypairs, use the `Key` type instead."},
{"lineNum":"   67","line":"  #"},
{"lineNum":"   68","line":"  # Parameters:"},
{"lineNum":"   69","line":"  # * `priv` (`Num`): the random number giving access to the point."},
{"lineNum":"   70","line":"  #"},
{"lineNum":"   71","line":"  # ```"},
{"lineNum":"   72","line":"  # priv = Num.new \"e50932676c9901f259659d62f0c56fd899feca3f57ecab147a5ef8a0b59defc3\""},
{"lineNum":"   73","line":"  # Point.new priv"},
{"lineNum":"   74","line":"  # # => #<Secp256k1::Point:0x7f7377407ee0"},
{"lineNum":"   75","line":"  # #          @x=#<Secp256k1::Num:0x7f736e341b00"},
{"lineNum":"   76","line":"  # #              @hex=\"aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\","},
{"lineNum":"   77","line":"  # #              @dec=79593639541256659698952500103746656102855706770414568473917856266058507588367,"},
{"lineNum":"   78","line":"  # #              @bin=Bytes[175, 248, 103, 77, 107, 150, 166, 197, 141, 186, 176, 139, 144, 53, 101, 54, 50, 113, 48, 136, 136, 52, 10, 44, 173, 223, 136, 229, 97, 101, 147, 15]>,"},
{"lineNum":"   79","line":"  # #          @y=#<Secp256k1::Num:0x7f736e341ac0"},
{"lineNum":"   80","line":"  # #              @hex=\"21f4c49cfe90da39c254a51b8ee8afcdd8c02dd566f13582c23e104c7ed5936b\","},
{"lineNum":"   81","line":"  # #              @dec=15358791661898278541670676806913272995387450360720708081975214114817468371819,"},
{"lineNum":"   82","line":"  # #              @bin=Bytes[33, 244, 196, 156, 254, 144, 218, 57, 194, 84, 165, 27, 142, 232, 175, 205, 216, 192, 45, 213, 102, 241, 53, 130, 194, 62, 16, 76, 126, 213, 147, 107]>>"},
{"lineNum":"   83","line":"  # ```"},
{"lineNum":"   84","line":"  def initialize(priv : Num)","class":"lineCov","hits":"3","order":"25","possible_hits":"3",},
{"lineNum":"   85","line":"    pub = Curve.mul G, priv.to_big","class":"lineCov","hits":"1","order":"26","possible_hits":"1",},
{"lineNum":"   86","line":"    @x = pub.x","class":"lineCov","hits":"1","order":"87","possible_hits":"1",},
{"lineNum":"   87","line":"    @y = pub.y","class":"lineCov","hits":"1","order":"88","possible_hits":"1",},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  # Provides a public point in the two-dimensional space on the given `Secp256k1`"},
{"lineNum":"   91","line":"  # elliptic curve by passing a compressed or uncompressed public key."},
{"lineNum":"   92","line":"  #"},
{"lineNum":"   93","line":"  # Parameters:"},
{"lineNum":"   94","line":"  # * `pub` (`String`): the public key string (compressed or uncompressed)."},
{"lineNum":"   95","line":"  #"},
{"lineNum":"   96","line":"  # ```"},
{"lineNum":"   97","line":"  # pub = \"03aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\""},
{"lineNum":"   98","line":"  # Point.new pub"},
{"lineNum":"   99","line":"  # # => #<Secp256k1::Point:0x7f3b1b9aaf00"},
{"lineNum":"  100","line":"  # #          @x=#<Secp256k1::Num:0x7f3b1b9ad380"},
{"lineNum":"  101","line":"  # #              @hex=\"aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\","},
{"lineNum":"  102","line":"  # #              @dec=79593639541256659698952500103746656102855706770414568473917856266058507588367,"},
{"lineNum":"  103","line":"  # #              @bin=Bytes[175, 248, 103, 77, 107, 150, 166, 197, 141, 186, 176, 139, 144, 53, 101, 54, 50, 113, 48, 136, 136, 52, 10, 44, 173, 223, 136, 229, 97, 101, 147, 15]>,"},
{"lineNum":"  104","line":"  # #          @y=#<Secp256k1::Num:0x7f3b1b9ad340"},
{"lineNum":"  105","line":"  # #              @hex=\"21f4c49cfe90da39c254a51b8ee8afcdd8c02dd566f13582c23e104c7ed5936b\","},
{"lineNum":"  106","line":"  # #              @dec=15358791661898278541670676806913272995387450360720708081975214114817468371819,"},
{"lineNum":"  107","line":"  # #              @bin=Bytes[33, 244, 196, 156, 254, 144, 218, 57, 194, 84, 165, 27, 142, 232, 175, 205, 216, 192, 45, 213, 102, 241, 53, 130, 194, 62, 16, 76, 126, 213, 147, 107]>>"},
{"lineNum":"  108","line":"  # ```"},
{"lineNum":"  109","line":"  def initialize(pub : String)","class":"lineCov","hits":"4","order":"248","possible_hits":"4",},
{"lineNum":"  110","line":"    case pub.size","class":"lineCov","hits":"1","order":"249","possible_hits":"1",},
{"lineNum":"  111","line":"    when 130, 128","class":"lineCov","hits":"2","order":"250","possible_hits":"2",},
{"lineNum":"  112","line":"      pub = pub[2, 128] if pub.size === 130","class":"lineCov","hits":"2","order":"251","possible_hits":"2",},
{"lineNum":"  113","line":"      @x = Num.new pub[0, 64]","class":"lineCov","hits":"1","order":"252","possible_hits":"1",},
{"lineNum":"  114","line":"      @y = Num.new pub[64, 64]","class":"lineCov","hits":"1","order":"253","possible_hits":"1",},
{"lineNum":"  115","line":"    when 66","class":"lineCov","hits":"2","order":"255","possible_hits":"2",},
{"lineNum":"  116","line":"      prefix = pub[0, 2]","class":"lineCov","hits":"1","order":"256","possible_hits":"1",},
{"lineNum":"  117","line":"      if prefix === \"02\" || prefix === \"03\"","class":"lineCov","hits":"2","order":"257","possible_hits":"2",},
{"lineNum":"  118","line":"        prime = P.to_big","class":"lineCov","hits":"1","order":"258","possible_hits":"1",},
{"lineNum":"  119","line":"        x = Num.new(pub[2, 64]).to_big","class":"lineCov","hits":"1","order":"259","possible_hits":"1",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        a = x ** 3 % prime","class":"lineCov","hits":"1","order":"260","possible_hits":"1",},
{"lineNum":"  122","line":"        a = (a + 7) % prime","class":"lineCov","hits":"1","order":"261","possible_hits":"1",},
{"lineNum":"  123","line":"        e = ((prime + 1) // 4) % prime","class":"lineCov","hits":"1","order":"262","possible_hits":"1",},
{"lineNum":"  124","line":"        y = BigInt.new","class":"lineCov","hits":"1","order":"263","possible_hits":"1",},
{"lineNum":"  125","line":"        LibGMP.mpz_powm_sec(y, a, e, prime)","class":"lineCov","hits":"1","order":"264","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"        y_parity = prefix.to_i - 2","class":"linePartCov","hits":"1","order":"265","possible_hits":"2",},
{"lineNum":"  128","line":"        y = -y % prime if y % 2 != y_parity","class":"lineCov","hits":"1","order":"266","possible_hits":"1",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        @x = Num.new x","class":"lineCov","hits":"1","order":"267","possible_hits":"1",},
{"lineNum":"  131","line":"        @y = Num.new y","class":"lineCov","hits":"2","order":"268","possible_hits":"2",},
{"lineNum":"  132","line":"      else"},
{"lineNum":"  133","line":"        raise \"Invalid prefix for compressed public point: #{prefix}\"","class":"lineCov","hits":"2","order":"269","possible_hits":"2",},
{"lineNum":"  134","line":"      end"},
{"lineNum":"  135","line":"    else"},
{"lineNum":"  136","line":"      raise \"Unknown public point format (Invalid size: #{pub.size})\"","class":"lineCov","hits":"3","order":"254","possible_hits":"3",},
{"lineNum":"  137","line":"    end"},
{"lineNum":"  138","line":"  end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  # Returns a prefixed, uncompressed public key string for the given point"},
{"lineNum":"  141","line":"  # in the format `04|x|y`."},
{"lineNum":"  142","line":"  #"},
{"lineNum":"  143","line":"  # ```"},
{"lineNum":"  144","line":"  # priv = Num.new \"e50932676c9901f259659d62f0c56fd899feca3f57ecab147a5ef8a0b59defc3\""},
{"lineNum":"  145","line":"  # Point.new(priv).uncompressed"},
{"lineNum":"  146","line":"  # # => \"04aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f21f4c49cfe90da39c254a51b8ee8afcdd8c02dd566f13582c23e104c7ed5936b\""},
{"lineNum":"  147","line":"  # ```"},
{"lineNum":"  148","line":"  def uncompressed : String","class":"lineCov","hits":"1","order":"102","possible_hits":"1",},
{"lineNum":"  149","line":"    prefix = \"04\"","class":"lineCov","hits":"1","order":"103","possible_hits":"1",},
{"lineNum":"  150","line":"    \"#{prefix}#{@x.to_zpadded_hex}#{@y.to_zpadded_hex}\"","class":"lineCov","hits":"1","order":"104","possible_hits":"1",},
{"lineNum":"  151","line":"  end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  # Returns a prefixed, compressed public key string for the given point"},
{"lineNum":"  154","line":"  # in the format `prefix|x|y`."},
{"lineNum":"  155","line":"  #"},
{"lineNum":"  156","line":"  # ```"},
{"lineNum":"  157","line":"  # priv = Num.new \"e50932676c9901f259659d62f0c56fd899feca3f57ecab147a5ef8a0b59defc3\""},
{"lineNum":"  158","line":"  # Point.new(priv).compressed"},
{"lineNum":"  159","line":"  # # => \"03aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\""},
{"lineNum":"  160","line":"  # ```"},
{"lineNum":"  161","line":"  def compressed : String","class":"lineCov","hits":"2","order":"151","possible_hits":"2",},
{"lineNum":"  162","line":"    prefix = 2 + @y.to_big % 2","class":"lineCov","hits":"1","order":"152","possible_hits":"1",},
{"lineNum":"  163","line":"    prefix = \"0#{prefix}\"","class":"lineCov","hits":"1","order":"153","possible_hits":"1",},
{"lineNum":"  164","line":"    \"#{prefix}#{@x.to_zpadded_hex}\"","class":"lineCov","hits":"1","order":"154","possible_hits":"1",},
{"lineNum":"  165","line":"  end"},
{"lineNum":"  166","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2022-04-06 14:26:02", "instrumented" : 36, "covered" : 36,};
var merged_data = [];
