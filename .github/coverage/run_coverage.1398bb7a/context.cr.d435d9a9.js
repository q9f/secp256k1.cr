var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2022 Afr Schoe @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"# Provides a `Secp256k1` context to allow signing arbitrary data,"},
{"lineNum":"   16","line":"# recovering public keys, and verifying signatures."},
{"lineNum":"   17","line":"#"},
{"lineNum":"   18","line":"# ```"},
{"lineNum":"   19","line":"# ctx = Context.new"},
{"lineNum":"   20","line":"# # => #<Secp256k1::Context:0x7fc855a23e60>"},
{"lineNum":"   21","line":"# ```"},
{"lineNum":"   22","line":"class Secp256k1::Context"},
{"lineNum":"   23","line":"  # Signs a message hash or any other arbitrary data with a given keypair."},
{"lineNum":"   24","line":"  #"},
{"lineNum":"   25","line":"  # Parameters:"},
{"lineNum":"   26","line":"  # * `key` (`Key`): the keypair containing a secret to sign the data."},
{"lineNum":"   27","line":"  # * `hash` (`Num`): the message or arbirtrary data hash."},
{"lineNum":"   28","line":"  #"},
{"lineNum":"   29","line":"  # Returns a `Signature` proving the given key signed the message hash."},
{"lineNum":"   30","line":"  #"},
{"lineNum":"   31","line":"  # ```"},
{"lineNum":"   32","line":"  # ctx = Context.new"},
{"lineNum":"   33","line":"  # key = Key.new Num.new \"1f0c122d41ff536b19bfd83537c0dfc290e45cd3c375a43237c8b8fff7ac8af7\""},
{"lineNum":"   34","line":"  # hash = Util.sha256 \"Henlo, Wordl\""},
{"lineNum":"   35","line":"  # sig = ctx.sign key, hash"},
{"lineNum":"   36","line":"  # # => #<Secp256k1::Signature:0x7f5332e1d9c0"},
{"lineNum":"   37","line":"  # #          @r=#<Secp256k1::Num:0x7f5332decac0"},
{"lineNum":"   38","line":"  # #              @hex=\"c4079db44240b7afe94985c69fc89602e33629fd9b8623d711c30ce6378b33df\","},
{"lineNum":"   39","line":"  # #              @dec=88666774685717741514025410921892109286073075687452443491001272268566542627807,"},
{"lineNum":"   40","line":"  # #              @bin=Bytes[196, 7, 157, 180, 66, 64, 183, 175, 233, 73, 133, 198, 159, 200, 150, 2, 227, 54, 41, 253, 155, 134, 35, 215, 17, 195, 12, 230, 55, 139, 51, 223]>,"},
{"lineNum":"   41","line":"  # #          @s=#<Secp256k1::Num:0x7f5332deca80"},
{"lineNum":"   42","line":"  # #              @hex=\"6842c1b63c94bdb8e4f5ae88fb65f7a98b77b197c8323004fb47ef57fab29053\","},
{"lineNum":"   43","line":"  # #              @dec=47158485109070227797431103290229472044663017260590156038384319099500326195283,"},
{"lineNum":"   44","line":"  # #              @bin=Bytes[104, 66, 193, 182, 60, 148, 189, 184, 228, 245, 174, 136, 251, 101, 247, 169, 139, 119, 177, 151, 200, 50, 48, 4, 251, 71, 239, 87, 250, 178, 144, 83]>,"},
{"lineNum":"   45","line":"  # #          @v=#<Secp256k1::Num:0x7f5332deca40"},
{"lineNum":"   46","line":"  # #              @hex=\"00\","},
{"lineNum":"   47","line":"  # #              @dec=0,"},
{"lineNum":"   48","line":"  # #              @bin=Bytes[0]>>"},
{"lineNum":"   49","line":"  # ```"},
{"lineNum":"   50","line":"  def sign(key : Key, hash : Num) : Signature","class":"lineCov","hits":"2","order":"170","possible_hits":"2",},
{"lineNum":"   51","line":"    k = Util.deterministic_k key.private_key, hash","class":"lineCov","hits":"1","order":"171","possible_hits":"1",},
{"lineNum":"   52","line":"    hash = hash.to_big","class":"lineCov","hits":"1","order":"192","possible_hits":"1",},
{"lineNum":"   53","line":"    priv = key.private_key.to_big","class":"lineCov","hits":"1","order":"193","possible_hits":"1",},
{"lineNum":"   54","line":"    point = Curve.mul G, k","class":"lineCov","hits":"1","order":"194","possible_hits":"1",},
{"lineNum":"   55","line":"    r = point.x.to_big % N.to_big","class":"lineCov","hits":"1","order":"196","possible_hits":"1",},
{"lineNum":"   56","line":"    k_inv = Curve.mod_inv k, N","class":"lineCov","hits":"1","order":"197","possible_hits":"1",},
{"lineNum":"   57","line":"    s = ((hash + r * priv) * k_inv.to_big) % N.to_big","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"   58","line":"    x_mag = point.x.to_big > N.to_big","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"   59","line":"    y_parity = (point.y.to_big % 2) == 0","class":"lineCov","hits":"1","order":"200","possible_hits":"1",},
{"lineNum":"   60","line":"    rec_id : Int8 = -1","class":"lineCov","hits":"1","order":"201","possible_hits":"1",},
{"lineNum":"   61","line":"    if !y_parity && x_mag","class":"lineCov","hits":"2","order":"202","possible_hits":"2",},
{"lineNum":"   62","line":"      rec_id = 3","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"    elsif y_parity && x_mag","class":"lineCov","hits":"2","order":"203","possible_hits":"2",},
{"lineNum":"   64","line":"      rec_id = 2","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"    elsif !y_parity && !x_mag","class":"lineCov","hits":"2","order":"204","possible_hits":"2",},
{"lineNum":"   66","line":"      rec_id = 1","class":"lineCov","hits":"1","order":"205","possible_hits":"1",},
{"lineNum":"   67","line":"    else"},
{"lineNum":"   68","line":"      rec_id = 0","class":"lineCov","hits":"4","order":"206","possible_hits":"4",},
{"lineNum":"   69","line":"    end"},
{"lineNum":"   70","line":"    r = Num.new r","class":"lineCov","hits":"1","order":"207","possible_hits":"1",},
{"lineNum":"   71","line":"    s = Num.new s","class":"lineCov","hits":"1","order":"208","possible_hits":"1",},
{"lineNum":"   72","line":"    v = Num.new BigInt.new rec_id","class":"lineCov","hits":"1","order":"209","possible_hits":"1",},
{"lineNum":"   73","line":"    Signature.new r, s, v","class":"lineCov","hits":"1","order":"210","possible_hits":"1",},
{"lineNum":"   74","line":"  end"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  # Verifies that a given signature for a given message hash matches"},
{"lineNum":"   77","line":"  # the provided public key."},
{"lineNum":"   78","line":"  #"},
{"lineNum":"   79","line":"  # Parameters:"},
{"lineNum":"   80","line":"  # * `sig` (`Signature`): the signature to be verified."},
{"lineNum":"   81","line":"  # * `hash` (`Num`): the message or arbirtrary data hash."},
{"lineNum":"   82","line":"  # * `publ` (`Point`): the public key to match."},
{"lineNum":"   83","line":"  #"},
{"lineNum":"   84","line":"  # Returns _true_ if the signature verifies."},
{"lineNum":"   85","line":"  #"},
{"lineNum":"   86","line":"  # ```"},
{"lineNum":"   87","line":"  # ctx = Context.new"},
{"lineNum":"   88","line":"  # r = Num.new \"c4079db44240b7afe94985c69fc89602e33629fd9b8623d711c30ce6378b33df\""},
{"lineNum":"   89","line":"  # s = Num.new \"6842c1b63c94bdb8e4f5ae88fb65f7a98b77b197c8323004fb47ef57fab29053\""},
{"lineNum":"   90","line":"  # v = Num.new \"00\""},
{"lineNum":"   91","line":"  # sig = Signature.new r, s, v"},
{"lineNum":"   92","line":"  # hash = Util.sha256 \"Henlo, Wordl\""},
{"lineNum":"   93","line":"  # publ = Point.new \"0416008a369439f1a8a75cf974860bed5b10180518d6b1dd3ac847f423fd375d6aa29474394f0cd79d2ea543507d069e97339284f01bdbfd27392daec0ec553816\""},
{"lineNum":"   94","line":"  # ctx.verify sig, hash, publ"},
{"lineNum":"   95","line":"  # # => true"},
{"lineNum":"   96","line":"  # ```"},
{"lineNum":"   97","line":"  def verify(sig : Signature, hash : Num, publ : Point) : Bool","class":"lineCov","hits":"2","order":"215","possible_hits":"2",},
{"lineNum":"   98","line":"    s_inv = Curve.mod_inv sig.s, N","class":"lineCov","hits":"1","order":"216","possible_hits":"1",},
{"lineNum":"   99","line":"    p0 = Curve.mul G, (hash.to_big * s_inv.to_big) % N.to_big","class":"lineCov","hits":"1","order":"217","possible_hits":"1",},
{"lineNum":"  100","line":"    p1 = Curve.mul publ, (sig.r.to_big * s_inv.to_big) % N.to_big","class":"lineCov","hits":"1","order":"218","possible_hits":"1",},
{"lineNum":"  101","line":"    p = Curve.add p0, p1","class":"lineCov","hits":"1","order":"219","possible_hits":"1",},
{"lineNum":"  102","line":"    sig.r.to_big === p.x.to_big","class":"lineCov","hits":"1","order":"220","possible_hits":"1",},
{"lineNum":"  103","line":"  end"},
{"lineNum":"  104","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2022-04-06 14:26:02", "instrumented" : 28, "covered" : 26,};
var merged_data = [];
