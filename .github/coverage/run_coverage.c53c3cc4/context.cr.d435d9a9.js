var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2022 Afr Schoe @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"class Secp256k1::Context"},
{"lineNum":"   16","line":"  def sign(key : Key, hash : Num)","class":"lineCov","hits":"2","order":"100","possible_hits":"2",},
{"lineNum":"   17","line":"    k = deterministic_k key.private_key, hash","class":"lineCov","hits":"1","order":"101","possible_hits":"1",},
{"lineNum":"   18","line":"    hash = hash.to_big","class":"lineCov","hits":"1","order":"131","possible_hits":"1",},
{"lineNum":"   19","line":"    priv = key.private_key.to_big","class":"lineCov","hits":"1","order":"132","possible_hits":"1",},
{"lineNum":"   20","line":"    point = Curve.mul G, k","class":"lineCov","hits":"1","order":"133","possible_hits":"1",},
{"lineNum":"   21","line":"    r = point.x.to_big % N.to_big","class":"lineCov","hits":"1","order":"135","possible_hits":"1",},
{"lineNum":"   22","line":"    k_inv = Curve.mod_inv k, N","class":"lineCov","hits":"1","order":"136","possible_hits":"1",},
{"lineNum":"   23","line":"    s = ((hash + r * priv) * k_inv.to_big) % N.to_big","class":"lineCov","hits":"1","order":"137","possible_hits":"1",},
{"lineNum":"   24","line":"    x_mag = point.x.to_big > N.to_big","class":"lineCov","hits":"1","order":"138","possible_hits":"1",},
{"lineNum":"   25","line":"    y_parity = (point.y.to_big % 2) == 0","class":"lineCov","hits":"1","order":"139","possible_hits":"1",},
{"lineNum":"   26","line":"    rec_id : Int8 = -1","class":"lineCov","hits":"1","order":"140","possible_hits":"1",},
{"lineNum":"   27","line":"    if !y_parity && x_mag","class":"lineCov","hits":"2","order":"141","possible_hits":"2",},
{"lineNum":"   28","line":"      rec_id = 3","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"    elsif y_parity && x_mag","class":"lineCov","hits":"2","order":"142","possible_hits":"2",},
{"lineNum":"   30","line":"      rec_id = 2","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"    elsif !y_parity && !x_mag","class":"lineCov","hits":"2","order":"143","possible_hits":"2",},
{"lineNum":"   32","line":"      rec_id = 1","class":"lineCov","hits":"1","order":"144","possible_hits":"1",},
{"lineNum":"   33","line":"    else"},
{"lineNum":"   34","line":"      rec_id = 0","class":"lineCov","hits":"4","order":"145","possible_hits":"4",},
{"lineNum":"   35","line":"    end"},
{"lineNum":"   36","line":"    r = Num.new r","class":"lineCov","hits":"1","order":"146","possible_hits":"1",},
{"lineNum":"   37","line":"    s = Num.new s","class":"lineCov","hits":"1","order":"147","possible_hits":"1",},
{"lineNum":"   38","line":"    v = Num.new BigInt.new rec_id","class":"lineCov","hits":"1","order":"148","possible_hits":"1",},
{"lineNum":"   39","line":"    Signature.new r, s, v","class":"lineCov","hits":"1","order":"149","possible_hits":"1",},
{"lineNum":"   40","line":"  end"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  def verify(sig : Signature, hash : Num, publ : Point)","class":"lineCov","hits":"2","order":"154","possible_hits":"2",},
{"lineNum":"   43","line":"    s_inv = Curve.mod_inv sig.s, N","class":"lineCov","hits":"1","order":"155","possible_hits":"1",},
{"lineNum":"   44","line":"    p0 = Curve.mul G, (hash.to_big * s_inv.to_big) % N.to_big","class":"lineCov","hits":"1","order":"156","possible_hits":"1",},
{"lineNum":"   45","line":"    p1 = Curve.mul publ, (sig.r.to_big * s_inv.to_big) % N.to_big","class":"lineCov","hits":"1","order":"157","possible_hits":"1",},
{"lineNum":"   46","line":"    p = Curve.add p0, p1","class":"lineCov","hits":"1","order":"158","possible_hits":"1",},
{"lineNum":"   47","line":"    sig.r.to_big === p.x.to_big","class":"lineCov","hits":"1","order":"159","possible_hits":"1",},
{"lineNum":"   48","line":"  end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  def deterministic_k(priv : Num, hash : Num, order = N)","class":"lineCov","hits":"4","order":"102","possible_hits":"4",},
{"lineNum":"   51","line":"    order_size = order.hex.size // 2","class":"lineCov","hits":"1","order":"103","possible_hits":"1",},
{"lineNum":"   52","line":"    v = Num.new Bytes.new order_size, 0x01","class":"lineCov","hits":"1","order":"104","possible_hits":"1",},
{"lineNum":"   53","line":"    k = Num.new Bytes.new order_size, 0x00","class":"lineCov","hits":"1","order":"109","possible_hits":"1",},
{"lineNum":"   54","line":"    concat = Util.concat_bytes v.bin, Bytes[0x00]","class":"lineCov","hits":"2","order":"110","possible_hits":"2",},
{"lineNum":"   55","line":"    concat = Util.concat_bytes concat, priv.bin","class":"lineCov","hits":"3","order":"116","possible_hits":"3",},
{"lineNum":"   56","line":"    concat = Util.concat_bytes concat, hash.bin","class":"lineCov","hits":"3","order":"117","possible_hits":"3",},
{"lineNum":"   57","line":"    k = OpenSSL::HMAC.digest(:sha256, k.bin, concat)","class":"lineCov","hits":"3","order":"118","possible_hits":"3",},
{"lineNum":"   58","line":"    v = OpenSSL::HMAC.digest(:sha256, k, v.bin)","class":"lineCov","hits":"2","order":"119","possible_hits":"2",},
{"lineNum":"   59","line":"    concat = Util.concat_bytes v, Bytes[0x00]","class":"lineCov","hits":"2","order":"120","possible_hits":"2",},
{"lineNum":"   60","line":"    concat = Util.concat_bytes concat, priv.bin","class":"lineCov","hits":"3","order":"121","possible_hits":"3",},
{"lineNum":"   61","line":"    concat = Util.concat_bytes concat, hash.bin","class":"lineCov","hits":"3","order":"122","possible_hits":"3",},
{"lineNum":"   62","line":"    k = OpenSSL::HMAC.digest(:sha256, k, concat)","class":"lineCov","hits":"3","order":"123","possible_hits":"3",},
{"lineNum":"   63","line":"    v = OpenSSL::HMAC.digest(:sha256, k, v)","class":"lineCov","hits":"2","order":"124","possible_hits":"2",},
{"lineNum":"   64","line":"    while true"},
{"lineNum":"   65","line":"      t = IO::Memory.new.to_slice","class":"lineCov","hits":"1","order":"125","possible_hits":"1",},
{"lineNum":"   66","line":"      while t.size < order_size","class":"lineCov","hits":"2","order":"126","possible_hits":"2",},
{"lineNum":"   67","line":"        v = OpenSSL::HMAC.digest(:sha256, k, v)","class":"lineCov","hits":"3","order":"127","possible_hits":"3",},
{"lineNum":"   68","line":"        t = Util.concat_bytes t, v","class":"lineCov","hits":"2","order":"128","possible_hits":"2",},
{"lineNum":"   69","line":"      end"},
{"lineNum":"   70","line":"      secret = Num.new t","class":"lineCov","hits":"1","order":"129","possible_hits":"1",},
{"lineNum":"   71","line":"      if secret.dec < order.dec && secret.dec > 0","class":"lineCov","hits":"2","order":"130","possible_hits":"2",},
{"lineNum":"   72","line":"        return secret"},
{"lineNum":"   73","line":"      end"},
{"lineNum":"   74","line":"      increment = Util.concat_bytes v, Bytes[0x00]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":"      k = OpenSSL::HMAC.digest(:sha256, k, increment)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"      v = OpenSSL::HMAC.digest(:sha256, k, v)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":"    end"},
{"lineNum":"   78","line":"  end"},
{"lineNum":"   79","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2022-04-05 14:23:53", "instrumented" : 51, "covered" : 46,};
var merged_data = [];
