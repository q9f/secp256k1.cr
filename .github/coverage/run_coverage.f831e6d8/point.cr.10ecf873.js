var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2022 Afr Schoe @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"@[Link(\"gmp\")]"},
{"lineNum":"   16","line":"lib LibGMP"},
{"lineNum":"   17","line":"  fun mpz_powm_sec = __gmpz_powm_sec(rop : MPZ*, base : MPZ*, exp : MPZ*, mod : MPZ*)"},
{"lineNum":"   18","line":"end"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"class Secp256k1::Point"},
{"lineNum":"   21","line":"  property x : Num"},
{"lineNum":"   22","line":"  property y : Num"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"  def initialize(x : Num, y : Num)","class":"lineCov","hits":"3","order":"17","possible_hits":"3",},
{"lineNum":"   25","line":"    @x = x","class":"lineCov","hits":"1","order":"18","possible_hits":"1",},
{"lineNum":"   26","line":"    @y = y","class":"lineCov","hits":"1","order":"19","possible_hits":"1",},
{"lineNum":"   27","line":"  end"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"  def initialize(priv : Num)","class":"lineCov","hits":"3","order":"33","possible_hits":"3",},
{"lineNum":"   30","line":"    pub = Curve.mul G, priv.to_big","class":"lineCov","hits":"1","order":"34","possible_hits":"1",},
{"lineNum":"   31","line":"    @x = pub.x","class":"lineCov","hits":"1","order":"95","possible_hits":"1",},
{"lineNum":"   32","line":"    @y = pub.y","class":"lineCov","hits":"1","order":"96","possible_hits":"1",},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  def initialize(pub : String)","class":"lineCov","hits":"4","order":"205","possible_hits":"4",},
{"lineNum":"   36","line":"    case pub.size","class":"lineCov","hits":"1","order":"206","possible_hits":"1",},
{"lineNum":"   37","line":"    when 130, 128","class":"lineCov","hits":"2","order":"207","possible_hits":"2",},
{"lineNum":"   38","line":"      pub = pub[2, 128] if pub.size === 130","class":"lineCov","hits":"2","order":"208","possible_hits":"2",},
{"lineNum":"   39","line":"      @x = Num.new pub[0, 64]","class":"lineCov","hits":"1","order":"209","possible_hits":"1",},
{"lineNum":"   40","line":"      @y = Num.new pub[64, 64]","class":"lineCov","hits":"1","order":"210","possible_hits":"1",},
{"lineNum":"   41","line":"    when 66","class":"lineCov","hits":"2","order":"212","possible_hits":"2",},
{"lineNum":"   42","line":"      prefix = pub[0, 2]","class":"lineCov","hits":"1","order":"213","possible_hits":"1",},
{"lineNum":"   43","line":"      if prefix === \"02\" || prefix === \"03\"","class":"lineCov","hits":"2","order":"214","possible_hits":"2",},
{"lineNum":"   44","line":"        prime = P.to_big","class":"lineCov","hits":"1","order":"215","possible_hits":"1",},
{"lineNum":"   45","line":"        x = Num.new(pub[2, 64]).to_big","class":"lineCov","hits":"1","order":"216","possible_hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        a = x ** 3 % prime","class":"lineCov","hits":"1","order":"217","possible_hits":"1",},
{"lineNum":"   48","line":"        a = (a + 7) % prime","class":"lineCov","hits":"1","order":"218","possible_hits":"1",},
{"lineNum":"   49","line":"        e = ((prime + 1) // 4) % prime","class":"lineCov","hits":"1","order":"219","possible_hits":"1",},
{"lineNum":"   50","line":"        y = BigInt.new","class":"lineCov","hits":"1","order":"220","possible_hits":"1",},
{"lineNum":"   51","line":"        LibGMP.mpz_powm_sec(y, a, e, prime)","class":"lineCov","hits":"1","order":"221","possible_hits":"1",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        y_parity = prefix.to_i - 2","class":"linePartCov","hits":"1","order":"222","possible_hits":"2",},
{"lineNum":"   54","line":"        y = -y % prime if y % 2 != y_parity","class":"lineCov","hits":"1","order":"223","possible_hits":"1",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        @x = Num.new x","class":"lineCov","hits":"1","order":"224","possible_hits":"1",},
{"lineNum":"   57","line":"        @y = Num.new y","class":"lineCov","hits":"2","order":"225","possible_hits":"2",},
{"lineNum":"   58","line":"      else"},
{"lineNum":"   59","line":"        raise \"Invalid prefix for compressed public point: #{prefix}\"","class":"lineCov","hits":"2","order":"226","possible_hits":"2",},
{"lineNum":"   60","line":"      end"},
{"lineNum":"   61","line":"    else"},
{"lineNum":"   62","line":"      raise \"Unknown public point format (Invalid size: #{pub.size})\"","class":"lineCov","hits":"3","order":"211","possible_hits":"3",},
{"lineNum":"   63","line":"    end"},
{"lineNum":"   64","line":"  end"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  def uncompressed","class":"lineCov","hits":"1","order":"20","possible_hits":"1",},
{"lineNum":"   67","line":"    prefix = \"04\"","class":"lineCov","hits":"1","order":"21","possible_hits":"1",},
{"lineNum":"   68","line":"    \"#{prefix}#{@x.to_zpadded_hex}#{@y.to_zpadded_hex}\"","class":"lineCov","hits":"1","order":"22","possible_hits":"1",},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  def compressed","class":"lineCov","hits":"2","order":"26","possible_hits":"2",},
{"lineNum":"   72","line":"    prefix = 2 + @y.to_big % 2","class":"lineCov","hits":"1","order":"27","possible_hits":"1",},
{"lineNum":"   73","line":"    prefix = \"0#{prefix}\"","class":"lineCov","hits":"1","order":"28","possible_hits":"1",},
{"lineNum":"   74","line":"    \"#{prefix}#{@x.to_zpadded_hex}\"","class":"lineCov","hits":"1","order":"29","possible_hits":"1",},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2022-04-05 12:59:49", "instrumented" : 36, "covered" : 36,};
var merged_data = [];
