var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2022 Afr Schoe @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"# Implements 256-bit `Secp256k1` Koblitz elliptic curve operations."},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# Ref: [secg.org/sec2-v2.pdf](https://www.secg.org/sec2-v2.pdf)"},
{"lineNum":"   18","line":"module Secp256k1::Curve"},
{"lineNum":"   19","line":"  extend self"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  # Computes the elliptic curve modular multiplicative inverse of `a`."},
{"lineNum":"   22","line":"  #"},
{"lineNum":"   23","line":"  # Paremeters:"},
{"lineNum":"   24","line":"  # * `a` (`Num | BigInt`): the integer that we want the modular inverse of."},
{"lineNum":"   25","line":"  # * `prime` (`Num`): the prime number that shapes the field (default `P`)."},
{"lineNum":"   26","line":"  #"},
{"lineNum":"   27","line":"  # Returns a `Num` containing the mod inverse."},
{"lineNum":"   28","line":"  #"},
{"lineNum":"   29","line":"  # ```"},
{"lineNum":"   30","line":"  # a = Num.new \"ea678c668356d16d8bf5c69f95c1055e39bd24174605f64846e27c3ae6a88d81\""},
{"lineNum":"   31","line":"  # Curve.mod_inv a"},
{"lineNum":"   32","line":"  # # => #<Secp256k1::Num:0x7fe839493480"},
{"lineNum":"   33","line":"  # #          @hex=\"2901bbb12fcb64e9887e699e69e6b0b3811db18f6b4f94dfb26084e5cb38cac7\","},
{"lineNum":"   34","line":"  # #          @dec=18547889042489459453149555262266367802647896593999507743600711803155665963719,"},
{"lineNum":"   35","line":"  # #          @bin=Bytes[41, 1, 187, 177, 47, 203, 100, 233, 136, 126, 105, 158, 105, 230, 176, 179, 129, 29, 177, 143, 107, 79, 148, 223, 178, 96, 132, 229, 203, 56, 202, 199]>"},
{"lineNum":"   36","line":"  # ```"},
{"lineNum":"   37","line":"  def mod_inv(a : Num | BigInt, prime = P) : Num","class":"lineCov","hits":"8","order":"57","possible_hits":"8",},
{"lineNum":"   38","line":"    a = a.to_big if a.is_a? Num","class":"lineCov","hits":"1","order":"58","possible_hits":"1",},
{"lineNum":"   39","line":"    prime = prime.to_big if prime.is_a? Num","class":"lineCov","hits":"2","order":"59","possible_hits":"2",},
{"lineNum":"   40","line":"    m_low = 1","class":"lineCov","hits":"2","order":"60","possible_hits":"2",},
{"lineNum":"   41","line":"    m_high = 0","class":"lineCov","hits":"2","order":"61","possible_hits":"2",},
{"lineNum":"   42","line":"    v_low = a % prime","class":"lineCov","hits":"2","order":"62","possible_hits":"2",},
{"lineNum":"   43","line":"    v_high = prime","class":"lineCov","hits":"2","order":"63","possible_hits":"2",},
{"lineNum":"   44","line":"    while v_low > 1","class":"lineCov","hits":"2","order":"64","possible_hits":"2",},
{"lineNum":"   45","line":"      v_ratio = v_high // v_low","class":"lineCov","hits":"4","order":"65","possible_hits":"4",},
{"lineNum":"   46","line":"      m_low_r = m_low * v_ratio","class":"lineCov","hits":"4","order":"66","possible_hits":"4",},
{"lineNum":"   47","line":"      v_low_r = v_low * v_ratio","class":"lineCov","hits":"4","order":"67","possible_hits":"4",},
{"lineNum":"   48","line":"      m = m_high - m_low_r","class":"lineCov","hits":"4","order":"68","possible_hits":"4",},
{"lineNum":"   49","line":"      v = v_high - v_low_r","class":"lineCov","hits":"2","order":"69","possible_hits":"2",},
{"lineNum":"   50","line":"      m_high = m_low","class":"lineCov","hits":"2","order":"70","possible_hits":"2",},
{"lineNum":"   51","line":"      v_high = v_low","class":"lineCov","hits":"2","order":"71","possible_hits":"2",},
{"lineNum":"   52","line":"      m_low = m","class":"lineCov","hits":"2","order":"72","possible_hits":"2",},
{"lineNum":"   53","line":"      v_low = v","class":"lineCov","hits":"6","order":"73","possible_hits":"6",},
{"lineNum":"   54","line":"    end"},
{"lineNum":"   55","line":"    Num.new m_low % prime","class":"lineCov","hits":"2","order":"74","possible_hits":"2",},
{"lineNum":"   56","line":"  end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # Computes the elliptic curve jive addition of point `p(x, y)` and `q(x, y)`."},
{"lineNum":"   59","line":"  # It _draws_ a line between `p` and `q` which will intersect the"},
{"lineNum":"   60","line":"  # curve in the point `r` which will be mirrored over the `x`-axis."},
{"lineNum":"   61","line":"  #"},
{"lineNum":"   62","line":"  # Paramters:"},
{"lineNum":"   63","line":"  # * `p` (`Num`): the point `p(x, y)` to be used in the jive addition."},
{"lineNum":"   64","line":"  # * `q` (`Num`): the point `q(x, y)` to be used in the jive addition."},
{"lineNum":"   65","line":"  # * `prime` (`Num`): the prime number that shapes the field (default `P`)."},
{"lineNum":"   66","line":"  #"},
{"lineNum":"   67","line":"  # Returns a `Point` containing the result of the intersection."},
{"lineNum":"   68","line":"  # ```"},
{"lineNum":"   69","line":"  # p = Point.new Num.new \"5cb1eec17e38b004a8fd90fa8e423432430f60d76c30bb33f4091243c029e86d\""},
{"lineNum":"   70","line":"  # q = Point.new Num.new \"7e17f60baa7b8dc8581a55f7be1ea263c6a88452cf3f0a3f710651767654946c\""},
{"lineNum":"   71","line":"  # Curve.add p, q"},
{"lineNum":"   72","line":"  # # => #<Secp256k1::Point:0x7f9cb270f5e0"},
{"lineNum":"   73","line":"  # #          @x=#<Secp256k1::Num:0x7f9cb26e8580"},
{"lineNum":"   74","line":"  # #              @hex=\"462691876380f2b744fbeaac38c69b61f6fc0c09c88161d95a6c121ff939a62b\","},
{"lineNum":"   75","line":"  # #              @dec=31730043992582273538171659139596419882010265215932424156945250658252958049835,"},
{"lineNum":"   76","line":"  # #              @bin=Bytes[70, 38, 145, 135, 99, 128, 242, 183, 68, 251, 234, 172, 56, 198, 155, 97, 246, 252, 12, 9, 200, 129, 97, 217, 90, 108, 18, 31, 249, 57, 166, 43]>,"},
{"lineNum":"   77","line":"  # #          @y=#<Secp256k1::Num:0x7f9cb26e8540"},
{"lineNum":"   78","line":"  # #              @hex=\"5ab931d6727872d33ea0491705680f5fbcb7409ba80541470673c4fce4dfeea4\","},
{"lineNum":"   79","line":"  # #              @dec=41035367046532706466310839850976742216202985567094126989716802462994340507300,"},
{"lineNum":"   80","line":"  # #              @bin=Bytes[90, 185, 49, 214, 114, 120, 114, 211, 62, 160, 73, 23, 5, 104, 15, 95, 188, 183, 64, 155, 168, 5, 65, 71, 6, 115, 196, 252, 228, 223, 238, 164]>>"},
{"lineNum":"   81","line":"  # ```"},
{"lineNum":"   82","line":"  def add(p : Point, q : Point, prime = P) : Point","class":"lineCov","hits":"4","order":"82","possible_hits":"4",},
{"lineNum":"   83","line":"    prime = prime.to_big if prime.is_a? Num","class":"lineCov","hits":"1","order":"83","possible_hits":"1",},
{"lineNum":"   84","line":"    p_x = p.x.to_big","class":"lineCov","hits":"1","order":"84","possible_hits":"1",},
{"lineNum":"   85","line":"    p_y = p.y.to_big","class":"lineCov","hits":"1","order":"85","possible_hits":"1",},
{"lineNum":"   86","line":"    q_x = q.x.to_big","class":"lineCov","hits":"1","order":"86","possible_hits":"1",},
{"lineNum":"   87","line":"    q_y = q.y.to_big","class":"lineCov","hits":"1","order":"87","possible_hits":"1",},
{"lineNum":"   88","line":"    x_delta = q_x - p_x","class":"lineCov","hits":"1","order":"88","possible_hits":"1",},
{"lineNum":"   89","line":"    x_inv = mod_inv x_delta","class":"lineCov","hits":"1","order":"89","possible_hits":"1",},
{"lineNum":"   90","line":"    y_delta = q_y - p_y","class":"lineCov","hits":"1","order":"90","possible_hits":"1",},
{"lineNum":"   91","line":"    m = (y_delta * x_inv.to_big) % prime","class":"lineCov","hits":"1","order":"91","possible_hits":"1",},
{"lineNum":"   92","line":"    x = (m * m - p_x - q_x) % prime","class":"lineCov","hits":"1","order":"92","possible_hits":"1",},
{"lineNum":"   93","line":"    y = (m * (p_x - x) - p_y) % prime","class":"lineCov","hits":"1","order":"93","possible_hits":"1",},
{"lineNum":"   94","line":"    x = Num.new x","class":"lineCov","hits":"1","order":"94","possible_hits":"1",},
{"lineNum":"   95","line":"    y = Num.new y","class":"lineCov","hits":"1","order":"95","possible_hits":"1",},
{"lineNum":"   96","line":"    Point.new x, y","class":"lineCov","hits":"1","order":"96","possible_hits":"1",},
{"lineNum":"   97","line":"  end"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  # Computes the elliptic curve juke point doubling of `p(x, y)`."},
{"lineNum":"  100","line":"  # This is a special case of addition where both points are the same."},
{"lineNum":"  101","line":"  # It _draws_ a tangent line at `p` which will intersect the curve"},
{"lineNum":"  102","line":"  # at point `r` which will be mirrored over the `x`-axis."},
{"lineNum":"  103","line":"  #"},
{"lineNum":"  104","line":"  # Paramters:"},
{"lineNum":"  105","line":"  # * `p` (`Point`): the point `p(x, y)` to be used in the juke doubling."},
{"lineNum":"  106","line":"  # * `prime` (`Num`): the prime number that shapes the field (default `P`)."},
{"lineNum":"  107","line":"  #"},
{"lineNum":"  108","line":"  # Returns a `Point` as a result of the intersection."},
{"lineNum":"  109","line":"  #"},
{"lineNum":"  110","line":"  # ```"},
{"lineNum":"  111","line":"  # p = Point.new Num.new \"5cb1eec17e38b004a8fd90fa8e423432430f60d76c30bb33f4091243c029e86d\""},
{"lineNum":"  112","line":"  # Curve.double p"},
{"lineNum":"  113","line":"  # # => #<Secp256k1::Point:0x7f58a244e860"},
{"lineNum":"  114","line":"  # #          @x=#<Secp256k1::Num:0x7f58a240fdc0"},
{"lineNum":"  115","line":"  # #              @hex=\"a4a5f515981b6375a8f95c60607ca5ad5fee99bfc1615dabc9340f67e71bbfd0\","},
{"lineNum":"  116","line":"  # #              @dec=74472528443376700120710890798997658581940283975604946405194317381666873262032,"},
{"lineNum":"  117","line":"  # #              @bin=Bytes[164, 165, 245, 21, 152, 27, 99, 117, 168, 249, 92, 96, 96, 124, 165, 173, 95, 238, 153, 191, 193, 97, 93, 171, 201, 52, 15, 103, 231, 27, 191, 208]>,"},
{"lineNum":"  118","line":"  # #          @y=#<Secp256k1::Num:0x7f58a240fd80"},
{"lineNum":"  119","line":"  # #              @hex=\"0fa62813ae49d71dd3a19fbd17516e7e9dcdd5753d69cb13d87051d8d327253c\","},
{"lineNum":"  120","line":"  # #              @dec=7078265941949780810129057229376739925018916922271301049726817038887681467708,"},
{"lineNum":"  121","line":"  # #              @bin=Bytes[15, 166, 40, 19, 174, 73, 215, 29, 211, 161, 159, 189, 23, 81, 110, 126, 157, 205, 213, 117, 61, 105, 203, 19, 216, 112, 81, 216, 211, 39, 37, 60]>>"},
{"lineNum":"  122","line":"  # ```"},
{"lineNum":"  123","line":"  def double(p : Point, prime = P) : Point","class":"lineCov","hits":"4","order":"44","possible_hits":"4",},
{"lineNum":"  124","line":"    prime = prime.to_big if prime.is_a? Num","class":"lineCov","hits":"1","order":"45","possible_hits":"1",},
{"lineNum":"  125","line":"    p_x = p.x.to_big","class":"lineCov","hits":"1","order":"46","possible_hits":"1",},
{"lineNum":"  126","line":"    p_y = p.y.to_big","class":"lineCov","hits":"1","order":"47","possible_hits":"1",},
{"lineNum":"  127","line":"    lam_numer = 3 * p_x * p_x","class":"lineCov","hits":"1","order":"48","possible_hits":"1",},
{"lineNum":"  128","line":"    lam_denom = 2 * p_y","class":"lineCov","hits":"1","order":"49","possible_hits":"1",},
{"lineNum":"  129","line":"    lam_inv = mod_inv Num.new lam_denom","class":"lineCov","hits":"1","order":"50","possible_hits":"1",},
{"lineNum":"  130","line":"    lam = (lam_numer * lam_inv.to_big) % prime","class":"lineCov","hits":"1","order":"75","possible_hits":"1",},
{"lineNum":"  131","line":"    x = (lam * lam - 2 * p_x) % prime","class":"lineCov","hits":"1","order":"76","possible_hits":"1",},
{"lineNum":"  132","line":"    y = (lam * (p_x - x) - p_y) % prime","class":"lineCov","hits":"1","order":"77","possible_hits":"1",},
{"lineNum":"  133","line":"    x = Num.new x","class":"lineCov","hits":"1","order":"78","possible_hits":"1",},
{"lineNum":"  134","line":"    y = Num.new y","class":"lineCov","hits":"1","order":"79","possible_hits":"1",},
{"lineNum":"  135","line":"    Point.new x, y","class":"lineCov","hits":"1","order":"80","possible_hits":"1",},
{"lineNum":"  136","line":"  end"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  # Computes the elliptic curve sequence multiplication of point `p(x, y)`"},
{"lineNum":"  139","line":"  # and a skalar `s`; with `s` being a private key within the elliptic"},
{"lineNum":"  140","line":"  # curve field size of `N`."},
{"lineNum":"  141","line":"  #"},
{"lineNum":"  142","line":"  # Paramters:"},
{"lineNum":"  143","line":"  # * `p` (`Point`): the point `p(x, y)` to be used in the sequencing."},
{"lineNum":"  144","line":"  # * `s` (`Num | BigInt`): a skalar, in most cases a private key."},
{"lineNum":"  145","line":"  #"},
{"lineNum":"  146","line":"  # Returns a `Point` as a result of the multiplication."},
{"lineNum":"  147","line":"  #"},
{"lineNum":"  148","line":"  # ```"},
{"lineNum":"  149","line":"  # p = Point.new Num.new \"5cb1eec17e38b004a8fd90fa8e423432430f60d76c30bb33f4091243c029e86d\""},
{"lineNum":"  150","line":"  # s = Num.new \"f51ad125548b7a283ebf15ab830a25c850d4d863078c48cc9993b79ee18ee11e\""},
{"lineNum":"  151","line":"  # Curve.mul p, s"},
{"lineNum":"  152","line":"  # # => #<Secp256k1::Point:0x7f4b6f6da940"},
{"lineNum":"  153","line":"  # #          @x=#<Secp256k1::Num:0x7f4b6f6cef00"},
{"lineNum":"  154","line":"  # #              @hex=\"748f267620fa2cbf67c925db79a9bef6f9025e642d9c15c1d34b4961471636b5\","},
{"lineNum":"  155","line":"  # #              @dec=52721215017030004050607035413180757873535914286730888523429593251155658815157,"},
{"lineNum":"  156","line":"  # #              @bin=Bytes[116, 143, 38, 118, 32, 250, 44, 191, 103, 201, 37, 219, 121, 169, 190, 246, 249, 2, 94, 100, 45, 156, 21, 193, 211, 75, 73, 97, 71, 22, 54, 181]>,"},
{"lineNum":"  157","line":"  # #          @y=#<Secp256k1::Num:0x7f4b6f6cee00"},
{"lineNum":"  158","line":"  # #              @hex=\"73832331979d89d395912061e341f8468cfb3e619da06a057e4a5ca95bb95e77\","},
{"lineNum":"  159","line":"  # #              @dec=52247677450688090944696492452353217603423545532791062178926183551888078233207,"},
{"lineNum":"  160","line":"  # #              @bin=Bytes[115, 131, 35, 49, 151, 157, 137, 211, 149, 145, 32, 97, 227, 65, 248, 70, 140, 251, 62, 97, 157, 160, 106, 5, 126, 74, 92, 169, 91, 185, 94, 119]>>"},
{"lineNum":"  161","line":"  # ```"},
{"lineNum":"  162","line":"  def mul(p : Point, s : Num | BigInt) : Point","class":"lineCov","hits":"4","order":"37","possible_hits":"4",},
{"lineNum":"  163","line":"    s = s.to_big if s.is_a? Num","class":"lineCov","hits":"1","order":"136","possible_hits":"1",},
{"lineNum":"  164","line":"    if s === 0 || s >= N.to_big","class":"linePartCov","hits":"3","order":"38","possible_hits":"4",},
{"lineNum":"  165","line":"      raise \"Invalid scalar: outside of Secp256k1 field dimension.\"","class":"linePartCov","hits":"1","order":"199","possible_hits":"2",},
{"lineNum":"  166","line":"    end"},
{"lineNum":"  167","line":"    s_bin = s.to_s 2","class":"lineCov","hits":"2","order":"39","possible_hits":"2",},
{"lineNum":"  168","line":"    q = p","class":"lineCov","hits":"2","order":"40","possible_hits":"2",},
{"lineNum":"  169","line":"    s_bin.each_char_with_index do |char, index|"},
{"lineNum":"  170","line":"      next if index === 0","class":"linePartCov","hits":"2","order":"41","possible_hits":"6",},
{"lineNum":"  171","line":"      q = double q","class":"linePartCov","hits":"2","order":"43","possible_hits":"4",},
{"lineNum":"  172","line":"      if char === \'1\'","class":"linePartCov","hits":"4","order":"81","possible_hits":"8",},
{"lineNum":"  173","line":"        q = add q, p","class":"linePartCov","hits":"4","order":"42","possible_hits":"8",},
{"lineNum":"  174","line":"      end"},
{"lineNum":"  175","line":"    end"},
{"lineNum":"  176","line":"    q"},
{"lineNum":"  177","line":"  end"},
{"lineNum":"  178","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2022-04-06 12:16:54", "instrumented" : 56, "covered" : 56,};
var merged_data = [];
