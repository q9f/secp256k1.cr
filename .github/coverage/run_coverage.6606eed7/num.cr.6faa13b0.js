var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2022 Afr Schoe @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"# Provides a class to conveniently handle big numbers on the elliptic"},
{"lineNum":"   16","line":"# curve. It allows to easily access decimal, hexadecimal, and binary"},
{"lineNum":"   17","line":"# representations of the numeric. In addition, it implements some"},
{"lineNum":"   18","line":"# utilities such as zpadding or asserting hexadecimal strings."},
{"lineNum":"   19","line":"#"},
{"lineNum":"   20","line":"# Properties:"},
{"lineNum":"   21","line":"# * `hex` (`String`): the hexadecimal string representation of the number."},
{"lineNum":"   22","line":"# * `dec` (`BigInt`): the decimal big-integer representation of the number."},
{"lineNum":"   23","line":"# * `bin` (`Bytes`): the binary bytes-slice represenation of the number."},
{"lineNum":"   24","line":"class Secp256k1::Num"},
{"lineNum":"   25","line":"  # The hexadecimal string representation of the number."},
{"lineNum":"   26","line":"  property hex : String"},
{"lineNum":"   27","line":"  # The decimal big-integer representation of the number."},
{"lineNum":"   28","line":"  property dec : BigInt"},
{"lineNum":"   29","line":"  # The binary bytes-slice represenation of the number."},
{"lineNum":"   30","line":"  property bin : Slice(UInt8)"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # Creates a random number using `Random::Secure` that can be used as"},
{"lineNum":"   33","line":"  # a secret (private key)."},
{"lineNum":"   34","line":"  #"},
{"lineNum":"   35","line":"  # ```"},
{"lineNum":"   36","line":"  # Num.new"},
{"lineNum":"   37","line":"  # # => #<Secp256k1::Num:0x7ff3d98013c0"},
{"lineNum":"   38","line":"  # #          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\","},
{"lineNum":"   39","line":"  # #          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,"},
{"lineNum":"   40","line":"  # #          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>"},
{"lineNum":"   41","line":"  # ```"},
{"lineNum":"   42","line":"  def initialize","class":"lineCov","hits":"3","order":"169","possible_hits":"3",},
{"lineNum":"   43","line":"    hex = \"0\"","class":"lineCov","hits":"1","order":"170","possible_hits":"1",},
{"lineNum":"   44","line":"    key = 0","class":"lineCov","hits":"1","order":"171","possible_hits":"1",},
{"lineNum":"   45","line":"    until key > 0 && key < N.to_big","class":"lineCov","hits":"2","order":"172","possible_hits":"2",},
{"lineNum":"   46","line":"      hex = Random::Secure.hex 32","class":"lineCov","hits":"1","order":"173","possible_hits":"1",},
{"lineNum":"   47","line":"      key = BigInt.new hex, 16","class":"lineCov","hits":"1","order":"174","possible_hits":"1",},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":"    @hex = hex","class":"linePartCov","hits":"1","order":"175","possible_hits":"2",},
{"lineNum":"   50","line":"    @dec = BigInt.new key","class":"linePartCov","hits":"1","order":"176","possible_hits":"2",},
{"lineNum":"   51","line":"    @bin = hex.hexbytes","class":"lineCov","hits":"1","order":"177","possible_hits":"1",},
{"lineNum":"   52","line":"  end"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"  # Creates a number from a hexadecimal string literal."},
{"lineNum":"   55","line":"  #"},
{"lineNum":"   56","line":"  # Parameters:"},
{"lineNum":"   57","line":"  # * `hex` (`String`): a hexadecimal string representating the number."},
{"lineNum":"   58","line":"  #"},
{"lineNum":"   59","line":"  # ```"},
{"lineNum":"   60","line":"  # Num.new \"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\""},
{"lineNum":"   61","line":"  # # => #<Secp256k1::Num:0x7fb934585480"},
{"lineNum":"   62","line":"  # #          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\","},
{"lineNum":"   63","line":"  # #          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,"},
{"lineNum":"   64","line":"  # #          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>"},
{"lineNum":"   65","line":"  # ```"},
{"lineNum":"   66","line":"  def initialize(hex : String)","class":"lineCov","hits":"4","order":"2","possible_hits":"4",},
{"lineNum":"   67","line":"    hex = assert_hexadecimal hex","class":"lineCov","hits":"1","order":"3","possible_hits":"1",},
{"lineNum":"   68","line":"    hex = \"0#{hex}\" if hex.size % 2 != 0","class":"lineCov","hits":"1","order":"11","possible_hits":"1",},
{"lineNum":"   69","line":"    @hex = hex","class":"lineCov","hits":"1","order":"12","possible_hits":"1",},
{"lineNum":"   70","line":"    @dec = BigInt.new hex, 16","class":"lineCov","hits":"1","order":"13","possible_hits":"1",},
{"lineNum":"   71","line":"    @bin = hex.hexbytes","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  # Creates a number from a big integer numeric."},
{"lineNum":"   75","line":"  #"},
{"lineNum":"   76","line":"  # Parameters:"},
{"lineNum":"   77","line":"  # * `dec` (`BigInt`): the decimal big-integer representating the number."},
{"lineNum":"   78","line":"  #"},
{"lineNum":"   79","line":"  # ```"},
{"lineNum":"   80","line":"  # Num.new BigInt.new \"39142835565766237398843902819171565157710677457569850027793715608438337348717\""},
{"lineNum":"   81","line":"  # # => #<Secp256k1::Num:0x7fb934585480"},
{"lineNum":"   82","line":"  # #          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\","},
{"lineNum":"   83","line":"  # #          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,"},
{"lineNum":"   84","line":"  # #          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>"},
{"lineNum":"   85","line":"  # ```"},
{"lineNum":"   86","line":"  def initialize(num : BigInt)","class":"lineCov","hits":"4","order":"51","possible_hits":"4",},
{"lineNum":"   87","line":"    hex = num.to_s 16","class":"lineCov","hits":"1","order":"52","possible_hits":"1",},
{"lineNum":"   88","line":"    hex = \"0#{hex}\" if hex.size % 2 != 0","class":"lineCov","hits":"1","order":"53","possible_hits":"1",},
{"lineNum":"   89","line":"    @hex = hex","class":"lineCov","hits":"1","order":"54","possible_hits":"1",},
{"lineNum":"   90","line":"    @dec = num","class":"lineCov","hits":"1","order":"55","possible_hits":"1",},
{"lineNum":"   91","line":"    @bin = hex.hexbytes","class":"lineCov","hits":"1","order":"56","possible_hits":"1",},
{"lineNum":"   92","line":"  end"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  # Creates a number from a binary bytes slice."},
{"lineNum":"   95","line":"  #"},
{"lineNum":"   96","line":"  # Parameters:"},
{"lineNum":"   97","line":"  # * `bin` (`Bytes`): the binary bytes-slice represenating the number."},
{"lineNum":"   98","line":"  #"},
{"lineNum":"   99","line":"  # ```"},
{"lineNum":"  100","line":"  # Num.new Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]"},
{"lineNum":"  101","line":"  # # => #<Secp256k1::Num:0x7fb934585480"},
{"lineNum":"  102","line":"  # #          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\","},
{"lineNum":"  103","line":"  # #          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,"},
{"lineNum":"  104","line":"  # #          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>"},
{"lineNum":"  105","line":"  # ```"},
{"lineNum":"  106","line":"  def initialize(bin : Slice(UInt8))","class":"lineCov","hits":"4","order":"107","possible_hits":"4",},
{"lineNum":"  107","line":"    @hex = bin.hexstring","class":"lineCov","hits":"1","order":"108","possible_hits":"1",},
{"lineNum":"  108","line":"    @dec = BigInt.new bin.hexstring, 16","class":"lineCov","hits":"1","order":"109","possible_hits":"1",},
{"lineNum":"  109","line":"    @bin = bin","class":"lineCov","hits":"1","order":"110","possible_hits":"1",},
{"lineNum":"  110","line":"  end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  # Returns an unprefixed hexadecimal string representation."},
{"lineNum":"  113","line":"  #"},
{"lineNum":"  114","line":"  # ```"},
{"lineNum":"  115","line":"  # Num.new(Bytes[137]).to_hex"},
{"lineNum":"  116","line":"  # # => \"89\""},
{"lineNum":"  117","line":"  # ```"},
{"lineNum":"  118","line":"  def to_hex"},
{"lineNum":"  119","line":"    @hex"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  # Returns an `0x`-prefixed hexadecimal string representation."},
{"lineNum":"  123","line":"  #"},
{"lineNum":"  124","line":"  # ```"},
{"lineNum":"  125","line":"  # Num.new(Bytes[137]).to_prefixed_hex"},
{"lineNum":"  126","line":"  # # => \"0x89\""},
{"lineNum":"  127","line":"  # ```"},
{"lineNum":"  128","line":"  def to_prefixed_hex","class":"lineCov","hits":"2","order":"197","possible_hits":"2",},
{"lineNum":"  129","line":"    \"0x#{@hex}\"","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"  130","line":"  end"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"  # Returns a z-padded hexadecimal string representation."},
{"lineNum":"  133","line":"  #"},
{"lineNum":"  134","line":"  # Parameters:"},
{"lineNum":"  135","line":"  # * `length` (`Int`): the byte-size of the final z-padded hex-string (default `32`)."},
{"lineNum":"  136","line":"  #"},
{"lineNum":"  137","line":"  # ```"},
{"lineNum":"  138","line":"  # Num.new(Bytes[137]).to_zpadded_hex"},
{"lineNum":"  139","line":"  # # => \"0000000000000000000000000000000000000000000000000000000000000089\""},
{"lineNum":"  140","line":"  # ```"},
{"lineNum":"  141","line":"  def to_zpadded_hex(length = 32)","class":"lineCov","hits":"4","order":"25","possible_hits":"4",},
{"lineNum":"  142","line":"    zpadded_hex = @hex","class":"lineCov","hits":"1","order":"26","possible_hits":"1",},
{"lineNum":"  143","line":"    while zpadded_hex.size < length * 2","class":"linePartCov","hits":"1","order":"27","possible_hits":"2",},
{"lineNum":"  144","line":"      zpadded_hex = \"0#{zpadded_hex}\"","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"  145","line":"    end"},
{"lineNum":"  146","line":"    zpadded_hex"},
{"lineNum":"  147","line":"  end"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  # Returns a big-integer representation of the number."},
{"lineNum":"  150","line":"  #"},
{"lineNum":"  151","line":"  # ```"},
{"lineNum":"  152","line":"  # Num.new(Bytes[137]).to_big"},
{"lineNum":"  153","line":"  # # => 137"},
{"lineNum":"  154","line":"  # ```"},
{"lineNum":"  155","line":"  def to_big"},
{"lineNum":"  156","line":"    @dec"},
{"lineNum":"  157","line":"  end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  # Returns a binary byte-slice representation of the number."},
{"lineNum":"  160","line":"  #"},
{"lineNum":"  161","line":"  # ```"},
{"lineNum":"  162","line":"  # Num.new(\"0x89\").to_bytes"},
{"lineNum":"  163","line":"  # # => Bytes[137]"},
{"lineNum":"  164","line":"  # ```"},
{"lineNum":"  165","line":"  def to_bytes"},
{"lineNum":"  166","line":"    @bin"},
{"lineNum":"  167","line":"  end"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  # Returns a z-padded byte-slice binary representation."},
{"lineNum":"  170","line":"  #"},
{"lineNum":"  171","line":"  # Parameters:"},
{"lineNum":"  172","line":"  # * `length` (`Int`): the byte-size of the final z-padded slice (default `32`)."},
{"lineNum":"  173","line":"  #"},
{"lineNum":"  174","line":"  # ```"},
{"lineNum":"  175","line":"  # Num.new(Bytes[137]).to_zpadded_bytes"},
{"lineNum":"  176","line":"  # # => Bytes[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137]"},
{"lineNum":"  177","line":"  # ```"},
{"lineNum":"  178","line":"  def to_zpadded_bytes(length = 32)","class":"lineCov","hits":"3","order":"183","possible_hits":"3",},
{"lineNum":"  179","line":"    zpadded_bytes = @bin","class":"lineCov","hits":"1","order":"184","possible_hits":"1",},
{"lineNum":"  180","line":"    byte_zero = Bytes[0]","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":"  181","line":"    while zpadded_bytes.size < length","class":"lineCov","hits":"1","order":"186","possible_hits":"1",},
{"lineNum":"  182","line":"      slice_size = zpadded_bytes.size + 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"      zpadded_slice = Slice(UInt8).new slice_size","class":"lineCov","hits":"1","order":"192","possible_hits":"1",},
{"lineNum":"  184","line":"      slice_pointer = zpadded_slice.to_unsafe","class":"lineCov","hits":"1","order":"193","possible_hits":"1",},
{"lineNum":"  185","line":"      byte_zero.copy_to(slice_pointer, 0)","class":"lineCov","hits":"1","order":"194","possible_hits":"1",},
{"lineNum":"  186","line":"      slice_pointer += 1","class":"lineCov","hits":"1","order":"195","possible_hits":"1",},
{"lineNum":"  187","line":"      zpadded_bytes.copy_to(slice_pointer, zpadded_bytes.size)","class":"lineCov","hits":"1","order":"196","possible_hits":"1",},
{"lineNum":"  188","line":"      zpadded_bytes = zpadded_slice","class":"lineCov","hits":"2","order":"187","possible_hits":"2",},
{"lineNum":"  189","line":"    end"},
{"lineNum":"  190","line":"    zpadded_bytes"},
{"lineNum":"  191","line":"  end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  # Assists to determine wether a hex-string is prefixed."},
{"lineNum":"  194","line":"  private def is_prefixed?(hex : String)","class":"lineCov","hits":"2","order":"6","possible_hits":"2",},
{"lineNum":"  195","line":"    prefix_match = /\\A0x/.match hex","class":"lineCov","hits":"2","order":"7","possible_hits":"2",},
{"lineNum":"  196","line":"    unless prefix_match.nil?","class":"lineCov","hits":"1","order":"8","possible_hits":"1",},
{"lineNum":"  197","line":"      return true"},
{"lineNum":"  198","line":"    else"},
{"lineNum":"  199","line":"      return false"},
{"lineNum":"  200","line":"    end"},
{"lineNum":"  201","line":"  end"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  # Assists to remove a `0x`-hex prefix."},
{"lineNum":"  204","line":"  private def remove_prefix(hex : String)","class":"lineCov","hits":"1","order":"201","possible_hits":"1",},
{"lineNum":"  205","line":"    if is_prefixed? hex","class":"lineCov","hits":"1","order":"202","possible_hits":"1",},
{"lineNum":"  206","line":"      return hex[2..-1]","class":"lineCov","hits":"1","order":"203","possible_hits":"1",},
{"lineNum":"  207","line":"    else"},
{"lineNum":"  208","line":"      return hex"},
{"lineNum":"  209","line":"    end"},
{"lineNum":"  210","line":"  end"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  # Assists to assert wether a `String` is hexadecimal or not."},
{"lineNum":"  213","line":"  private def assert_hexadecimal(hex : String)","class":"lineCov","hits":"2","order":"4","possible_hits":"2",},
{"lineNum":"  214","line":"    if is_prefixed? hex","class":"lineCov","hits":"1","order":"5","possible_hits":"1",},
{"lineNum":"  215","line":"      hex = remove_prefix hex","class":"lineCov","hits":"1","order":"200","possible_hits":"1",},
{"lineNum":"  216","line":"    end"},
{"lineNum":"  217","line":"    hex_match = /\\A[0-9a-fA-F]*\\z/.match hex","class":"lineCov","hits":"2","order":"9","possible_hits":"2",},
{"lineNum":"  218","line":"    unless hex_match.nil?","class":"lineCov","hits":"1","order":"10","possible_hits":"1",},
{"lineNum":"  219","line":"      return hex_match.string"},
{"lineNum":"  220","line":"    else"},
{"lineNum":"  221","line":"      raise \"Invalid hex data provided: \'#{hex}\'\"","class":"lineCov","hits":"1","order":"204","possible_hits":"1",},
{"lineNum":"  222","line":"    end"},
{"lineNum":"  223","line":"  end"},
{"lineNum":"  224","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2022-04-05 19:02:46", "instrumented" : 54, "covered" : 53,};
var merged_data = [];
