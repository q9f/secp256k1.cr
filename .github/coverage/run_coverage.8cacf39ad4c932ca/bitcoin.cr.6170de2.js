var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2020 @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"# Implements the `Bitcoin` address space for the `Secp256k1` library."},
{"lineNum":"   16","line":"module Secp256k1::Bitcoin"},
{"lineNum":"   17","line":"  # Implements a `Bitcoin` account containing a `Keypair`, a Wallet-Import Format,"},
{"lineNum":"   18","line":"  # and an address."},
{"lineNum":"   19","line":"  #"},
{"lineNum":"   20","line":"  # Properties:"},
{"lineNum":"   21","line":"  # * `key_pair` (`Keypair`): the `Keypair` containing the secret key."},
{"lineNum":"   22","line":"  # * `version` (`String`): the version byte determining the used network encoding."},
{"lineNum":"   23","line":"  # * `compressed` (`Bool`): an indicator whether a compressed format should be used."},
{"lineNum":"   24","line":"  # * `address` (`String`): the public `Bitcoin` address."},
{"lineNum":"   25","line":"  # * `wif` (`String`): the private Wallet-Import Format (WIF)."},
{"lineNum":"   26","line":"  #"},
{"lineNum":"   27","line":"  # ```"},
{"lineNum":"   28","line":"  # btc = Secp256k1::Bitcoin::Account.new"},
{"lineNum":"   29","line":"  # btc.wif"},
{"lineNum":"   30","line":"  # # => \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"   31","line":"  # btc.address"},
{"lineNum":"   32","line":"  # # => \"1Gbxhju13BpwpzzFRgNr2TDYCRTg94kgFC\""},
{"lineNum":"   33","line":"  # ```"},
{"lineNum":"   34","line":"  class Account"},
{"lineNum":"   35","line":"    # The `Keypair` containing the secret key."},
{"lineNum":"   36","line":"    property key_pair : Keypair"},
{"lineNum":"   37","line":"    # The version byte determining the used network encoding."},
{"lineNum":"   38","line":"    property version : String"},
{"lineNum":"   39","line":"    # An indicator whether a compressed format should be used."},
{"lineNum":"   40","line":"    property compressed : Bool"},
{"lineNum":"   41","line":"    # The public `Bitcoin` address."},
{"lineNum":"   42","line":"    property address : String"},
{"lineNum":"   43","line":"    # The private Wallet-Import Format (WIF)."},
{"lineNum":"   44","line":"    property wif : String"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    # Generates a new `Bitcoin::Account` from a fresh random `Keypair`."},
{"lineNum":"   47","line":"    #"},
{"lineNum":"   48","line":"    # ```"},
{"lineNum":"   49","line":"    # btc = Secp256k1::Bitcoin::Account.new"},
{"lineNum":"   50","line":"    # # => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>"},
{"lineNum":"   51","line":"    # ```"},
{"lineNum":"   52","line":"    #"},
{"lineNum":"   53","line":"    # Note, this always generates an uncompressed mainnet Bitcoin account."},
{"lineNum":"   54","line":"    def initialize"},
{"lineNum":"   55","line":"      @key_pair = Keypair.new"},
{"lineNum":"   56","line":"      @version = \"00\""},
{"lineNum":"   57","line":"      @compressed = false"},
{"lineNum":"   58","line":"      @address = Bitcoin.address_from_private @key_pair.private_key, @version, @compressed"},
{"lineNum":"   59","line":"      @wif = Bitcoin.wif_from_private_uncompressed @key_pair.private_key, version_wif"},
{"lineNum":"   60","line":"    end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    # Generates a `Bitcoin::Account` from a provided `Keypair`."},
{"lineNum":"   63","line":"    #"},
{"lineNum":"   64","line":"    # Parameters:"},
{"lineNum":"   65","line":"    # * `key_pair` (`Keypair`): the `Keypair` containing the secret key."},
{"lineNum":"   66","line":"    #"},
{"lineNum":"   67","line":"    # ```"},
{"lineNum":"   68","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"   69","line":"    # btc = Secp256k1::Bitcoin::Account.new key"},
{"lineNum":"   70","line":"    # # => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>"},
{"lineNum":"   71","line":"    # ```"},
{"lineNum":"   72","line":"    #"},
{"lineNum":"   73","line":"    # Note, this always generates an uncompressed mainnet Bitcoin account."},
{"lineNum":"   74","line":"    def initialize(@key_pair)","class":"lineCov","hits":"4","order":"171","possible_hits":"4",},
{"lineNum":"   75","line":"      @version = \"00\"","class":"lineCov","hits":"1","order":"172","possible_hits":"1",},
{"lineNum":"   76","line":"      @compressed = false","class":"lineCov","hits":"1","order":"173","possible_hits":"1",},
{"lineNum":"   77","line":"      @address = Bitcoin.address_from_private @key_pair.private_key, @version, @compressed","class":"lineCov","hits":"1","order":"174","possible_hits":"1",},
{"lineNum":"   78","line":"      @wif = Bitcoin.wif_from_private_uncompressed @key_pair.private_key, version_wif","class":"lineCov","hits":"1","order":"175","possible_hits":"1",},
{"lineNum":"   79","line":"    end"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    # Generates a `Bitcoin::Account` from a provided `Keypair` allowing for a custom"},
{"lineNum":"   82","line":"    # network version byte."},
{"lineNum":"   83","line":"    #"},
{"lineNum":"   84","line":"    # Parameters:"},
{"lineNum":"   85","line":"    # * `key_pair` (`Keypair`): the `Keypair` containing the secret key."},
{"lineNum":"   86","line":"    # * `version` (`String`): the version byte determining the used network encoding."},
{"lineNum":"   87","line":"    #"},
{"lineNum":"   88","line":"    # ```"},
{"lineNum":"   89","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"   90","line":"    # btc = Secp256k1::Bitcoin::Account.new key, \"1e\""},
{"lineNum":"   91","line":"    # # => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>"},
{"lineNum":"   92","line":"    # ```"},
{"lineNum":"   93","line":"    #"},
{"lineNum":"   94","line":"    # Note, this always generates an uncompressed account for the specified network."},
{"lineNum":"   95","line":"    #"},
{"lineNum":"   96","line":"    # Raises if the version byte is out of range."},
{"lineNum":"   97","line":"    def initialize(@key_pair, @version)","class":"lineCov","hits":"4","order":"134","possible_hits":"4",},
{"lineNum":"   98","line":"      v = @version.to_i 16","class":"lineCov","hits":"1","order":"135","possible_hits":"1",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"      # Ensures a valid public key version byte (not WIF version byte)."},
{"lineNum":"  101","line":"      if !v.nil? && v >= 0 && v < 128","class":"lineCov","hits":"2","order":"136","possible_hits":"2",},
{"lineNum":"  102","line":"        @compressed = false","class":"lineCov","hits":"1","order":"137","possible_hits":"1",},
{"lineNum":"  103","line":"        @address = Bitcoin.address_from_private @key_pair.private_key, @version, @compressed","class":"lineCov","hits":"1","order":"138","possible_hits":"1",},
{"lineNum":"  104","line":"        @wif = Bitcoin.wif_from_private_uncompressed @key_pair.private_key, version_wif","class":"lineCov","hits":"1","order":"139","possible_hits":"1",},
{"lineNum":"  105","line":"      else"},
{"lineNum":"  106","line":"        raise \"invalid version byte provided (out of range: #{@version})\"","class":"linePartCov","hits":"1","order":"142","possible_hits":"2",},
{"lineNum":"  107","line":"      end"},
{"lineNum":"  108","line":"    end"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    # Generates a `Bitcoin::Account` from a provided `Keypair` allowing for a custom"},
{"lineNum":"  111","line":"    # network version byte and compression."},
{"lineNum":"  112","line":"    #"},
{"lineNum":"  113","line":"    # Parameters:"},
{"lineNum":"  114","line":"    # * `key_pair` (`Keypair`): the `Keypair` containing the secret key."},
{"lineNum":"  115","line":"    # * `version` (`String`): the version byte determining the used network encoding."},
{"lineNum":"  116","line":"    # * `compressed` (`Bool`): an indicator whether a compressed format should be used."},
{"lineNum":"  117","line":"    #"},
{"lineNum":"  118","line":"    # ```"},
{"lineNum":"  119","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  120","line":"    # btc = Secp256k1::Bitcoin::Account.new key, \"00\", true"},
{"lineNum":"  121","line":"    # # => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>"},
{"lineNum":"  122","line":"    # ```"},
{"lineNum":"  123","line":"    #"},
{"lineNum":"  124","line":"    # Raises if the version byte is out of range."},
{"lineNum":"  125","line":"    def initialize(@key_pair, @version, @compressed)","class":"lineCov","hits":"4","order":"75","possible_hits":"4",},
{"lineNum":"  126","line":"      v = @version.to_i 16","class":"lineCov","hits":"1","order":"76","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"      # Ensures a valid public key version byte (not WIF version byte)."},
{"lineNum":"  129","line":"      if !v.nil? && v >= 0 && v < 128","class":"lineCov","hits":"2","order":"77","possible_hits":"2",},
{"lineNum":"  130","line":"        @address = Bitcoin.address_from_private @key_pair.private_key, @version, @compressed","class":"lineCov","hits":"1","order":"78","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"        # Checks whether we want a compressed or uncompressed account."},
{"lineNum":"  133","line":"        if compressed","class":"lineCov","hits":"2","order":"117","possible_hits":"2",},
{"lineNum":"  134","line":"          @wif = Bitcoin.wif_from_private_compressed @key_pair.private_key, version_wif","class":"lineCov","hits":"1","order":"118","possible_hits":"1",},
{"lineNum":"  135","line":"        else"},
{"lineNum":"  136","line":"          @wif = Bitcoin.wif_from_private_uncompressed @key_pair.private_key, version_wif","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"        end"},
{"lineNum":"  138","line":"      else"},
{"lineNum":"  139","line":"        raise \"invalid version byte provided (out of range: #{@version})\"","class":"linePartCov","hits":"1","order":"133","possible_hits":"2",},
{"lineNum":"  140","line":"      end"},
{"lineNum":"  141","line":"    end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    # Tells if the `Bitcoin::Account` is compressed."},
{"lineNum":"  144","line":"    #"},
{"lineNum":"  145","line":"    # ```"},
{"lineNum":"  146","line":"    # btc.is_compressed?"},
{"lineNum":"  147","line":"    # # => false"},
{"lineNum":"  148","line":"    # ```"},
{"lineNum":"  149","line":"    #"},
{"lineNum":"  150","line":"    # Returns _true_ if the compressed format is used."},
{"lineNum":"  151","line":"    def is_compressed?"},
{"lineNum":"  152","line":"      @compressed"},
{"lineNum":"  153","line":"    end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    # Computes the version byte for the private Wallet-Import Format which is"},
{"lineNum":"  156","line":"    # offset by `+ 0x80` from the public address `version` byte."},
{"lineNum":"  157","line":"    #"},
{"lineNum":"  158","line":"    # ```"},
{"lineNum":"  159","line":"    # btc.version_wif"},
{"lineNum":"  160","line":"    # # => \"80\""},
{"lineNum":"  161","line":"    # ```"},
{"lineNum":"  162","line":"    def version_wif","class":"lineCov","hits":"2","order":"119","possible_hits":"2",},
{"lineNum":"  163","line":"      Util.to_padded_hex_01(@version.to_i(16) + 128)","class":"lineCov","hits":"1","order":"120","possible_hits":"1",},
{"lineNum":"  164","line":"    end"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    # Gets the private key as hexadecimal formatted string literal."},
{"lineNum":"  167","line":"    #"},
{"lineNum":"  168","line":"    # ```"},
{"lineNum":"  169","line":"    # btc.get_secret"},
{"lineNum":"  170","line":"    # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"  171","line":"    # ```"},
{"lineNum":"  172","line":"    def get_secret"},
{"lineNum":"  173","line":"      Util.to_padded_hex_32 @key_pair.private_key"},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    # Gets the account formatted as `Bitcoin` address."},
{"lineNum":"  177","line":"    #"},
{"lineNum":"  178","line":"    # ```"},
{"lineNum":"  179","line":"    # btc.to_s"},
{"lineNum":"  180","line":"    # # => \"1Gbxhju13BpwpzzFRgNr2TDYCRTg94kgFC\""},
{"lineNum":"  181","line":"    # ```"},
{"lineNum":"  182","line":"    def to_s"},
{"lineNum":"  183","line":"      @address"},
{"lineNum":"  184","line":"    end"},
{"lineNum":"  185","line":"  end"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  # Generates a new mini-private key (30 characters length, Base-56 encoded)."},
{"lineNum":"  188","line":"  #"},
{"lineNum":"  189","line":"  # ```"},
{"lineNum":"  190","line":"  # Secp256k1::Bitcoin.new_mini_private_key"},
{"lineNum":"  191","line":"  # # => S7qq5k98DAvee6mtQgpg4xAJatT9mR"},
{"lineNum":"  192","line":"  # ```"},
{"lineNum":"  193","line":"  def self.new_mini_private_key","class":"lineCov","hits":"1","order":"143","possible_hits":"1",},
{"lineNum":"  194","line":"    valid = false","class":"lineCov","hits":"1","order":"144","possible_hits":"1",},
{"lineNum":"  195","line":"    key = String.new","class":"lineCov","hits":"1","order":"145","possible_hits":"1",},
{"lineNum":"  196","line":"    until valid","class":"lineCov","hits":"1","order":"146","possible_hits":"1",},
{"lineNum":"  197","line":"      i = 1","class":"lineCov","hits":"1","order":"147","possible_hits":"1",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"      # Mini-private keys always start with a capital `S`."},
{"lineNum":"  200","line":"      key = \"S\"","class":"lineCov","hits":"1","order":"148","possible_hits":"1",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"      # Add 29 random characters from the Base-56 alphabet."},
{"lineNum":"  203","line":"      while i < 30","class":"lineCov","hits":"1","order":"149","possible_hits":"1",},
{"lineNum":"  204","line":"        i += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"        r = Random.rand 56","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":"  206","line":"        key += Hash.base56_char r","class":"lineCov","hits":"2","order":"151","possible_hits":"2",},
{"lineNum":"  207","line":"      end"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"      # Makes sure the key\'s checksum passes."},
{"lineNum":"  210","line":"      valid = mini_is_valid? key","class":"lineCov","hits":"1","order":"155","possible_hits":"1",},
{"lineNum":"  211","line":"      if valid","class":"lineCov","hits":"2","order":"163","possible_hits":"2",},
{"lineNum":"  212","line":"        # It\'s only valid if the private key is within the `Secp256k1` field size `n`."},
{"lineNum":"  213","line":"        priv = private_key_from_mini key","class":"lineCov","hits":"1","order":"165","possible_hits":"1",},
{"lineNum":"  214","line":"        valid = valid && priv > 0","class":"lineCov","hits":"2","order":"170","possible_hits":"2",},
{"lineNum":"  215","line":"        valid = valid && priv === priv % Secp256k1::EC_ORDER_N","class":"lineCov","hits":"3","order":"164","possible_hits":"3",},
{"lineNum":"  216","line":"      end"},
{"lineNum":"  217","line":"    end"},
{"lineNum":"  218","line":"    key"},
{"lineNum":"  219","line":"  end"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"  # Gets a private key from a mini-private key if the key is valid."},
{"lineNum":"  222","line":"  #"},
{"lineNum":"  223","line":"  # Parameters:"},
{"lineNum":"  224","line":"  # * `m` (`String`): the mini-private key."},
{"lineNum":"  225","line":"  #"},
{"lineNum":"  226","line":"  # ```"},
{"lineNum":"  227","line":"  # Secp256k1::Bitcoin.private_key_from_mini \"S7qq5k98DAvee6mtQgpg4xAJatT9mR\""},
{"lineNum":"  228","line":"  # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"  229","line":"  # ```"},
{"lineNum":"  230","line":"  #"},
{"lineNum":"  231","line":"  # Raises if the key is invalid."},
{"lineNum":"  232","line":"  def self.private_key_from_mini(m : String)","class":"lineCov","hits":"1","order":"166","possible_hits":"1",},
{"lineNum":"  233","line":"    if mini_is_valid? m","class":"lineCov","hits":"1","order":"167","possible_hits":"1",},
{"lineNum":"  234","line":"      # The private key is just the SHA-256 hash."},
{"lineNum":"  235","line":"      private_key = Hash.sha256 m","class":"lineCov","hits":"1","order":"168","possible_hits":"1",},
{"lineNum":"  236","line":"      BigInt.new private_key, 16","class":"lineCov","hits":"1","order":"169","possible_hits":"1",},
{"lineNum":"  237","line":"    else"},
{"lineNum":"  238","line":"      raise \"mini private key is not valid (invalid checksum for: #{m})\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"    end"},
{"lineNum":"  240","line":"  end"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"  # Validates wether a mini-private key has a correct checksum and formatting."},
{"lineNum":"  243","line":"  #"},
{"lineNum":"  244","line":"  # Parameters:"},
{"lineNum":"  245","line":"  # * `m` (`String`): the mini-private key."},
{"lineNum":"  246","line":"  #"},
{"lineNum":"  247","line":"  # ```"},
{"lineNum":"  248","line":"  # Secp256k1::Bitcoin.mini_is_valid? \"S7qq5k98DAvee6mtQgpg4xAJatT9mR\""},
{"lineNum":"  249","line":"  # # => true"},
{"lineNum":"  250","line":"  # ```"},
{"lineNum":"  251","line":"  #"},
{"lineNum":"  252","line":"  # Returns _true_ if the key contains a valid checksum and is formatted correctly."},
{"lineNum":"  253","line":"  def self.mini_is_valid?(m : String)","class":"lineCov","hits":"1","order":"156","possible_hits":"1",},
{"lineNum":"  254","line":"    # It\'s only valid if it\'s 30 characters long and starts with a capital `S`."},
{"lineNum":"  255","line":"    valid = m.size === 30","class":"lineCov","hits":"1","order":"157","possible_hits":"1",},
{"lineNum":"  256","line":"    valid = valid && m[0, 1] === \"S\"","class":"lineCov","hits":"1","order":"158","possible_hits":"1",},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    # It\'s only a valid mini-private key if the hash of `#{key}?` starts with `\"00\"`."},
{"lineNum":"  259","line":"    checksum = Hash.sha256 \"#{m}?\"","class":"lineCov","hits":"1","order":"159","possible_hits":"1",},
{"lineNum":"  260","line":"    valid && checksum[0, 2] === \"00\"","class":"lineCov","hits":"1","order":"162","possible_hits":"1",},
{"lineNum":"  261","line":"  end"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"  # Gets a Base-58 Wallet-Import Format (WIF) from a private key."},
{"lineNum":"  264","line":"  #"},
{"lineNum":"  265","line":"  # Parameters:"},
{"lineNum":"  266","line":"  # * `k` (`BigInt`): the private key."},
{"lineNum":"  267","line":"  # * `version` (`String`): the version byte, default: `\"80\"` (Bitcoin)."},
{"lineNum":"  268","line":"  # * `compr` (`String`): the compression byte, default: `\"\"` (uncompressed)."},
{"lineNum":"  269","line":"  #"},
{"lineNum":"  270","line":"  # ```"},
{"lineNum":"  271","line":"  # Secp256k1::Bitcoin.wif_from_private BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  272","line":"  # # => \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"  273","line":"  # ```"},
{"lineNum":"  274","line":"  #"},
{"lineNum":"  275","line":"  # Note, the compression byte `compr` is either empty `\"\"` for uncompressed keys or"},
{"lineNum":"  276","line":"  # `\"01\"` for compressed keys. See also `wif_from_private_compressed` and  `wif_from_private_uncompressed`."},
{"lineNum":"  277","line":"  def self.wif_from_private(k : BigInt, version = \"80\", compr = \"\")","class":"lineCov","hits":"2","order":"126","possible_hits":"2",},
{"lineNum":"  278","line":"    # Takes the private key."},
{"lineNum":"  279","line":"    priv = Secp256k1::Util.to_padded_hex_32 k","class":"lineCov","hits":"1","order":"127","possible_hits":"1",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    # Prepends the version byte and append the compression byte."},
{"lineNum":"  282","line":"    versioned = \"#{version}#{priv}#{compr}\"","class":"lineCov","hits":"1","order":"128","possible_hits":"1",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    # Performs a SHA-256 hash on the extended key."},
{"lineNum":"  285","line":"    hashed = Hash.sha256 Hash.hex_to_bin versioned","class":"lineCov","hits":"1","order":"129","possible_hits":"1",},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    # Performs a SHA-256 hash on the result of the SHA-256 hash."},
{"lineNum":"  288","line":"    hashed_twice = Hash.sha256 Hash.hex_to_bin hashed","class":"lineCov","hits":"1","order":"130","possible_hits":"1",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    # Takes the first four bytes of the second SHA-256 hash, this is the checksum."},
{"lineNum":"  291","line":"    # Adds the four checksum bytes at the end of the versioned key."},
{"lineNum":"  292","line":"    # This is the binary key."},
{"lineNum":"  293","line":"    binary = \"#{versioned}#{hashed_twice[0, 8]}\"","class":"lineCov","hits":"1","order":"131","possible_hits":"1",},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    # Converts the result from a byte string into a Base-58 string."},
{"lineNum":"  296","line":"    # This is the Wallet-Import Format (WIF)."},
{"lineNum":"  297","line":"    Hash.base58_encode binary","class":"lineCov","hits":"1","order":"132","possible_hits":"1",},
{"lineNum":"  298","line":"  end"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"  # Gets a compressed Base-58 Wallet-Import Format (WIF) from a private key."},
{"lineNum":"  301","line":"  #"},
{"lineNum":"  302","line":"  # Parameters:"},
{"lineNum":"  303","line":"  # * `k` (`BigInt`): the private key"},
{"lineNum":"  304","line":"  # * `version` (`String`): the version byte, default: `\"80\"` (Bitcoin)"},
{"lineNum":"  305","line":"  #"},
{"lineNum":"  306","line":"  # ```"},
{"lineNum":"  307","line":"  # Secp256k1::Bitcoin.wif_from_private_compressed BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  308","line":"  # # => \"Kz2grUzxEAxNopiREbNpVbjoitAGQVXnUZY4n8pNdmWdVqub99qu\""},
{"lineNum":"  309","line":"  # ```"},
{"lineNum":"  310","line":"  def self.wif_from_private_compressed(k : BigInt, version = \"80\")","class":"lineCov","hits":"2","order":"124","possible_hits":"2",},
{"lineNum":"  311","line":"    # To indicate a compressed key to be used, append a `\"01\"` byte."},
{"lineNum":"  312","line":"    wif_from_private k, version, \"01\"","class":"lineCov","hits":"1","order":"125","possible_hits":"1",},
{"lineNum":"  313","line":"  end"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"  # Gets an uncompressed Base-58 Wallet-Import Format (WIF) from a private key."},
{"lineNum":"  316","line":"  #"},
{"lineNum":"  317","line":"  # Parameters:"},
{"lineNum":"  318","line":"  # * `k` (`BigInt`): the private key"},
{"lineNum":"  319","line":"  # * `version` (`String`): the version byte, default: `\"80\"` (Bitcoin)"},
{"lineNum":"  320","line":"  #"},
{"lineNum":"  321","line":"  # ```"},
{"lineNum":"  322","line":"  # Secp256k1::Bitcoin.wif_from_private_uncompressed BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  323","line":"  # # => \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"  324","line":"  # ```"},
{"lineNum":"  325","line":"  def self.wif_from_private_uncompressed(k : BigInt, version = \"80\")","class":"lineCov","hits":"2","order":"140","possible_hits":"2",},
{"lineNum":"  326","line":"    # To indicate an uncompressed key to be used, don\'t append a compression byte."},
{"lineNum":"  327","line":"    wif_from_private k, version, \"\"","class":"lineCov","hits":"1","order":"141","possible_hits":"1",},
{"lineNum":"  328","line":"  end"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"  # Gets a private key from a Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  331","line":"  #"},
{"lineNum":"  332","line":"  # Parameters:"},
{"lineNum":"  333","line":"  # * `wif` (`String`): the Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  334","line":"  #"},
{"lineNum":"  335","line":"  # ```"},
{"lineNum":"  336","line":"  # Secp256k1::Bitcoin.private_key_from_wif \"Kz2grUzxEAxNopiREbNpVbjoitAGQVXnUZY4n8pNdmWdVqub99qu\""},
{"lineNum":"  337","line":"  # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"  338","line":"  # ```"},
{"lineNum":"  339","line":"  #"},
{"lineNum":"  340","line":"  # Raises if Wallet-Import Format (WIF) is invalid."},
{"lineNum":"  341","line":"  def self.private_key_from_wif(wif : String)","class":"lineCov","hits":"1","order":"177","possible_hits":"1",},
{"lineNum":"  342","line":"    # Decodes Base-58 which contains the checksummed private key."},
{"lineNum":"  343","line":"    checksum_key = Hash.base58_decode wif","class":"lineCov","hits":"1","order":"178","possible_hits":"1",},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    # The key must be 37 bytes (uncompressed) or 38 bytes (compressed)."},
{"lineNum":"  346","line":"    if checksum_key.size == 74 || checksum_key.size == 76","class":"lineCov","hits":"2","order":"192","possible_hits":"2",},
{"lineNum":"  347","line":"      # Drops the version byte, checksum, and compressed byte."},
{"lineNum":"  348","line":"      private_key = BigInt.new checksum_key[2, 64], 16","class":"lineCov","hits":"1","order":"193","possible_hits":"1",},
{"lineNum":"  349","line":"      Secp256k1::Util.to_padded_hex_32 private_key","class":"lineCov","hits":"1","order":"194","possible_hits":"1",},
{"lineNum":"  350","line":"    else"},
{"lineNum":"  351","line":"      raise \"invalid wallet import format (invalid wif size: #{checksum_key.size})\"","class":"lineCov","hits":"2","order":"195","possible_hits":"2",},
{"lineNum":"  352","line":"    end"},
{"lineNum":"  353","line":"  end"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"  # Gets the version byte from a Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  356","line":"  #"},
{"lineNum":"  357","line":"  # Parameters:"},
{"lineNum":"  358","line":"  # * `wif` (`String`): the Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  359","line":"  #"},
{"lineNum":"  360","line":"  # ```"},
{"lineNum":"  361","line":"  # Secp256k1::Bitcoin.version_byte_from_wif \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"  362","line":"  # # => \"80\""},
{"lineNum":"  363","line":"  # ```"},
{"lineNum":"  364","line":"  #"},
{"lineNum":"  365","line":"  # Raises if Wallet-Import Format (WIF) is invalid."},
{"lineNum":"  366","line":"  def self.version_byte_from_wif(wif : String)","class":"lineCov","hits":"1","order":"214","possible_hits":"1",},
{"lineNum":"  367","line":"    # Decodes Base-58 which contains the checksummed private key."},
{"lineNum":"  368","line":"    versioned = Hash.base58_decode wif","class":"lineCov","hits":"1","order":"215","possible_hits":"1",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    # The key must be 37 bytes (uncompressed) or 38 bytes (compressed)."},
{"lineNum":"  371","line":"    if versioned.size === 74 || versioned.size === 76","class":"lineCov","hits":"2","order":"216","possible_hits":"2",},
{"lineNum":"  372","line":"      # Extracts the version byte."},
{"lineNum":"  373","line":"      versioned[0, 2]","class":"lineCov","hits":"1","order":"217","possible_hits":"1",},
{"lineNum":"  374","line":"    else"},
{"lineNum":"  375","line":"      raise \"invalid wallet import format (invalid wif size: #{versioned.size})\"","class":"linePartCov","hits":"1","order":"218","possible_hits":"2",},
{"lineNum":"  376","line":"    end"},
{"lineNum":"  377","line":"  end"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"  # Checks if it\'s a compressed or an uncompressed Wallet-Import Format (WIF)."},
{"lineNum":"  380","line":"  #"},
{"lineNum":"  381","line":"  # Parameters:"},
{"lineNum":"  382","line":"  # * `wif` (`String`): the Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  383","line":"  #"},
{"lineNum":"  384","line":"  # ```"},
{"lineNum":"  385","line":"  # Secp256k1::Bitcoin.is_wif_compressed? \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"  386","line":"  # # => false"},
{"lineNum":"  387","line":"  # ```"},
{"lineNum":"  388","line":"  #"},
{"lineNum":"  389","line":"  # Returns _true_ if the key is compressed."},
{"lineNum":"  390","line":"  #"},
{"lineNum":"  391","line":"  # Raises if Wallet-Import Format (WIF) is invalid."},
{"lineNum":"  392","line":"  def self.is_wif_compressed?(wif : String)","class":"lineCov","hits":"1","order":"224","possible_hits":"1",},
{"lineNum":"  393","line":"    # Decodes Base-58 which contains the checksummed private key."},
{"lineNum":"  394","line":"    versioned = Hash.base58_decode wif","class":"lineCov","hits":"1","order":"225","possible_hits":"1",},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    # The key must be 37 bytes (uncompressed) or 38 bytes (compressed)."},
{"lineNum":"  397","line":"    if versioned.size === 74 || versioned.size === 76","class":"lineCov","hits":"2","order":"226","possible_hits":"2",},
{"lineNum":"  398","line":"      # Returns _true_ if the key is compressed."},
{"lineNum":"  399","line":"      versioned.size === 76","class":"lineCov","hits":"1","order":"227","possible_hits":"1",},
{"lineNum":"  400","line":"    else"},
{"lineNum":"  401","line":"      raise \"invalid wallet import format (invalid wif size: #{versioned.size})\"","class":"linePartCov","hits":"1","order":"228","possible_hits":"2",},
{"lineNum":"  402","line":"    end"},
{"lineNum":"  403","line":"  end"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"  # Validates wether a Wallet-Import Format (WIF) has a correct checksum and formatting."},
{"lineNum":"  406","line":"  #"},
{"lineNum":"  407","line":"  # Parameters:"},
{"lineNum":"  408","line":"  # * `wif` (`String`): the Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  409","line":"  #"},
{"lineNum":"  410","line":"  # ```"},
{"lineNum":"  411","line":"  # Secp256k1::Bitcoin.wif_is_valid? \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"  412","line":"  # # => true"},
{"lineNum":"  413","line":"  # ```"},
{"lineNum":"  414","line":"  #"},
{"lineNum":"  415","line":"  # Returns _true_ if the key contains a valid checksum and is formatted correctly."},
{"lineNum":"  416","line":"  def self.wif_is_valid?(wif : String)","class":"lineCov","hits":"1","order":"196","possible_hits":"1",},
{"lineNum":"  417","line":"    # Decodes Base-58 which contains the checksummed private key."},
{"lineNum":"  418","line":"    checksum_key = Hash.base58_decode wif","class":"lineCov","hits":"1","order":"197","possible_hits":"1",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    # The key must be 37 bytes (uncompressed) or 38 bytes (compressed)."},
{"lineNum":"  421","line":"    valid = checksum_key.size === 74 || checksum_key.size === 76","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    # Only proceeds if the key is valid."},
{"lineNum":"  424","line":"    if valid","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"  425","line":"      # Ensures the private key is valid."},
{"lineNum":"  426","line":"      private_key = private_key_from_wif wif","class":"lineCov","hits":"1","order":"200","possible_hits":"1",},
{"lineNum":"  427","line":"      valid = valid && private_key != \"-999\" && private_key.size === 64","class":"lineCov","hits":"2","order":"201","possible_hits":"2",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"      # Drops the checksum bytes."},
{"lineNum":"  430","line":"      versioned = checksum_key[0, 66]","class":"lineCov","hits":"1","order":"202","possible_hits":"1",},
{"lineNum":"  431","line":"      wif_checksum = checksum_key[66, 8]","class":"lineCov","hits":"1","order":"203","possible_hits":"1",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"      # Makes sure to honor the compression byte."},
{"lineNum":"  434","line":"      if checksum_key.size === 76","class":"lineCov","hits":"1","order":"204","possible_hits":"1",},
{"lineNum":"  435","line":"        versioned = checksum_key[0, 68]","class":"lineCov","hits":"1","order":"209","possible_hits":"1",},
{"lineNum":"  436","line":"        wif_checksum = checksum_key[68, 8]","class":"lineCov","hits":"1","order":"210","possible_hits":"1",},
{"lineNum":"  437","line":"      end"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"      # Performs a SHA-256 hash on the versioned key."},
{"lineNum":"  440","line":"      hashed = Hash.sha256 Hash.hex_to_bin versioned","class":"lineCov","hits":"1","order":"205","possible_hits":"1",},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"      # Performs a SHA-256 hash on the result of the previous SHA-256 hash."},
{"lineNum":"  443","line":"      hashed_twice = Hash.sha256 Hash.hex_to_bin hashed","class":"lineCov","hits":"1","order":"206","possible_hits":"1",},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"      # Checks the WIF checksum against the private key checksum."},
{"lineNum":"  446","line":"      pk_checksum = hashed_twice[0, 8]","class":"lineCov","hits":"1","order":"207","possible_hits":"1",},
{"lineNum":"  447","line":"      valid = valid && wif_checksum === pk_checksum","class":"lineCov","hits":"2","order":"208","possible_hits":"2",},
{"lineNum":"  448","line":"    end"},
{"lineNum":"  449","line":"    valid"},
{"lineNum":"  450","line":"  end"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"  # Generates a `Bitcoin` address for any public key, compressed or uncompressed."},
{"lineNum":"  453","line":"  #"},
{"lineNum":"  454","line":"  # Parameters:"},
{"lineNum":"  455","line":"  # * `pub` (`String`): the public key, compressed or uncompressed."},
{"lineNum":"  456","line":"  # * `version` (`String`): the version byte, default: `\"00\"` (Bitcoin)."},
{"lineNum":"  457","line":"  #"},
{"lineNum":"  458","line":"  # ```"},
{"lineNum":"  459","line":"  # Secp256k1::Bitcoin.address_from_public_key \"03e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b\""},
{"lineNum":"  460","line":"  # # => \"1Q1zbmPZtS2chwxpviqz6qHgoM8UUuviGN\""},
{"lineNum":"  461","line":"  # ```"},
{"lineNum":"  462","line":"  #"},
{"lineNum":"  463","line":"  # Note, compressed public keys generate compressed addresses, whereas"},
{"lineNum":"  464","line":"  # uncompressed keys generate uncompressed addresses."},
{"lineNum":"  465","line":"  #"},
{"lineNum":"  466","line":"  # Raises if the public key is malformed."},
{"lineNum":"  467","line":"  def self.address_from_public_key(pub : String, version = \"00\")","class":"lineCov","hits":"1","order":"86","possible_hits":"1",},
{"lineNum":"  468","line":"    # Ensures uncompressed or compressed public keys with prefix."},
{"lineNum":"  469","line":"    if pub.size === 130 || pub.size === 66","class":"lineCov","hits":"2","order":"87","possible_hits":"2",},
{"lineNum":"  470","line":"      # Performs a SHA-256 hash on the public key."},
{"lineNum":"  471","line":"      sha2 = Hash.sha256 Hash.hex_to_bin pub","class":"lineCov","hits":"1","order":"88","possible_hits":"1",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"      # Performs a RIPEMD-160 hash on the result of the SHA-256 hash."},
{"lineNum":"  474","line":"      ripe = Hash.ripemd160 Hash.hex_to_bin sha2","class":"lineCov","hits":"1","order":"93","possible_hits":"1",},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"      # Adds a version byte in front of the RIPEMD-160 hash."},
{"lineNum":"  477","line":"      ripe_versioned = \"#{version}#{ripe}\"","class":"lineCov","hits":"1","order":"96","possible_hits":"1",},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"      # Performs a SHA-256 hash on the extended RIPEMD-160 result."},
{"lineNum":"  480","line":"      hashed = Hash.sha256 Hash.hex_to_bin ripe_versioned","class":"lineCov","hits":"1","order":"97","possible_hits":"1",},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"      # Performs a SHA-256 hash on the result of the previous SHA-256 hash."},
{"lineNum":"  483","line":"      hashed_twice = Hash.sha256 Hash.hex_to_bin hashed","class":"lineCov","hits":"1","order":"98","possible_hits":"1",},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"      # Takes the first four bytes of the second SHA-256 hash; this is the address checksum."},
{"lineNum":"  486","line":"      # Adds the four checksum bytes at the end of the extended RIPEMD-160 hash."},
{"lineNum":"  487","line":"      # This is the 25-byte binary Bitcoin address."},
{"lineNum":"  488","line":"      binary = \"#{ripe_versioned}#{hashed_twice[0, 8]}\"","class":"lineCov","hits":"1","order":"99","possible_hits":"1",},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"      # Converts the result from a hex string into a Base-58 encoded string."},
{"lineNum":"  491","line":"      # This is the most commonly used Bitcoin address format."},
{"lineNum":"  492","line":"      Hash.base58_encode binary","class":"lineCov","hits":"1","order":"100","possible_hits":"1",},
{"lineNum":"  493","line":"    else"},
{"lineNum":"  494","line":"      raise \"malformed public key (invalid key size: #{pub.size})\"","class":"linePartCov","hits":"1","order":"116","possible_hits":"2",},
{"lineNum":"  495","line":"    end"},
{"lineNum":"  496","line":"  end"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"  # Generates a `Bitcoin` address from an public key as `ECPoint`."},
{"lineNum":"  499","line":"  #"},
{"lineNum":"  500","line":"  # Parameters:"},
{"lineNum":"  501","line":"  # * `p` (`ECPoint`): the public key as point with `x` and `y` coordinates."},
{"lineNum":"  502","line":"  # * `version` (`String`): the version byte, default: `\"00\"` (Bitcoin)."},
{"lineNum":"  503","line":"  # * `compressed` (`Bool`): indicator if address should be compressed or not, default: `true` (compressed)."},
{"lineNum":"  504","line":"  #"},
{"lineNum":"  505","line":"  # See `address_from_public_key` and `ECPoint` for usage instructions."},
{"lineNum":"  506","line":"  def self.address_from_public_point(p : Secp256k1::ECPoint, version = \"00\", compressed = true)","class":"lineCov","hits":"2","order":"82","possible_hits":"2",},
{"lineNum":"  507","line":"    # Takes the corresponding uncompressed public key."},
{"lineNum":"  508","line":"    pub = Secp256k1::Util.public_key_uncompressed_prefix p","class":"lineCov","hits":"1","order":"83","possible_hits":"1",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    # Generates a compressed address if specified."},
{"lineNum":"  511","line":"    pub = Secp256k1::Util.public_key_compressed_prefix p if compressed","class":"lineCov","hits":"1","order":"84","possible_hits":"1",},
{"lineNum":"  512","line":"    address_from_public_key pub, version","class":"lineCov","hits":"1","order":"85","possible_hits":"1",},
{"lineNum":"  513","line":"  end"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"  # Gets a `Bitcoin` address from a Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  516","line":"  #"},
{"lineNum":"  517","line":"  # Parameters:"},
{"lineNum":"  518","line":"  # * `wif` (`String`): the Base-58 Wallet-Import Format (WIF)."},
{"lineNum":"  519","line":"  #"},
{"lineNum":"  520","line":"  # ```"},
{"lineNum":"  521","line":"  # Secp256k1::Bitcoin.address_from_wif \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\""},
{"lineNum":"  522","line":"  # # => \"1Gbxhju13BpwpzzFRgNr2TDYCRTg94kgFC\""},
{"lineNum":"  523","line":"  # ```"},
{"lineNum":"  524","line":"  #"},
{"lineNum":"  525","line":"  # Raises if Wallet-Import Format (WIF) is invalid."},
{"lineNum":"  526","line":"  def self.address_from_wif(wif : String)","class":"lineCov","hits":"1","order":"211","possible_hits":"1",},
{"lineNum":"  527","line":"    # Only proceeds with valid WIF provided."},
{"lineNum":"  528","line":"    if wif_is_valid? wif","class":"lineCov","hits":"1","order":"212","possible_hits":"1",},
{"lineNum":"  529","line":"      # Gets the version byte from the WIF."},
{"lineNum":"  530","line":"      vers = version_byte_from_wif wif","class":"lineCov","hits":"1","order":"213","possible_hits":"1",},
{"lineNum":"  531","line":"      vers = vers.to_i 16","class":"lineCov","hits":"1","order":"219","possible_hits":"1",},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"      # The version byte of the public address is offset by `-128` (`-0x80`)."},
{"lineNum":"  534","line":"      vers -= 128","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"      # Makes sure the version byte is properly padded."},
{"lineNum":"  537","line":"      vers = Secp256k1::Util.to_padded_hex_01 vers","class":"lineCov","hits":"1","order":"220","possible_hits":"1",},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"      # Gets the private key from the WIF."},
{"lineNum":"  540","line":"      priv = private_key_from_wif wif","class":"lineCov","hits":"1","order":"221","possible_hits":"1",},
{"lineNum":"  541","line":"      priv = BigInt.new priv, 16","class":"lineCov","hits":"1","order":"222","possible_hits":"1",},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"      # Checks wether we want a compressed or an uncompressed address."},
{"lineNum":"  544","line":"      comp = is_wif_compressed? wif","class":"lineCov","hits":"1","order":"223","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"      address_from_private priv, vers, comp","class":"lineCov","hits":"1","order":"229","possible_hits":"1",},
{"lineNum":"  547","line":"    else"},
{"lineNum":"  548","line":"      raise \"invalid wallet import format (invalid wif: #{wif})\"","class":"linePartCov","hits":"1","order":"230","possible_hits":"2",},
{"lineNum":"  549","line":"    end"},
{"lineNum":"  550","line":"  end"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"  # Generates a `Bitcoin` address from a private key."},
{"lineNum":"  553","line":"  #"},
{"lineNum":"  554","line":"  # Parameters:"},
{"lineNum":"  555","line":"  # * `priv` (`BigInt`): the private key as number."},
{"lineNum":"  556","line":"  # * `version` (`String`): the version byte, default: `\"00\"` (Bitcoin)."},
{"lineNum":"  557","line":"  # * `compressed` (`Bool`): indicator if address should be compressed or not, default: `true` (compressed)."},
{"lineNum":"  558","line":"  #"},
{"lineNum":"  559","line":"  # ```"},
{"lineNum":"  560","line":"  # Secp256k1::Bitcoin.address_from_private BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  561","line":"  # # => \"1Q1zbmPZtS2chwxpviqz6qHgoM8UUuviGN\""},
{"lineNum":"  562","line":"  # ```"},
{"lineNum":"  563","line":"  def self.address_from_private(priv : BigInt, version = \"00\", compressed = true)","class":"lineCov","hits":"2","order":"79","possible_hits":"2",},
{"lineNum":"  564","line":"    # Having a private ECDSA key; take the corresponding public key generated with it."},
{"lineNum":"  565","line":"    p = Secp256k1::Util.public_key_from_private priv","class":"lineCov","hits":"1","order":"80","possible_hits":"1",},
{"lineNum":"  566","line":"    address_from_public_point p, version, compressed","class":"lineCov","hits":"1","order":"81","possible_hits":"1",},
{"lineNum":"  567","line":"  end"},
{"lineNum":"  568","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2021-09-29 14:18:30", "instrumented" : 117, "covered" : 113,};
var merged_data = [];
