var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2020 @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"require \"openssl\""},
{"lineNum":"   16","line":"require \"sha3\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"# The `Secp256k1::Hash` module wraps various hashing functions for convenience"},
{"lineNum":"   19","line":"# and exposes them for general use."},
{"lineNum":"   20","line":"module Secp256k1::Hash"},
{"lineNum":"   21","line":"  # The Base-58 alphabet for `Bitcoin` addresses is a Base-64 alphabet without"},
{"lineNum":"   22","line":"  # `0`, `O`, `I`, and `l` to omit similar-looking letters."},
{"lineNum":"   23","line":"  BASE_58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\""},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  # The Base-56 alphabet for `Bitcoin` mini-private keys is a Base-58 alphabet"},
{"lineNum":"   26","line":"  # without `1` and `o` to additionally omit more similar-looking letters."},
{"lineNum":"   27","line":"  BASE_56 = \"23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz\""},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"  # Operating a SHA3-256 hash on a byte array."},
{"lineNum":"   30","line":"  #"},
{"lineNum":"   31","line":"  # Parameters:"},
{"lineNum":"   32","line":"  # * `b` (`Bytes`): the byte array to be hashed."},
{"lineNum":"   33","line":"  #"},
{"lineNum":"   34","line":"  # ```"},
{"lineNum":"   35","line":"  # Secp256k1::Hash.sha3 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]"},
{"lineNum":"   36","line":"  # # => \"66bb65180108362a3e25ba8282f7b96bfe840ce34a2e5dbc421aa8a590cc5f2e\""},
{"lineNum":"   37","line":"  # ```"},
{"lineNum":"   38","line":"  def self.sha3(b : Bytes)","class":"lineCov","hits":"2","order":"275","possible_hits":"2",},
{"lineNum":"   39","line":"    sha3 = Digest::SHA3.new(256)","class":"lineCov","hits":"1","order":"276","possible_hits":"1",},
{"lineNum":"   40","line":"    sha3.update(b).hexdigest","class":"lineCov","hits":"1","order":"277","possible_hits":"1",},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  # Operating a SHA3-256 hash on an actual string literal."},
{"lineNum":"   44","line":"  #"},
{"lineNum":"   45","line":"  # Parameters:"},
{"lineNum":"   46","line":"  # * `h` (`String`): the string literal to be hashed."},
{"lineNum":"   47","line":"  #"},
{"lineNum":"   48","line":"  # ```"},
{"lineNum":"   49","line":"  # Secp256k1::Hash.sha3 \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\""},
{"lineNum":"   50","line":"  # # => \"aedc012933679615eb93fb0063f53010e6f0034e92aaccf97dacc46e338037e9\""},
{"lineNum":"   51","line":"  # ```"},
{"lineNum":"   52","line":"  def self.sha3(h : String)","class":"lineCov","hits":"1","order":"272","possible_hits":"1",},
{"lineNum":"   53","line":"    sha3 = Digest::SHA3.new(256)","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":"   54","line":"    sha3.update(h).hexdigest","class":"lineCov","hits":"1","order":"274","possible_hits":"1",},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  # Operating a Keccak-256 hash on a byte array."},
{"lineNum":"   58","line":"  #"},
{"lineNum":"   59","line":"  # Parameters:"},
{"lineNum":"   60","line":"  # * `b` (`Bytes`): the byte array to be hashed."},
{"lineNum":"   61","line":"  #"},
{"lineNum":"   62","line":"  # ```"},
{"lineNum":"   63","line":"  # Secp256k1::Hash.keccak256 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]"},
{"lineNum":"   64","line":"  # # => \"fcb41efa0456ba9f27e573422d6b5898c61da6f2137d07e4dae618eddd72e003\""},
{"lineNum":"   65","line":"  # ```"},
{"lineNum":"   66","line":"  def self.keccak256(b : Bytes)","class":"lineCov","hits":"2","order":"244","possible_hits":"2",},
{"lineNum":"   67","line":"    keccak = Digest::Keccak3.new(256)","class":"lineCov","hits":"1","order":"245","possible_hits":"1",},
{"lineNum":"   68","line":"    keccak.update(b).hexdigest","class":"lineCov","hits":"1","order":"246","possible_hits":"1",},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  # Operating a Keccak-256 hash on an actual string literal."},
{"lineNum":"   72","line":"  #"},
{"lineNum":"   73","line":"  # Parameters:"},
{"lineNum":"   74","line":"  # * `h` (`String`): the string literal to be hashed."},
{"lineNum":"   75","line":"  #"},
{"lineNum":"   76","line":"  # ```"},
{"lineNum":"   77","line":"  # Secp256k1::Hash.keccak256 \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\""},
{"lineNum":"   78","line":"  # # => \"99cfa79866ec88f87f8e25a98a4b9873f3f8ee82482a317a5494572b00f51cec\""},
{"lineNum":"   79","line":"  # ```"},
{"lineNum":"   80","line":"  def self.keccak256(h : String)","class":"lineCov","hits":"1","order":"253","possible_hits":"1",},
{"lineNum":"   81","line":"    keccak = Digest::Keccak3.new(256)","class":"lineCov","hits":"1","order":"254","possible_hits":"1",},
{"lineNum":"   82","line":"    keccak.update(h).hexdigest","class":"lineCov","hits":"1","order":"255","possible_hits":"1",},
{"lineNum":"   83","line":"  end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  # Operating a SHA2-256 hash on a byte array."},
{"lineNum":"   86","line":"  #"},
{"lineNum":"   87","line":"  # Parameters:"},
{"lineNum":"   88","line":"  # * `b` (`Bytes`): the byte array to be hashed."},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # ```"},
{"lineNum":"   91","line":"  # Secp256k1::Hash.sha256 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]"},
{"lineNum":"   92","line":"  # # => \"2739cc5f45c0e05236527e4e687dc54f0d5e88be64b9a90e5264a6721c0c71f2\""},
{"lineNum":"   93","line":"  # ```"},
{"lineNum":"   94","line":"  def self.sha256(b : Bytes)","class":"lineCov","hits":"2","order":"91","possible_hits":"2",},
{"lineNum":"   95","line":"    OpenSSL::Digest.new(\"SHA256\").update(b).final.hexstring","class":"lineCov","hits":"1","order":"92","possible_hits":"1",},
{"lineNum":"   96","line":"  end"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  # Operating a SHA2-256 hash on an actual string literal."},
{"lineNum":"   99","line":"  #"},
{"lineNum":"  100","line":"  # Parameters:"},
{"lineNum":"  101","line":"  # * `h` (`String`): the string literal to be hashed."},
{"lineNum":"  102","line":"  #"},
{"lineNum":"  103","line":"  # ```"},
{"lineNum":"  104","line":"  # Secp256k1::Hash.sha256 \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\""},
{"lineNum":"  105","line":"  # # => \"452a41c28c9981faebb402095a5d553de28dc212338057aed27081110dfb907a\""},
{"lineNum":"  106","line":"  # ```"},
{"lineNum":"  107","line":"  def self.sha256(h : String)","class":"lineCov","hits":"1","order":"160","possible_hits":"1",},
{"lineNum":"  108","line":"    OpenSSL::Digest.new(\"SHA256\").update(h).final.hexstring","class":"lineCov","hits":"1","order":"161","possible_hits":"1",},
{"lineNum":"  109","line":"  end"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  # Operating a RIPEMD-160 hash on a byte array."},
{"lineNum":"  112","line":"  #"},
{"lineNum":"  113","line":"  # Parameters:"},
{"lineNum":"  114","line":"  # * `b` (`Bytes`): the byte array to be hashed."},
{"lineNum":"  115","line":"  #"},
{"lineNum":"  116","line":"  # ```"},
{"lineNum":"  117","line":"  # Secp256k1::Hash.ripemd160 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]"},
{"lineNum":"  118","line":"  # # => \"5f3455f9ac58e25be08c99a7090108751b4796b9\""},
{"lineNum":"  119","line":"  # ```"},
{"lineNum":"  120","line":"  def self.ripemd160(b : Bytes)","class":"lineCov","hits":"2","order":"94","possible_hits":"2",},
{"lineNum":"  121","line":"    OpenSSL::Digest.new(\"RIPEMD160\").update(b).final.hexstring","class":"lineCov","hits":"1","order":"95","possible_hits":"1",},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  # Operating a RIPEMD-160 hash on an actual string literal."},
{"lineNum":"  125","line":"  #"},
{"lineNum":"  126","line":"  # Parameters:"},
{"lineNum":"  127","line":"  # * `h` (`String`): the string literal to be hashed."},
{"lineNum":"  128","line":"  #"},
{"lineNum":"  129","line":"  # ```"},
{"lineNum":"  130","line":"  # Secp256k1::Hash.ripemd160 \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\""},
{"lineNum":"  131","line":"  # # => \"46dff6cd5666c8e67db26ac0dfaf685bf71fc5f6\""},
{"lineNum":"  132","line":"  # ```"},
{"lineNum":"  133","line":"  def self.ripemd160(h : String)","class":"lineCov","hits":"1","order":"278","possible_hits":"1",},
{"lineNum":"  134","line":"    OpenSSL::Digest.new(\"RIPEMD160\").update(h).final.hexstring","class":"lineCov","hits":"1","order":"279","possible_hits":"1",},
{"lineNum":"  135","line":"  end"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  # Decodes a hexadecimal string from a Base-58 encoded string."},
{"lineNum":"  138","line":"  #"},
{"lineNum":"  139","line":"  # Parameters:"},
{"lineNum":"  140","line":"  # * `s` (`String`): The Base-58 encoded string to be decoded."},
{"lineNum":"  141","line":"  #"},
{"lineNum":"  142","line":"  # ```"},
{"lineNum":"  143","line":"  # Secp256k1::Hash.base58_decode \"1CSSfnxKnQK1GDWSaWqNpYXSdfPTtSooHt\""},
{"lineNum":"  144","line":"  # # => \"007d7935bde6c9341de87a4d64588783033e23472d7322c46b\""},
{"lineNum":"  145","line":"  # ```"},
{"lineNum":"  146","line":"  def self.base58_decode(s : String)","class":"lineCov","hits":"1","order":"179","possible_hits":"1",},
{"lineNum":"  147","line":"    # Cycle through each character of string."},
{"lineNum":"  148","line":"    index = 0","class":"lineCov","hits":"1","order":"180","possible_hits":"1",},
{"lineNum":"  149","line":"    decimal = BigInt.new 0","class":"lineCov","hits":"1","order":"181","possible_hits":"1",},
{"lineNum":"  150","line":"    while index < s.size","class":"lineCov","hits":"1","order":"182","possible_hits":"1",},
{"lineNum":"  151","line":"      b58_char = s[index]","class":"lineCov","hits":"1","order":"183","possible_hits":"1",},
{"lineNum":"  152","line":"      position = BASE_58.index(b58_char)","class":"lineCov","hits":"1","order":"184","possible_hits":"1",},
{"lineNum":"  153","line":"      if !position.nil?","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":"  154","line":"        decimal = decimal * 58 + position","class":"lineCov","hits":"1","order":"186","possible_hits":"1",},
{"lineNum":"  155","line":"        index += 1","class":"linePartCov","hits":"1","order":"280","possible_hits":"2",},
{"lineNum":"  156","line":"      else"},
{"lineNum":"  157","line":"        raise \"cannot decode, invalid base58 character: \'#{s[index]}\'\"","class":"lineCov","hits":"2","order":"187","possible_hits":"2",},
{"lineNum":"  158","line":"      end"},
{"lineNum":"  159","line":"    end"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    # Count leading `1`s and pad with `\"00\"` bytes."},
{"lineNum":"  162","line":"    hex = decimal.to_s 16","class":"lineCov","hits":"1","order":"188","possible_hits":"1",},
{"lineNum":"  163","line":"    leading = 0","class":"lineCov","hits":"1","order":"189","possible_hits":"1",},
{"lineNum":"  164","line":"    while s[leading] === \'1\'","class":"lineCov","hits":"1","order":"190","possible_hits":"1",},
{"lineNum":"  165","line":"      leading += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"      hex = \"00#{hex}\"","class":"lineCov","hits":"2","order":"191","possible_hits":"2",},
{"lineNum":"  167","line":"    end"},
{"lineNum":"  168","line":"    hex"},
{"lineNum":"  169","line":"  end"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  # Encodes a Base-58 string from a hexadecimal string."},
{"lineNum":"  172","line":"  #"},
{"lineNum":"  173","line":"  # Parameters:"},
{"lineNum":"  174","line":"  # * `h` (`String`): The hexadecimal string to be encoded."},
{"lineNum":"  175","line":"  #"},
{"lineNum":"  176","line":"  # ```"},
{"lineNum":"  177","line":"  # Secp256k1::Hash.base58_encode \"007d7935bde6c9341de87a4d64588783033e23472d7322c46b\""},
{"lineNum":"  178","line":"  # # => \"1CSSfnxKnQK1GDWSaWqNpYXSdfPTtSooHt\""},
{"lineNum":"  179","line":"  # ```"},
{"lineNum":"  180","line":"  def self.base58_encode(h : String)","class":"lineCov","hits":"1","order":"101","possible_hits":"1",},
{"lineNum":"  181","line":"    # Do a Base-58 mapping for the hash."},
{"lineNum":"  182","line":"    pub = BigInt.new h, 16","class":"lineCov","hits":"1","order":"102","possible_hits":"1",},
{"lineNum":"  183","line":"    adr = String.new","class":"lineCov","hits":"1","order":"103","possible_hits":"1",},
{"lineNum":"  184","line":"    while pub > 0","class":"lineCov","hits":"1","order":"104","possible_hits":"1",},
{"lineNum":"  185","line":"      pub, rem = pub.divmod 58","class":"lineCov","hits":"1","order":"105","possible_hits":"1",},
{"lineNum":"  186","line":"      adr += base58_char rem.to_i","class":"lineCov","hits":"1","order":"106","possible_hits":"1",},
{"lineNum":"  187","line":"    end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    # Replace leading zero bytes with `1`."},
{"lineNum":"  190","line":"    i, s = 0, 2","class":"lineCov","hits":"1","order":"110","possible_hits":"1",},
{"lineNum":"  191","line":"    current_byte = h[i, s]","class":"lineCov","hits":"1","order":"111","possible_hits":"1",},
{"lineNum":"  192","line":"    while current_byte.to_i(16) === 0","class":"lineCov","hits":"1","order":"112","possible_hits":"1",},
{"lineNum":"  193","line":"      adr = \"#{adr}1\"","class":"lineCov","hits":"1","order":"113","possible_hits":"1",},
{"lineNum":"  194","line":"      i += s","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"      current_byte = h[i, s]","class":"lineCov","hits":"2","order":"114","possible_hits":"2",},
{"lineNum":"  196","line":"    end"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    # Reverse because we did the entire conversion backwards."},
{"lineNum":"  199","line":"    adr.reverse","class":"lineCov","hits":"1","order":"115","possible_hits":"1",},
{"lineNum":"  200","line":"  end"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"  # Gets a character from the Base-56 alphabet at position `i`."},
{"lineNum":"  203","line":"  #"},
{"lineNum":"  204","line":"  # Parameters:"},
{"lineNum":"  205","line":"  # * `i` (`Int32`): the position in the Base-56 alphabet."},
{"lineNum":"  206","line":"  #"},
{"lineNum":"  207","line":"  # ```"},
{"lineNum":"  208","line":"  # Secp256k1::Hash.base56_char 13"},
{"lineNum":"  209","line":"  # # => \'F\'"},
{"lineNum":"  210","line":"  # ```"},
{"lineNum":"  211","line":"  def self.base56_char(i : Int32)","class":"lineCov","hits":"2","order":"152","possible_hits":"2",},
{"lineNum":"  212","line":"    i = i % 56","class":"lineCov","hits":"1","order":"153","possible_hits":"1",},
{"lineNum":"  213","line":"    BASE_56[i]","class":"lineCov","hits":"1","order":"154","possible_hits":"1",},
{"lineNum":"  214","line":"  end"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  # Gets a character from the Base-58 alphabet at position `i`."},
{"lineNum":"  217","line":"  #"},
{"lineNum":"  218","line":"  # Parameters:"},
{"lineNum":"  219","line":"  # * `i` (`Int32`): the position in the Base-58 alphabet."},
{"lineNum":"  220","line":"  #"},
{"lineNum":"  221","line":"  # ```"},
{"lineNum":"  222","line":"  # Secp256k1::Hash.base58_char 13"},
{"lineNum":"  223","line":"  # # => \'E\'"},
{"lineNum":"  224","line":"  # ```"},
{"lineNum":"  225","line":"  def self.base58_char(i : Int32)","class":"lineCov","hits":"2","order":"107","possible_hits":"2",},
{"lineNum":"  226","line":"    i = i % 58","class":"lineCov","hits":"1","order":"108","possible_hits":"1",},
{"lineNum":"  227","line":"    BASE_58[i]","class":"lineCov","hits":"1","order":"109","possible_hits":"1",},
{"lineNum":"  228","line":"  end"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  # Helper function to convert byte arrays to hexadecimal strings."},
{"lineNum":"  231","line":"  #"},
{"lineNum":"  232","line":"  # Parameters:"},
{"lineNum":"  233","line":"  # * `b` (`Bytes`): the byte array to be converted."},
{"lineNum":"  234","line":"  #"},
{"lineNum":"  235","line":"  # ```"},
{"lineNum":"  236","line":"  # Secp256k1::Hash.bin_to_hex Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]"},
{"lineNum":"  237","line":"  # => \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\""},
{"lineNum":"  238","line":"  # ```"},
{"lineNum":"  239","line":"  def self.bin_to_hex(b : Bytes)"},
{"lineNum":"  240","line":"    b.hexstring"},
{"lineNum":"  241","line":"  end"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  # Helper function to convert hexadecimal strings to byte arrays."},
{"lineNum":"  244","line":"  #"},
{"lineNum":"  245","line":"  # Parameters:"},
{"lineNum":"  246","line":"  # * `h` (`String`): the hexadecimal string to be converted."},
{"lineNum":"  247","line":"  #"},
{"lineNum":"  248","line":"  # ```"},
{"lineNum":"  249","line":"  # Secp256k1::Hash.hex_to_bin \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\""},
{"lineNum":"  250","line":"  # => Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]"},
{"lineNum":"  251","line":"  # ```"},
{"lineNum":"  252","line":"  def self.hex_to_bin(h : String)","class":"lineCov","hits":"1","order":"89","possible_hits":"1",},
{"lineNum":"  253","line":"    h.hexbytes","class":"lineCov","hits":"1","order":"90","possible_hits":"1",},
{"lineNum":"  254","line":"  end"},
{"lineNum":"  255","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2021-09-29 14:18:30", "instrumented" : 56, "covered" : 54,};
var merged_data = [];
