var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2019-2020 @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"require \"http\""},
{"lineNum":"   16","line":"require \"socket\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"# Implements the `Ethereum` address space for the `Secp256k1` library."},
{"lineNum":"   19","line":"module Secp256k1::Ethereum"},
{"lineNum":"   20","line":"  # Implements an `Ethereum` account containing a `Keypair` and an address."},
{"lineNum":"   21","line":"  #"},
{"lineNum":"   22","line":"  # Properties:"},
{"lineNum":"   23","line":"  # * `key_pair` (`Keypair`): the `Keypair` containing the secret key."},
{"lineNum":"   24","line":"  # * `address` (`String`): the public checksummed `Ethereum` address."},
{"lineNum":"   25","line":"  #"},
{"lineNum":"   26","line":"  # ```"},
{"lineNum":"   27","line":"  # eth = Secp256k1::Ethereum::Account.new"},
{"lineNum":"   28","line":"  # eth.get_secret"},
{"lineNum":"   29","line":"  # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"   30","line":"  # eth.address"},
{"lineNum":"   31","line":"  # # => \"0x224008a0F3d3cB989c807F568c7f99Bf451328A6\""},
{"lineNum":"   32","line":"  # ```"},
{"lineNum":"   33","line":"  class Account"},
{"lineNum":"   34","line":"    # The `Keypair` containing the secret key."},
{"lineNum":"   35","line":"    property key_pair : Keypair"},
{"lineNum":"   36","line":"    # The public checksummed `Ethereum` address."},
{"lineNum":"   37","line":"    property address : String"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    # Generates a new `Ethereum::Account` from a fresh random `Keypair`."},
{"lineNum":"   40","line":"    #"},
{"lineNum":"   41","line":"    # ```"},
{"lineNum":"   42","line":"    # eth = Secp256k1::Ethereum::Account.new"},
{"lineNum":"   43","line":"    # # => #<Secp256k1::Ethereum::Account:0x7f81ef21ab80>"},
{"lineNum":"   44","line":"    # ```"},
{"lineNum":"   45","line":"    def initialize"},
{"lineNum":"   46","line":"      @key_pair = Keypair.new"},
{"lineNum":"   47","line":"      @address = Ethereum.address_from_private @key_pair.private_key"},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    # Generates an `Ethereum::Account` from a provided `Keypair`."},
{"lineNum":"   51","line":"    #"},
{"lineNum":"   52","line":"    # ```"},
{"lineNum":"   53","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"   54","line":"    # eth = Secp256k1::Ethereum::Account.new key"},
{"lineNum":"   55","line":"    # # => #<Secp256k1::Ethereum::Account:0x7f81ef21ab80>"},
{"lineNum":"   56","line":"    # ```"},
{"lineNum":"   57","line":"    def initialize(@key_pair)","class":"lineCov","hits":"4","order":"232","possible_hits":"4",},
{"lineNum":"   58","line":"      @address = Ethereum.address_from_private @key_pair.private_key","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":"   59","line":"    end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    # Gets the private key as hexadecimal formatted string literal."},
{"lineNum":"   62","line":"    #"},
{"lineNum":"   63","line":"    # ```"},
{"lineNum":"   64","line":"    # eth.get_secret"},
{"lineNum":"   65","line":"    # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"   66","line":"    # ```"},
{"lineNum":"   67","line":"    def get_secret"},
{"lineNum":"   68","line":"      Util.to_padded_hex_32 @key_pair.private_key"},
{"lineNum":"   69","line":"    end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    # Gets the account formatted as `Ethereum` address."},
{"lineNum":"   72","line":"    #"},
{"lineNum":"   73","line":"    # ```"},
{"lineNum":"   74","line":"    # eth.to_s"},
{"lineNum":"   75","line":"    # # => \"0x224008a0F3d3cB989c807F568c7f99Bf451328A6\""},
{"lineNum":"   76","line":"    # ```"},
{"lineNum":"   77","line":"    def to_s"},
{"lineNum":"   78","line":"      Ethereum.address_checksum @address"},
{"lineNum":"   79","line":"    end"},
{"lineNum":"   80","line":"  end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  # Implements an `Ethereum` devp2p enode containing a `Keypair` and an IP address."},
{"lineNum":"   83","line":"  #"},
{"lineNum":"   84","line":"  # Properties:"},
{"lineNum":"   85","line":"  # * `key_pair` (`Keypair`): the `Keypair` containing the secret key."},
{"lineNum":"   86","line":"  # * `address` (`Socket::IPAddress`): the public (or local) IP address with port."},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # ```"},
{"lineNum":"   89","line":"  # p2p = Secp256k1::Ethereum::Enode.new"},
{"lineNum":"   90","line":"  # p2p.get_secret"},
{"lineNum":"   91","line":"  # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"   92","line":"  # p2p.to_s"},
{"lineNum":"   93","line":"  # # => \"enode://e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b7d9011bb589e883d8a7947cfb37dc6b3c8beae9c614cab4a83009bd9d8732a9f@84.160.86.205:30303\""},
{"lineNum":"   94","line":"  # ```"},
{"lineNum":"   95","line":"  class Enode"},
{"lineNum":"   96","line":"    # The `Keypair` containing the secret key."},
{"lineNum":"   97","line":"    property key_pair : Keypair"},
{"lineNum":"   98","line":"    # The public (or local) IP address with port."},
{"lineNum":"   99","line":"    property address : Socket::IPAddress"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    # Generates a new `Ethereum::Enode` from a fresh random `Keypair`."},
{"lineNum":"  102","line":"    #"},
{"lineNum":"  103","line":"    # ```"},
{"lineNum":"  104","line":"    # p2p = Secp256k1::Ethereum::Enode.new"},
{"lineNum":"  105","line":"    # # => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>"},
{"lineNum":"  106","line":"    # ```"},
{"lineNum":"  107","line":"    #"},
{"lineNum":"  108","line":"    # Note, this tries to find out the public IP address and silently falls back to \"127.0.0.1\" if it fails."},
{"lineNum":"  109","line":"    def initialize"},
{"lineNum":"  110","line":"      @key_pair = Keypair.new"},
{"lineNum":"  111","line":"      @address = Socket::IPAddress.new(get_my_ip, 30303)"},
{"lineNum":"  112","line":"    end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    # Generates an `Ethereum::Enode` from a provided `Keypair`."},
{"lineNum":"  115","line":"    #"},
{"lineNum":"  116","line":"    # ```"},
{"lineNum":"  117","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  118","line":"    # p2p = Secp256k1::Ethereum::Enode.new key"},
{"lineNum":"  119","line":"    # # => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>"},
{"lineNum":"  120","line":"    # ```"},
{"lineNum":"  121","line":"    #"},
{"lineNum":"  122","line":"    # Note, this tries to find out the public IP address and silently falls back to \"127.0.0.1\" if it fails."},
{"lineNum":"  123","line":"    def initialize(@key_pair)"},
{"lineNum":"  124","line":"      @address = Socket::IPAddress.new(get_my_ip, 30303)"},
{"lineNum":"  125","line":"    end"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    # Generates an `Ethereum::Enode` from a provided `Keypair` and a custom port."},
{"lineNum":"  128","line":"    #"},
{"lineNum":"  129","line":"    # ```"},
{"lineNum":"  130","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  131","line":"    # p2p = Secp256k1::Ethereum::Enode.new key, 50000"},
{"lineNum":"  132","line":"    # # => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>"},
{"lineNum":"  133","line":"    # ```"},
{"lineNum":"  134","line":"    #"},
{"lineNum":"  135","line":"    # Note, this tries to find out the public IP address and silently falls back to \"127.0.0.1\" if it fails."},
{"lineNum":"  136","line":"    def initialize(@key_pair, port)"},
{"lineNum":"  137","line":"      @address = Socket::IPAddress.new(get_my_ip, port)"},
{"lineNum":"  138","line":"    end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    # Generates an `Ethereum::Enode` from a provided `Keypair` and a custom IP address with port."},
{"lineNum":"  141","line":"    #"},
{"lineNum":"  142","line":"    # ```"},
{"lineNum":"  143","line":"    # key = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)"},
{"lineNum":"  144","line":"    # p2p = Secp256k1::Ethereum::Enode.new key, \"192.168.13.37\", 31337"},
{"lineNum":"  145","line":"    # # => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>"},
{"lineNum":"  146","line":"    # ```"},
{"lineNum":"  147","line":"    def initialize(@key_pair, host, port)","class":"lineCov","hits":"4","order":"265","possible_hits":"4",},
{"lineNum":"  148","line":"      @address = Socket::IPAddress.new(host, port)","class":"lineCov","hits":"1","order":"266","possible_hits":"1",},
{"lineNum":"  149","line":"    end"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    # Tries to find out the public IP address for the node."},
{"lineNum":"  152","line":"    #"},
{"lineNum":"  153","line":"    # It queries [ident.me](http://ident.me/) for a potential public IP and silently"},
{"lineNum":"  154","line":"    # falls back to \"127.0.0.1\" if it fails without raising. _Should be used with caution._"},
{"lineNum":"  155","line":"    #"},
{"lineNum":"  156","line":"    # ```"},
{"lineNum":"  157","line":"    # p2p.get_my_ip"},
{"lineNum":"  158","line":"    # # => \"84.160.86.205\""},
{"lineNum":"  159","line":"    # ```"},
{"lineNum":"  160","line":"    def get_my_ip"},
{"lineNum":"  161","line":"      ip = nil"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"      # Tries to query [ident.me](http://ident.me/) for a potential public IP."},
{"lineNum":"  164","line":"      begin"},
{"lineNum":"  165","line":"        ip = HTTP::Client.get(\"http://ident.me/\").body.to_s"},
{"lineNum":"  166","line":"      rescue"},
{"lineNum":"  167","line":"        # Silently falls back to localhost without raising."},
{"lineNum":"  168","line":"        ip = \"127.0.0.1\""},
{"lineNum":"  169","line":"      ensure"},
{"lineNum":"  170","line":"        # Ensures any IP is set. Falls back to localhost if not."},
{"lineNum":"  171","line":"        ip = \"127.0.0.1\" if ip.nil? || ip.size < 2"},
{"lineNum":"  172","line":"      end"},
{"lineNum":"  173","line":"      ip"},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    # Gets the private key as hexadecimal formatted string literal."},
{"lineNum":"  177","line":"    #"},
{"lineNum":"  178","line":"    # ```"},
{"lineNum":"  179","line":"    # p2p.get_secret"},
{"lineNum":"  180","line":"    # # => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\""},
{"lineNum":"  181","line":"    # ```"},
{"lineNum":"  182","line":"    def get_secret"},
{"lineNum":"  183","line":"      Util.to_padded_hex_32 @key_pair.private_key"},
{"lineNum":"  184","line":"    end"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    # Gets the `Enode` formatted as devp2p enode address."},
{"lineNum":"  187","line":"    #"},
{"lineNum":"  188","line":"    # ```"},
{"lineNum":"  189","line":"    # p2p.to_s"},
{"lineNum":"  190","line":"    # # => \"enode://e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b7d9011bb589e883d8a7947cfb37dc6b3c8beae9c614cab4a83009bd9d8732a9f@84.160.86.205:30303\""},
{"lineNum":"  191","line":"    # ```"},
{"lineNum":"  192","line":"    def to_s","class":"lineCov","hits":"2","order":"267","possible_hits":"2",},
{"lineNum":"  193","line":"      \"enode://#{@key_pair.to_s}@#{@address.to_s}\"","class":"lineCov","hits":"1","order":"268","possible_hits":"1",},
{"lineNum":"  194","line":"    end"},
{"lineNum":"  195","line":"  end"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  # Returns a checksummed `Ethereum` address as per EIP-55."},
{"lineNum":"  198","line":"  #"},
{"lineNum":"  199","line":"  # Reference: [eips.ethereum.org/EIPS/eip-55](https://eips.ethereum.org/EIPS/eip-55)"},
{"lineNum":"  200","line":"  #"},
{"lineNum":"  201","line":"  # Parameters:"},
{"lineNum":"  202","line":"  # * `adr` (`String`): an unchecked `Ethereum` address."},
{"lineNum":"  203","line":"  #"},
{"lineNum":"  204","line":"  # ```"},
{"lineNum":"  205","line":"  # Secp256k1::Ethereum.address_checksum \"0x7598c0fbaeb021161ce2e598f45ddee90fe5c6f7\""},
{"lineNum":"  206","line":"  # # => \"0x7598c0FBAEB021161ce2E598F45dDEe90FE5C6f7\""},
{"lineNum":"  207","line":"  # ```"},
{"lineNum":"  208","line":"  #"},
{"lineNum":"  209","line":"  # Raises if address is malformed."},
{"lineNum":"  210","line":"  def self.address_checksum(adr : String)","class":"lineCov","hits":"2","order":"248","possible_hits":"2",},
{"lineNum":"  211","line":"    # Makes sure the address is lower case."},
{"lineNum":"  212","line":"    adr = adr.downcase","class":"lineCov","hits":"1","order":"249","possible_hits":"1",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    if adr.size === 42","class":"lineCov","hits":"1","order":"250","possible_hits":"1",},
{"lineNum":"  215","line":"      # Trims a leading `\"0x\"`."},
{"lineNum":"  216","line":"      adr = adr[2, 40]","class":"lineCov","hits":"1","order":"271","possible_hits":"1",},
{"lineNum":"  217","line":"    end"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    if adr.size === 40","class":"lineCov","hits":"1","order":"251","possible_hits":"1",},
{"lineNum":"  220","line":"      # Gets a Keccak-256 hash to operate on according to EIP-55."},
{"lineNum":"  221","line":"      keccak = Hash.keccak256 adr","class":"lineCov","hits":"1","order":"252","possible_hits":"1",},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"      # Prefixes the address with `\"0x\"`."},
{"lineNum":"  224","line":"      address = \"0x\"","class":"lineCov","hits":"1","order":"256","possible_hits":"1",},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"      # Iterates each character to determine capitalization."},
{"lineNum":"  227","line":"      i = 0","class":"lineCov","hits":"1","order":"257","possible_hits":"1",},
{"lineNum":"  228","line":"      while i < adr.size","class":"lineCov","hits":"1","order":"258","possible_hits":"1",},
{"lineNum":"  229","line":"        k = keccak[i].to_i 16","class":"lineCov","hits":"1","order":"259","possible_hits":"1",},
{"lineNum":"  230","line":"        if k >= 8","class":"lineCov","hits":"2","order":"260","possible_hits":"2",},
{"lineNum":"  231","line":"          address += \"#{adr[i]}\".upcase","class":"lineCov","hits":"1","order":"262","possible_hits":"1",},
{"lineNum":"  232","line":"        else"},
{"lineNum":"  233","line":"          address += \"#{adr[i]}\".downcase","class":"lineCov","hits":"1","order":"261","possible_hits":"1",},
{"lineNum":"  234","line":"        end"},
{"lineNum":"  235","line":"        i += 1","class":"linePartCov","hits":"2","order":"263","possible_hits":"3",},
{"lineNum":"  236","line":"      end"},
{"lineNum":"  237","line":"      address"},
{"lineNum":"  238","line":"    else"},
{"lineNum":"  239","line":"      raise \"malformed ethereum address (invalid size: #{adr.size})\"","class":"lineCov","hits":"2","order":"264","possible_hits":"2",},
{"lineNum":"  240","line":"    end"},
{"lineNum":"  241","line":"  end"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  # Generates a checksummed `Ethereum` address for an uncompressed public key."},
{"lineNum":"  244","line":"  #"},
{"lineNum":"  245","line":"  # Parameters:"},
{"lineNum":"  246","line":"  # * `pub` (`String`): an uncompressed public key string."},
{"lineNum":"  247","line":"  #"},
{"lineNum":"  248","line":"  # ```"},
{"lineNum":"  249","line":"  # Secp256k1::Ethereum.address_from_public_key \"d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a67299d1cf25955e9b6425583cbc33f4ab831f5a31ef88c7167e9eb714cc758a5\""},
{"lineNum":"  250","line":"  # # => \"0x7598c0FBAEB021161ce2E598F45dDEe90FE5C6f7\""},
{"lineNum":"  251","line":"  # ```"},
{"lineNum":"  252","line":"  #"},
{"lineNum":"  253","line":"  # Note, that the returned `Ethereum` address is already checksummed."},
{"lineNum":"  254","line":"  #"},
{"lineNum":"  255","line":"  # Raises if the public key is malformed."},
{"lineNum":"  256","line":"  def self.address_from_public_key(pub : String)","class":"lineCov","hits":"2","order":"240","possible_hits":"2",},
{"lineNum":"  257","line":"    if pub.size === 130","class":"lineCov","hits":"1","order":"241","possible_hits":"1",},
{"lineNum":"  258","line":"      # Trims a leading prefix."},
{"lineNum":"  259","line":"      pub = pub[2, 128]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"    end"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    # Ensures to use uncompressed public keys."},
{"lineNum":"  263","line":"    if pub.size === 128","class":"lineCov","hits":"1","order":"242","possible_hits":"1",},
{"lineNum":"  264","line":"      # Hashes the uncompressed public key with Keccak-256."},
{"lineNum":"  265","line":"      keccak = Hash.keccak256 Hash.hex_to_bin pub","class":"lineCov","hits":"1","order":"243","possible_hits":"1",},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"      # Takes the last 20 bytes from the hash"},
{"lineNum":"  268","line":"      address_checksum keccak[24, 40]","class":"lineCov","hits":"1","order":"247","possible_hits":"1",},
{"lineNum":"  269","line":"    else"},
{"lineNum":"  270","line":"      raise \"malformed public key (invalid key size: #{pub.size})\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"    end"},
{"lineNum":"  272","line":"  end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  # Generates a checksummed `Ethereum` address from an public key as `ECPoint`."},
{"lineNum":"  275","line":"  #"},
{"lineNum":"  276","line":"  # Parameters:"},
{"lineNum":"  277","line":"  # * `p` (`ECPoint`): a public key point with `x` and `y` coordinates."},
{"lineNum":"  278","line":"  #"},
{"lineNum":"  279","line":"  # See `address_from_public_key` and `ECPoint` for usage instructions."},
{"lineNum":"  280","line":"  def self.address_from_public_point(p : Secp256k1::ECPoint)","class":"lineCov","hits":"2","order":"237","possible_hits":"2",},
{"lineNum":"  281","line":"    # Takes the corresponding public key generated with it."},
{"lineNum":"  282","line":"    pub = Secp256k1::Util.public_key_uncompressed p","class":"lineCov","hits":"1","order":"238","possible_hits":"1",},
{"lineNum":"  283","line":"    address_from_public_key pub","class":"lineCov","hits":"1","order":"239","possible_hits":"1",},
{"lineNum":"  284","line":"  end"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"  # Generates a checksummed `Ethereum` address from a private key."},
{"lineNum":"  287","line":"  #"},
{"lineNum":"  288","line":"  # Parameters:"},
{"lineNum":"  289","line":"  # * `priv` (`BigInt`): a private key as number."},
{"lineNum":"  290","line":"  #"},
{"lineNum":"  291","line":"  # ```"},
{"lineNum":"  292","line":"  # Secp256k1::Ethereum.address_from_private BigInt.new(\"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\", 16)"},
{"lineNum":"  293","line":"  # # => \"0x7598c0FBAEB021161ce2E598F45dDEe90FE5C6f7\""},
{"lineNum":"  294","line":"  # ```"},
{"lineNum":"  295","line":"  #"},
{"lineNum":"  296","line":"  # Note, that the returned `Ethereum` address is already checksummed."},
{"lineNum":"  297","line":"  def self.address_from_private(priv : BigInt)","class":"lineCov","hits":"2","order":"234","possible_hits":"2",},
{"lineNum":"  298","line":"    # Takes the corresponding public key generated with it."},
{"lineNum":"  299","line":"    p = Secp256k1::Util.public_key_from_private priv","class":"lineCov","hits":"1","order":"235","possible_hits":"1",},
{"lineNum":"  300","line":"    address_from_public_point p","class":"lineCov","hits":"1","order":"236","possible_hits":"1",},
{"lineNum":"  301","line":"  end"},
{"lineNum":"  302","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2021-09-29 14:18:30", "instrumented" : 34, "covered" : 32,};
var merged_data = [];
