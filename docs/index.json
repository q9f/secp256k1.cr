{"repository_name":"secp256k1","body":"# secp256k1.cr\n\n[![Build Status](https://img.shields.io/github/workflow/status/q9f/secp256k1.cr/Nightly)](https://github.com/q9f/secp256k1.cr/actions)\n[![Code Coverage](https://codecov.io/gh/q9f/secp256k1.cr/branch/main/graph/badge.svg?token=ngxRs9HdJA)](https://codecov.io/gh/q9f/secp256k1.cr)\n[![Documentation](https://img.shields.io/badge/docs-html-black)](https://q9f.github.io/secp256k1.cr/)\n[![Release](https://img.shields.io/github/v/release/q9f/secp256k1.cr?include_prereleases&color=black)](https://github.com/q9f/secp256k1.cr/releases/latest)\n[![Language](https://img.shields.io/github/languages/top/q9f/secp256k1.cr?color=black)](https://github.com/q9f/secp256k1.cr/search?l=crystal)\n[![License](https://img.shields.io/github/license/q9f/secp256k1.cr.svg?color=black)](LICENSE)\n\nA library implementing the `Secp256k1` elliptic curve natively in pure Crystal.\n`Secp256k1` is the elliptic curve used in the public-private-key cryptography required by `Bitcoin`, `Ethereum`, and `Polkadot`.\n\nThis library allows for:\n* providing a `Secp256k1` cryptographic context, see `Secp256k1::Context`\n* managing `Secp256k1` signatures and verification, see `Secp256k1::Signature`\n* managing private-public keypairs, see `Secp256k1::Key`\n* generating public keys, see `Secp256k1::Point`\n* generating private keys, see `Secp256k1::Num`\n\n# Installation\n\nAdd the `Secp256k1` library to your `shard.yml`\n\n```yaml\ndependencies:\n  secp256k1:\n    github: q9f/secp256k1.cr\n    version: \"~> 0.5\"\n```\n\n# Usage\n\nImport and expose the `Secp256k1` module.\n\n```crystal\nrequire \"secp256k1\"\n```\n\nThis library exposes the following modules and classes (in logical order):\n\n* `Secp256k1`: necessary constants and data structures, including:\n  - `Secp256k1::Num`: for managing big numerics (private keys)\n  - `Secp256k1::Point`: for handling of elliptic curve points (public keys)\n  - `Secp256k1::Key`: for managing private-public keypairs (accounts)\n  - `Secp256k1::Signature`: for handling ECDSA signatures (r, s, v)\n* `Secp256k1::Context`: providing a cryptographic context for signing and verification\n* `Secp256k1::Curve`: the entire core mathematics behind the elliptic curve cryptography\n* `Secp256k1::Util`: binding of various hashing algorithms for convenience\n\nBasic usage:\n\n```crystal\n# generates a new, random keypair\nkey = Secp256k1::Key.new\n# => #<Secp256k1::Key:0x7fad7235aee0\n#          @private_key=#<Secp256k1::Num:0x7fad7235d300\n#              @hex=\"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\",\n#              @dec=27505422793993207218034260454067205887515304192802142316084292370834437241648,\n#              @bin=Bytes[60, 207, 132, 130, 12, 32, 213, 232, 197, 54, 186, 132, 197, 43, 164, 16, 55, 91, 41, 177, 129, 43, 95, 126, 114, 36, 69, 201, 105, 160, 251, 48]>,\n#          @public_key=#<Secp256k1::Point:0x7fad7235ad20\n#              @x=#<Secp256k1::Num:0x7fad69294ec0\n#                  @hex=\"cd4a8712ee6efc15b5abe37c0dbfa979d89c427d3fe24b076008decefe94dba2\",\n#                  @dec=92855812888509048668847240903552964511053624688683992093822247249407942908834,\n#                  @bin=Bytes[205, 74, 135, 18, 238, 110, 252, 21, 181, 171, 227, 124, 13, 191, 169, 121, 216, 156, 66, 125, 63, 226, 75, 7, 96, 8, 222, 206, 254, 148, 219, 162]>,\n#              @y=#<Secp256k1::Num:0x7fad69294e80\n#                  @hex=\"81363d298e4a40ebcb13f1afa85a0b94b967f243ee59a59010cb5deaf0d7b66c\",\n#                  @dec=58444189335609256006902338825877424261513225250255958585656342678587884156524,\n#                  @bin=Bytes[129, 54, 61, 41, 142, 74, 64, 235, 203, 19, 241, 175, 168, 90, 11, 148, 185, 103, 242, 67, 238, 89, 165, 144, 16, 203, 93, 234, 240, 215, 182, 108]>>>\n\n# gets the private key\nkey.private_hex\n# => \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\"\n\n# gets the compressed public key with prefix\nkey.public_hex_compressed\n# => \"02cd4a8712ee6efc15b5abe37c0dbfa979d89c427d3fe24b076008decefe94dba2\"\n```\n\nSignature generation and verification:\n\n```crystal\n# sign a message with a private key\nctx = Secp256k1::Context.new\npriv = Secp256k1::Num.new \"1f0c122d41ff536b19bfd83537c0dfc290e45cd3c375a43237c8b8fff7ac8af7\"\nkey = Secp256k1::Key.new priv\nhash = Secp256k1::Util.sha256 \"Henlo, Wordl\"\nsig = ctx.sign key, hash\n# => #<Secp256k1::Signature:0x7f5332e1d9c0\n#          @r=#<Secp256k1::Num:0x7f5332decac0\n#              @hex=\"c4079db44240b7afe94985c69fc89602e33629fd9b8623d711c30ce6378b33df\",\n#              @dec=88666774685717741514025410921892109286073075687452443491001272268566542627807,\n#              @bin=Bytes[196, 7, 157, 180, 66, 64, 183, 175, 233, 73, 133, 198, 159, 200, 150, 2, 227, 54, 41, 253, 155, 134, 35, 215, 17, 195, 12, 230, 55, 139, 51, 223]>,\n#          @s=#<Secp256k1::Num:0x7f5332deca80\n#              @hex=\"6842c1b63c94bdb8e4f5ae88fb65f7a98b77b197c8323004fb47ef57fab29053\",\n#              @dec=47158485109070227797431103290229472044663017260590156038384319099500326195283,\n#              @bin=Bytes[104, 66, 193, 182, 60, 148, 189, 184, 228, 245, 174, 136, 251, 101, 247, 169, 139, 119, 177, 151, 200, 50, 48, 4, 251, 71, 239, 87, 250, 178, 144, 83]>,\n#          @v=#<Secp256k1::Num:0x7f5332deca40\n#              @hex=\"00\",\n#              @dec=0,\n#              @bin=Bytes[0]>>\n\n# verify a signature with a public key\nr = Secp256k1::Num.new \"c4079db44240b7afe94985c69fc89602e33629fd9b8623d711c30ce6378b33df\"\ns = Secp256k1::Num.new \"6842c1b63c94bdb8e4f5ae88fb65f7a98b77b197c8323004fb47ef57fab29053\"\nv = Secp256k1::Num.new \"00\"\nsig = Secp256k1::Signature.new r, s, v\nhash = Secp256k1::Util.sha256 \"Henlo, Wordl\"\npubl = Secp256k1::Point.new \"0416008a369439f1a8a75cf974860bed5b10180518d6b1dd3ac847f423fd375d6aa29474394f0cd79d2ea543507d069e97339284f01bdbfd27392daec0ec553816\"\nctx.verify sig, hash, publ\n# => true\n```\n\nThere are example scripts for generating `Bitcoin` and `Ethereum` accounts in `src/bitcoin.cr` and `src/ethereum.cr`.\n\n# Documentation\n\nThe full library documentation can be found here: [q9f.github.io/secp256k1.cr](https://q9f.github.io/secp256k1.cr/)\n\nGenerate a local copy with:\n\n```shell\ncrystal docs\n```\n\n# Testing\n\nThe library is entirely specified through tests in `./spec`; run:\n\n```shell\ncrystal spec --verbose\n```\n\n# Understand\n\nPrivate keys are just scalars (`Secp256k1::Num`) and public keys are points (`Secp256k1::Point`) with `x` and `y` coordinates.\n\nBitcoin public keys can be uncompressed `p|x|y` or compressed `p|x`. both come with a prefix `p` which is useless for uncompressed keys but necessary for compressed keys to recover the `y` coordinate on the `Secp256k1` elliptic curve field.\n\nEthereum public keys are uncompressed `x|y` without any prefix. The last 20 bytes slice of the `y` coordinate is actually used as address without any checksum. A checksum was later added in EIP-55 using a `keccak256` hash and indicating character capitalization.\n\nNeither Bitcoin nor Ethereum allow for recovering public keys from an address unless there exists a transaction with a valid signature on the blockchain.\n\n# Known issues\n\n_Note: this library should not be used in production without proper auditing. It should be considered slow and insecure._\n\n* This library is not constant time and might be subject to side-channel attacks. ([#4](https://github.com/q9f/secp256k1.cr/issues/4))\n* This library does unnecessary big-integer math and should someday rather correctly implement the `Secp256k1` prime field ([#5](https://github.com/q9f/secp256k1.cr/issues/5))\n* This library is slow in recovering signatures. Future versions should respect the recovery ID to quickly identify the correct public key from a signature.\n\nFound any other issue? Report it: [github.com/q9f/secp256k1.cr/issues](https://github.com/q9f/secp256k1.cr/issues)\n\n# Contribute\n\nCreate a pull request, and make sure tests and linter pass.\n\nThis pure crystal implementation is based on the python implementation [wobine/blackboard101](https://github.com/wobine/blackboard101) which is also used as reference to write tests against. It's a complete rewrite of the abandoned [packetzero/bitcoinutils](https://github.com/packetzero/bitcoinutils) for educational purposes.\n\nHonerable mention for the [bitcoin wiki](https://en.bitcoin.it/wiki/Main_Page) and the [ethereum stackexchange](https://ethereum.stackexchange.com/) for providing so many in-depth resources that supported this project in reimplementing everything.\n\nLicense: Apache License v2.0\n\nContributors: [**@q9f**](https://github.com/q9f/), [@cserb](https://github.com/cserb), [MrSorcus](https://github.com/MrSorcus)\n","program":{"html_id":"secp256k1/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"}],"locations":[],"repository_name":"secp256k1","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"}],"extended_modules":[{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"}],"types":[{"html_id":"secp256k1/Bitcoin","path":"Bitcoin.html","kind":"module","full_name":"Bitcoin","name":"Bitcoin","abstract":false,"locations":[{"filename":"src/bitcoin.cr","line_number":21,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L21"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BASE_58","name":"BASE_58","value":"\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","doc":"The Base-58 alphabet for `Bitcoin` addresses is a Base-64 alphabet without\n`0`, `O`, `I`, and `l` to omit similar-looking letters.","summary":"<p>The Base-58 alphabet for <code><a href=\"Bitcoin.html\">Bitcoin</a></code> addresses is a Base-64 alphabet without <code>0</code>, <code>O</code>, <code>I</code>, and <code>l</code> to omit similar-looking letters.</p>"}],"doc":"An example implementation of a `Bitcoin` account using an `Secp256k1`\nkeypair and a Bitcoin network version identifier; only for educational\npurposes and should not be used in production.","summary":"<p>An example implementation of a <code><a href=\"Bitcoin.html\">Bitcoin</a></code> account using an <code><a href=\"Secp256k1.html\">Secp256k1</a></code> keypair and a Bitcoin network version identifier; only for educational purposes and should not be used in production.</p>","types":[{"html_id":"secp256k1/Bitcoin/Account","path":"Bitcoin/Account.html","kind":"class","full_name":"Bitcoin::Account","name":"Account","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/bitcoin.cr","line_number":29,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L29"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Bitcoin","kind":"module","full_name":"Bitcoin","name":"Bitcoin"},"doc":"An example implementation of a `Bitcoin` account using an `Secp256k1`\nkeypair and a Bitcoin network version identifier; only for educational\npurposes and should not be used in production.","summary":"<p>An example implementation of a <code><a href=\"../Bitcoin.html\">Bitcoin</a></code> account using an <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> keypair and a Bitcoin network version identifier; only for educational purposes and should not be used in production.</p>","constructors":[{"html_id":"new(key=Key.new,version=Num.new(\"0x00\"))-class-method","name":"new","doc":"Creates a Bitcoin account from a given `Secp256k1::Key` keypair and for the\nspecified network version, e.g., `00` for Bitcoin main network. It creates\na random account if no parameters are supplied.\n\nParameters:\n* `key` (`Secp256k1::Key`): the `Secp256k1` keypair for the account.\n* `version` (`Secp256k1::Num`): the network version indicator.\n\n```\npriv = Secp256k1::Num.new \"18e14a7b6a307f426a94f8114701e7c8e774e7f9a47e2c2035db29a206321725\"\nkey = Secp256k1::Key.new priv\naccount = Bitcoin::Account.new key\n# => #<Bitcoin::Account:0x7f2611dcab40\n#         @key=#<Secp256k1::Key:0x7f261ae90ee0\n#               @private_key=#<Secp256k1::Num:0x7f261ae93300\n#                   @hex=\"18e14a7b6a307f426a94f8114701e7c8e774e7f9a47e2c2035db29a206321725\",\n#                   @dec=11253563012059685825953619222107823549092147699031672238385790369351542642469,\n#                   @bin=Bytes[24, 225, 74, 123, 106, 48, 127, 66, 106, 148, 248, 17, 71, 1, 231, 200, 231, 116, 231, 249, 164, 126, 44, 32, 53, 219, 41, 162, 6, 50, 23, 37]>,\n#               @public_key=#<Secp256k1::Point:0x7f261ae90d20\n#                   @x=#<Secp256k1::Num:0x7f2611dcabc0\n#                       @hex=\"50863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352\",\n#                       @dec=36422191471907241029883925342251831624200921388586025344128047678873736520530,\n#                       @bin=Bytes[80, 134, 58, 214, 74, 135, 174, 138, 47, 232, 60, 26, 241, 168, 64, 60, 181, 63, 83, 228, 134, 216, 81, 29, 173, 138, 4, 136, 126, 91, 35, 82]>,\n#                   @y=#<Secp256k1::Num:0x7f2611dcab80\n#                       @hex=\"2cd470243453a299fa9e77237716103abc11a1df38855ed6f2ee187e9c582ba6\",\n#                       @dec=20277110887056303803699431755396003735040374760118964734768299847012543114150,\n#                       @bin=Bytes[44, 212, 112, 36, 52, 83, 162, 153, 250, 158, 119, 35, 119, 22, 16, 58, 188, 17, 161, 223, 56, 133, 94, 214, 242, 238, 24, 126, 156, 88, 43, 166]>>>,\n#         @version=#<Secp256k1::Num:0x7f2611dcab00\n#               @hex=\"00\",\n#               @dec=0,\n#               @bin=Bytes[0]>,\n#         @address=\"16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM\",\n#         @address_compressed=\"1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs\",\n#         @wif=\"5J1F7GHadZG3sCCKHCwg8Jvys9xUbFsjLnGec4H125Ny1V9nR6V\",\n#         @wif_compressed=\"Kx45GeUBSMPReYQwgXiKhG9FzNXrnCeutJp4yjTd5kKxCitadm3C\">\n```","summary":"<p>Creates a Bitcoin account from a given <code><a href=\"../Secp256k1/Key.html\">Secp256k1::Key</a></code> keypair and for the specified network version, e.g., <code>00</code> for Bitcoin main network.</p>","abstract":false,"args":[{"name":"key","default_value":"Key.new","external_name":"key","restriction":""},{"name":"version","default_value":"Num.new(\"0x00\")","external_name":"version","restriction":""}],"args_string":"(key = Key.new, version = Num.new(\"0x00\"))","args_html":"(key = <span class=\"t\">Key</span>.<span class=\"k\">new</span>, version = <span class=\"t\">Num</span>.<span class=\"k\">new</span>(<span class=\"s\">&quot;0x00&quot;</span>))","location":{"filename":"src/bitcoin.cr","line_number":79,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L79"},"def":{"name":"new","args":[{"name":"key","default_value":"Key.new","external_name":"key","restriction":""},{"name":"version","default_value":"Num.new(\"0x00\")","external_name":"version","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(key, version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"The public, uncompressed Bitcoin account address.","summary":"<p>The public, uncompressed Bitcoin account address.</p>","abstract":false,"location":{"filename":"src/bitcoin.cr","line_number":35,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L35"},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"}},{"html_id":"address_compressed:String-instance-method","name":"address_compressed","doc":"The public, compressed Bitcoin account address.","summary":"<p>The public, compressed Bitcoin account address.</p>","abstract":false,"location":{"filename":"src/bitcoin.cr","line_number":37,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L37"},"def":{"name":"address_compressed","return_type":"String","visibility":"Public","body":"@address_compressed"}},{"html_id":"key:Key-instance-method","name":"key","doc":"The `Secp256k1` keypair for the account.","summary":"<p>The <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> keypair for the account.</p>","abstract":false,"location":{"filename":"src/bitcoin.cr","line_number":31,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L31"},"def":{"name":"key","return_type":"Key","visibility":"Public","body":"@key"}},{"html_id":"version:Num-instance-method","name":"version","doc":"The network version indicator.","summary":"<p>The network version indicator.</p>","abstract":false,"location":{"filename":"src/bitcoin.cr","line_number":33,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L33"},"def":{"name":"version","return_type":"Num","visibility":"Public","body":"@version"}},{"html_id":"wif:String-instance-method","name":"wif","doc":"The private, uncompressed wallet-import format.","summary":"<p>The private, uncompressed wallet-import format.</p>","abstract":false,"location":{"filename":"src/bitcoin.cr","line_number":39,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L39"},"def":{"name":"wif","return_type":"String","visibility":"Public","body":"@wif"}},{"html_id":"wif_compressed:String-instance-method","name":"wif_compressed","doc":"The private, compressed wallet-import format.","summary":"<p>The private, compressed wallet-import format.</p>","abstract":false,"location":{"filename":"src/bitcoin.cr","line_number":41,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/bitcoin.cr#L41"},"def":{"name":"wif_compressed","return_type":"String","visibility":"Public","body":"@wif_compressed"}}]}]},{"html_id":"secp256k1/Ethereum","path":"Ethereum.html","kind":"module","full_name":"Ethereum","name":"Ethereum","abstract":false,"locations":[{"filename":"src/ethereum.cr","line_number":20,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/ethereum.cr#L20"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"doc":"An example implementation of an `Ethereum` account using an `Secp256k1`\nkeypair; only for educational purposes and should not be used in production.","summary":"<p>An example implementation of an <code><a href=\"Ethereum.html\">Ethereum</a></code> account using an <code><a href=\"Secp256k1.html\">Secp256k1</a></code> keypair; only for educational purposes and should not be used in production.</p>","types":[{"html_id":"secp256k1/Ethereum/Account","path":"Ethereum/Account.html","kind":"class","full_name":"Ethereum::Account","name":"Account","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ethereum.cr","line_number":23,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/ethereum.cr#L23"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Ethereum","kind":"module","full_name":"Ethereum","name":"Ethereum"},"doc":"An example implementation of an `Ethereum` account using an `Secp256k1`\nkeypair; only for educational purposes and should not be used in production.","summary":"<p>An example implementation of an <code><a href=\"../Ethereum.html\">Ethereum</a></code> account using an <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> keypair; only for educational purposes and should not be used in production.</p>","constructors":[{"html_id":"new(key=Key.new)-class-method","name":"new","doc":"Creates an Ethereum account from a given `Secp256k1::Key` keypair.\nIt creates a random account if no keys are supplied.\n\nParameters:\n* `key` (`Secp256k1::Key`): the `Secp256k1` keypair for the account.\n\n```\nprv = Secp256k1::Num.new \"d6c8ace470ab0ce03125cac6abf2779c199d21a47d3e75e93c212b1ec23cfe51\"\nkey = Secp256k1::Key.new prv\nEthereum::Account.new key\n# => #<Ethereum::Account:0x7fcc10726a60\n#         @key=#<Secp256k1::Key:0x7fcc19799ee0\n#             @private_key=#<Secp256k1::Num:0x7fcc1979c300\n#                 @hex=\"d6c8ace470ab0ce03125cac6abf2779c199d21a47d3e75e93c212b1ec23cfe51\",\n#                 @dec=97149512268879514742361644313413872500736768173592718417281501971026009718353,\n#                 @bin=Bytes[214, 200, 172, 228, 112, 171, 12, 224, 49, 37, 202, 198, 171, 242, 119, 156, 25, 157, 33, 164, 125, 62, 117, 233, 60, 33, 43, 30, 194, 60, 254, 81]>,\n#             @public_key=#<Secp256k1::Point:0x7fcc19799d20\n#                 @x=#<Secp256k1::Num:0x7fcc1979c240\n#                     @hex=\"bf0cf8c934bd3c57e962fdf2a47e99d6136b047f987ee2e0cb03110cafd92afc\",\n#                     @dec=86414673301778591173569328850396232566766657919369855130423318525027519376124,\n#                     @bin=Bytes[191, 12, 248, 201, 52, 189, 60, 87, 233, 98, 253, 242, 164, 126, 153, 214, 19, 107, 4, 127, 152, 126, 226, 224, 203, 3, 17, 12, 175, 217, 42, 252]>,\n#                 @y=#<Secp256k1::Num:0x7fcc1979c200\n#                     @hex=\"981974428f8162d3f8fce2f58d4e56341478e87d092aeb3a0edf8af97d638d04\",\n#                     @dec=68796526558321542419405677832866288094027461232937174622925256896107946151172,\n#                     @bin=Bytes[152, 25, 116, 66, 143, 129, 98, 211, 248, 252, 226, 245, 141, 78, 86, 52, 20, 120, 232, 125, 9, 42, 235, 58, 14, 223, 138, 249, 125, 99, 141, 4]>>>,\n#         @address=\"0x2Ef1f605AF5d03874eE88773f41c1382ac71C239\">\n```","summary":"<p>Creates an Ethereum account from a given <code><a href=\"../Secp256k1/Key.html\">Secp256k1::Key</a></code> keypair.</p>","abstract":false,"args":[{"name":"key","default_value":"Key.new","external_name":"key","restriction":""}],"args_string":"(key = Key.new)","args_html":"(key = <span class=\"t\">Key</span>.<span class=\"k\">new</span>)","location":{"filename":"src/ethereum.cr","line_number":56,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/ethereum.cr#L56"},"def":{"name":"new","args":[{"name":"key","default_value":"Key.new","external_name":"key","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"The checksummed Ethereum account address.","summary":"<p>The checksummed Ethereum account address.</p>","abstract":false,"location":{"filename":"src/ethereum.cr","line_number":27,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/ethereum.cr#L27"},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"}},{"html_id":"key:Key-instance-method","name":"key","doc":"The `Secp256k1` keypair for the account.","summary":"<p>The <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> keypair for the account.</p>","abstract":false,"location":{"filename":"src/ethereum.cr","line_number":25,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/ethereum.cr#L25"},"def":{"name":"key","return_type":"Key","visibility":"Public","body":"@key"}}]}]},{"html_id":"secp256k1/Secp256k1","path":"Secp256k1.html","kind":"module","full_name":"Secp256k1","name":"Secp256k1","abstract":false,"locations":[{"filename":"src/secp256k1.cr","line_number":35,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1.cr#L35"},{"filename":"src/secp256k1/context.cr","line_number":22,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/context.cr#L22"},{"filename":"src/secp256k1/version.cr","line_number":21,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/version.cr#L21"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"G","name":"G","value":"Point.new(Num.new(\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"), Num.new(\"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"))","doc":"A commonly used base point `G` with coordinates `x` and `y`\nsatisfying `y^2 = x^3 + 7`.","summary":"<p>A commonly used base point <code>G</code> with coordinates <code>x</code> and <code>y</code> satisfying <code>y^2 = x^3 + 7</code>.</p>"},{"id":"N","name":"N","value":"Num.new(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\")","doc":"The order `n` of `G` defines the finite size of the Secp256k1 field `E`.","summary":"<p>The order <code>n</code> of <code>G</code> defines the finite size of the Secp256k1 field <code>E</code>.</p>"},{"id":"P","name":"P","value":"Num.new(\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\")","doc":"The elliptic curve domain parameters over `F_p` associated with a\nKoblitz curve `Secp256k1` are specified by the sextuple\n`T = (p, a, b, G, n, h)` where the finite field `F_p` is defined by\nthe prime `p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1`.","summary":"<p>The elliptic curve domain parameters over <code>F_p</code> associated with a Koblitz curve <code><a href=\"Secp256k1.html\">Secp256k1</a></code> are specified by the sextuple <code>T = (p, a, b, G, n, h)</code> where the finite field <code>F_p</code> is defined by the prime <code>p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1</code>.</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.5.0\"","doc":"The `VERSION` of the `Secp256k1` module.","summary":"<p>The <code><a href=\"Secp256k1.html#VERSION\">VERSION</a></code> of the <code><a href=\"Secp256k1.html\">Secp256k1</a></code> module.</p>"}],"doc":"Provides the `Secp256k1` module with the elliptic curve  parameters\nused by the `Bitcoin`, `Ethereum`, and `Polkadot` blockchains. It's\nprimarily used to generate key-pairs as well as signing messages and\nrecoverying signatures.\n\nRef: [secg.org/sec2-v2.pdf](https://www.secg.org/sec2-v2.pdf)","summary":"<p>Provides the <code><a href=\"Secp256k1.html\">Secp256k1</a></code> module with the elliptic curve  parameters used by the <code><a href=\"Bitcoin.html\">Bitcoin</a></code>, <code><a href=\"Ethereum.html\">Ethereum</a></code>, and <code>Polkadot</code> blockchains.</p>","types":[{"html_id":"secp256k1/Secp256k1/Context","path":"Secp256k1/Context.html","kind":"class","full_name":"Secp256k1::Context","name":"Context","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/context.cr","line_number":22,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/context.cr#L22"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Provides a `Secp256k1` context to allow signing arbitrary data,\nrecovering public keys, and verifying signatures.\n\n```\nctx = Context.new\n# => #<Secp256k1::Context:0x7fc855a23e60>\n```","summary":"<p>Provides a <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> context to allow signing arbitrary data, recovering public keys, and verifying signatures.</p>","instance_methods":[{"html_id":"sign(key:Key,hash:Num):Signature-instance-method","name":"sign","doc":"Signs a message hash or any other arbitrary data with a given keypair.\n\nParameters:\n* `key` (`Key`): the keypair containing a secret to sign the data.\n* `hash` (`Num`): the message or arbirtrary data hash.\n\nReturns a `Signature` proving the given key signed the message hash.\n\n```\nctx = Context.new\nkey = Key.new Num.new \"1f0c122d41ff536b19bfd83537c0dfc290e45cd3c375a43237c8b8fff7ac8af7\"\nhash = Util.sha256 \"Henlo, Wordl\"\nsig = ctx.sign key, hash\n# => #<Secp256k1::Signature:0x7f5332e1d9c0\n#          @r=#<Secp256k1::Num:0x7f5332decac0\n#              @hex=\"c4079db44240b7afe94985c69fc89602e33629fd9b8623d711c30ce6378b33df\",\n#              @dec=88666774685717741514025410921892109286073075687452443491001272268566542627807,\n#              @bin=Bytes[196, 7, 157, 180, 66, 64, 183, 175, 233, 73, 133, 198, 159, 200, 150, 2, 227, 54, 41, 253, 155, 134, 35, 215, 17, 195, 12, 230, 55, 139, 51, 223]>,\n#          @s=#<Secp256k1::Num:0x7f5332deca80\n#              @hex=\"6842c1b63c94bdb8e4f5ae88fb65f7a98b77b197c8323004fb47ef57fab29053\",\n#              @dec=47158485109070227797431103290229472044663017260590156038384319099500326195283,\n#              @bin=Bytes[104, 66, 193, 182, 60, 148, 189, 184, 228, 245, 174, 136, 251, 101, 247, 169, 139, 119, 177, 151, 200, 50, 48, 4, 251, 71, 239, 87, 250, 178, 144, 83]>,\n#          @v=#<Secp256k1::Num:0x7f5332deca40\n#              @hex=\"00\",\n#              @dec=0,\n#              @bin=Bytes[0]>>\n```","summary":"<p>Signs a message hash or any other arbitrary data with a given keypair.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Key"},{"name":"hash","external_name":"hash","restriction":"Num"}],"args_string":"(key : Key, hash : Num) : Signature","args_html":"(key : <a href=\"../Secp256k1/Key.html\">Key</a>, hash : <a href=\"../Secp256k1/Num.html\">Num</a>) : <a href=\"../Secp256k1/Signature.html\">Signature</a>","location":{"filename":"src/secp256k1/context.cr","line_number":50,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/context.cr#L50"},"def":{"name":"sign","args":[{"name":"key","external_name":"key","restriction":"Key"},{"name":"hash","external_name":"hash","restriction":"Num"}],"return_type":"Signature","visibility":"Public","body":"k = Util.deterministic_k(key.private_key, hash)\nhash = hash.to_big\npriv = key.private_key.to_big\npoint = Curve.mul(G, k)\nr = point.x.to_big % N.to_big\nk_inv = Curve.mod_inv(k, N)\ns = ((hash + (r * priv)) * k_inv.to_big) % N.to_big\nx_mag = point.x.to_big > N.to_big\ny_parity = (point.y.to_big % 2) == 0\nrec_id : Int8 = -1\nif (!y_parity) && x_mag\n  rec_id = 3\nelse\n  if y_parity && x_mag\n    rec_id = 2\n  else\n    if (!y_parity) && (!x_mag)\n      rec_id = 1\n    else\n      rec_id = 0\n    end\n  end\nend\nr = Num.new(r)\ns = Num.new(s)\nv = Num.new(BigInt.new(rec_id))\nSignature.new(r, s, v)\n"}},{"html_id":"verify(sig:Signature,hash:Num,publ:Point):Bool-instance-method","name":"verify","doc":"Verifies that a given signature for a given message hash matches\nthe provided public key.\n\nParameters:\n* `sig` (`Signature`): the signature to be verified.\n* `hash` (`Num`): the message or arbirtrary data hash.\n* `publ` (`Point`): the public key to match.\n\nReturns _true_ if the signature verifies.\n\n```\nctx = Context.new\nr = Num.new \"c4079db44240b7afe94985c69fc89602e33629fd9b8623d711c30ce6378b33df\"\ns = Num.new \"6842c1b63c94bdb8e4f5ae88fb65f7a98b77b197c8323004fb47ef57fab29053\"\nv = Num.new \"00\"\nsig = Signature.new r, s, v\nhash = Util.sha256 \"Henlo, Wordl\"\npubl = Point.new \"0416008a369439f1a8a75cf974860bed5b10180518d6b1dd3ac847f423fd375d6aa29474394f0cd79d2ea543507d069e97339284f01bdbfd27392daec0ec553816\"\nctx.verify sig, hash, publ\n# => true\n```","summary":"<p>Verifies that a given signature for a given message hash matches the provided public key.</p>","abstract":false,"args":[{"name":"sig","external_name":"sig","restriction":"Signature"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"publ","external_name":"publ","restriction":"Point"}],"args_string":"(sig : Signature, hash : Num, publ : Point) : Bool","args_html":"(sig : <a href=\"../Secp256k1/Signature.html\">Signature</a>, hash : <a href=\"../Secp256k1/Num.html\">Num</a>, publ : <a href=\"../Secp256k1/Point.html\">Point</a>) : Bool","location":{"filename":"src/secp256k1/context.cr","line_number":97,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/context.cr#L97"},"def":{"name":"verify","args":[{"name":"sig","external_name":"sig","restriction":"Signature"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"publ","external_name":"publ","restriction":"Point"}],"return_type":"Bool","visibility":"Public","body":"s_inv = Curve.mod_inv(sig.s, N)\np0 = Curve.mul(G, (hash.to_big * s_inv.to_big) % N.to_big)\np1 = Curve.mul(publ, (sig.r.to_big * s_inv.to_big) % N.to_big)\np = Curve.add(p0, p1)\nsig.r.to_big === p.x.to_big\n"}}]},{"html_id":"secp256k1/Secp256k1/Curve","path":"Secp256k1/Curve.html","kind":"module","full_name":"Secp256k1::Curve","name":"Curve","abstract":false,"locations":[{"filename":"src/secp256k1/curve.cr","line_number":18,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/curve.cr#L18"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"secp256k1/Secp256k1/Curve","kind":"module","full_name":"Secp256k1::Curve","name":"Curve"}],"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Implements 256-bit `Secp256k1` Koblitz elliptic curve operations.\n\nRef: [secg.org/sec2-v2.pdf](https://www.secg.org/sec2-v2.pdf)","summary":"<p>Implements 256-bit <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> Koblitz elliptic curve operations.</p>","instance_methods":[{"html_id":"add(p:Point,q:Point,prime=P):Point-instance-method","name":"add","doc":"Computes the elliptic curve jive addition of point `p(x, y)` and `q(x, y)`.\nIt _draws_ a line between `p` and `q` which will intersect the\ncurve in the point `r` which will be mirrored over the `x`-axis.\n\nParamters:\n* `p` (`Num`): the point `p(x, y)` to be used in the jive addition.\n* `q` (`Num`): the point `q(x, y)` to be used in the jive addition.\n* `prime` (`Num`): the prime number that shapes the field (default `P`).\n\nReturns a `Point` containing the result of the intersection.\n```\np = Point.new Num.new \"5cb1eec17e38b004a8fd90fa8e423432430f60d76c30bb33f4091243c029e86d\"\nq = Point.new Num.new \"7e17f60baa7b8dc8581a55f7be1ea263c6a88452cf3f0a3f710651767654946c\"\nCurve.add p, q\n# => #<Secp256k1::Point:0x7f9cb270f5e0\n#          @x=#<Secp256k1::Num:0x7f9cb26e8580\n#              @hex=\"462691876380f2b744fbeaac38c69b61f6fc0c09c88161d95a6c121ff939a62b\",\n#              @dec=31730043992582273538171659139596419882010265215932424156945250658252958049835,\n#              @bin=Bytes[70, 38, 145, 135, 99, 128, 242, 183, 68, 251, 234, 172, 56, 198, 155, 97, 246, 252, 12, 9, 200, 129, 97, 217, 90, 108, 18, 31, 249, 57, 166, 43]>,\n#          @y=#<Secp256k1::Num:0x7f9cb26e8540\n#              @hex=\"5ab931d6727872d33ea0491705680f5fbcb7409ba80541470673c4fce4dfeea4\",\n#              @dec=41035367046532706466310839850976742216202985567094126989716802462994340507300,\n#              @bin=Bytes[90, 185, 49, 214, 114, 120, 114, 211, 62, 160, 73, 23, 5, 104, 15, 95, 188, 183, 64, 155, 168, 5, 65, 71, 6, 115, 196, 252, 228, 223, 238, 164]>>\n```","summary":"<p>Computes the elliptic curve jive addition of point <code>p(x, y)</code> and <code>q(x, y)</code>.</p>","abstract":false,"args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"q","external_name":"q","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"args_string":"(p : Point, q : Point, prime = P) : Point","args_html":"(p : <a href=\"../Secp256k1/Point.html\">Point</a>, q : <a href=\"../Secp256k1/Point.html\">Point</a>, prime = <span class=\"t\">P</span>) : <a href=\"../Secp256k1/Point.html\">Point</a>","location":{"filename":"src/secp256k1/curve.cr","line_number":82,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/curve.cr#L82"},"def":{"name":"add","args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"q","external_name":"q","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"return_type":"Point","visibility":"Public","body":"if prime.is_a?(Num)\n  prime = prime.to_big\nend\np_x = p.x.to_big\np_y = p.y.to_big\nq_x = q.x.to_big\nq_y = q.y.to_big\nx_delta = q_x - p_x\nx_inv = mod_inv(x_delta)\ny_delta = q_y - p_y\nm = (y_delta * x_inv.to_big) % prime\nx = (((m * m) - p_x) - q_x) % prime\ny = ((m * (p_x - x)) - p_y) % prime\nx = Num.new(x)\ny = Num.new(y)\nPoint.new(x, y)\n"}},{"html_id":"double(p:Point,prime=P):Point-instance-method","name":"double","doc":"Computes the elliptic curve juke point doubling of `p(x, y)`.\nThis is a special case of addition where both points are the same.\nIt _draws_ a tangent line at `p` which will intersect the curve\nat point `r` which will be mirrored over the `x`-axis.\n\nParamters:\n* `p` (`Point`): the point `p(x, y)` to be used in the juke doubling.\n* `prime` (`Num`): the prime number that shapes the field (default `P`).\n\nReturns a `Point` as a result of the intersection.\n\n```\np = Point.new Num.new \"5cb1eec17e38b004a8fd90fa8e423432430f60d76c30bb33f4091243c029e86d\"\nCurve.double p\n# => #<Secp256k1::Point:0x7f58a244e860\n#          @x=#<Secp256k1::Num:0x7f58a240fdc0\n#              @hex=\"a4a5f515981b6375a8f95c60607ca5ad5fee99bfc1615dabc9340f67e71bbfd0\",\n#              @dec=74472528443376700120710890798997658581940283975604946405194317381666873262032,\n#              @bin=Bytes[164, 165, 245, 21, 152, 27, 99, 117, 168, 249, 92, 96, 96, 124, 165, 173, 95, 238, 153, 191, 193, 97, 93, 171, 201, 52, 15, 103, 231, 27, 191, 208]>,\n#          @y=#<Secp256k1::Num:0x7f58a240fd80\n#              @hex=\"0fa62813ae49d71dd3a19fbd17516e7e9dcdd5753d69cb13d87051d8d327253c\",\n#              @dec=7078265941949780810129057229376739925018916922271301049726817038887681467708,\n#              @bin=Bytes[15, 166, 40, 19, 174, 73, 215, 29, 211, 161, 159, 189, 23, 81, 110, 126, 157, 205, 213, 117, 61, 105, 203, 19, 216, 112, 81, 216, 211, 39, 37, 60]>>\n```","summary":"<p>Computes the elliptic curve juke point doubling of <code>p(x, y)</code>.</p>","abstract":false,"args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"args_string":"(p : Point, prime = P) : Point","args_html":"(p : <a href=\"../Secp256k1/Point.html\">Point</a>, prime = <span class=\"t\">P</span>) : <a href=\"../Secp256k1/Point.html\">Point</a>","location":{"filename":"src/secp256k1/curve.cr","line_number":123,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/curve.cr#L123"},"def":{"name":"double","args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"return_type":"Point","visibility":"Public","body":"if prime.is_a?(Num)\n  prime = prime.to_big\nend\np_x = p.x.to_big\np_y = p.y.to_big\nlam_numer = (3 * p_x) * p_x\nlam_denom = 2 * p_y\nlam_inv = mod_inv(Num.new(lam_denom))\nlam = (lam_numer * lam_inv.to_big) % prime\nx = ((lam * lam) - (2 * p_x)) % prime\ny = ((lam * (p_x - x)) - p_y) % prime\nx = Num.new(x)\ny = Num.new(y)\nPoint.new(x, y)\n"}},{"html_id":"mod_inv(a:Num|BigInt,prime=P):Num-instance-method","name":"mod_inv","doc":"Computes the elliptic curve modular multiplicative inverse of `a`.\n\nParemeters:\n* `a` (`Num | BigInt`): the integer that we want the modular inverse of.\n* `prime` (`Num`): the prime number that shapes the field (default `P`).\n\nReturns a `Num` containing the mod inverse.\n\n```\na = Num.new \"ea678c668356d16d8bf5c69f95c1055e39bd24174605f64846e27c3ae6a88d81\"\nCurve.mod_inv a\n# => #<Secp256k1::Num:0x7fe839493480\n#          @hex=\"2901bbb12fcb64e9887e699e69e6b0b3811db18f6b4f94dfb26084e5cb38cac7\",\n#          @dec=18547889042489459453149555262266367802647896593999507743600711803155665963719,\n#          @bin=Bytes[41, 1, 187, 177, 47, 203, 100, 233, 136, 126, 105, 158, 105, 230, 176, 179, 129, 29, 177, 143, 107, 79, 148, 223, 178, 96, 132, 229, 203, 56, 202, 199]>\n```","summary":"<p>Computes the elliptic curve modular multiplicative inverse of <code>a</code>.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Num | BigInt"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"args_string":"(a : Num | BigInt, prime = P) : Num","args_html":"(a : <a href=\"../Secp256k1/Num.html\">Num</a> | BigInt, prime = <span class=\"t\">P</span>) : <a href=\"../Secp256k1/Num.html\">Num</a>","location":{"filename":"src/secp256k1/curve.cr","line_number":37,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/curve.cr#L37"},"def":{"name":"mod_inv","args":[{"name":"a","external_name":"a","restriction":"Num | BigInt"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"return_type":"Num","visibility":"Public","body":"if a.is_a?(Num)\n  a = a.to_big\nend\nif prime.is_a?(Num)\n  prime = prime.to_big\nend\nm_low = 1\nm_high = 0\nv_low = a % prime\nv_high = prime\nwhile v_low > 1\n  v_ratio = v_high // v_low\n  m_low_r = m_low * v_ratio\n  v_low_r = v_low * v_ratio\n  m = m_high - m_low_r\n  v = v_high - v_low_r\n  m_high = m_low\n  v_high = v_low\n  m_low = m\n  v_low = v\nend\nNum.new(m_low % prime)\n"}},{"html_id":"mul(p:Point,s:Num|BigInt):Point-instance-method","name":"mul","doc":"Computes the elliptic curve sequence multiplication of point `p(x, y)`\nand a skalar `s`; with `s` being a private key within the elliptic\ncurve field size of `N`.\n\nParamters:\n* `p` (`Point`): the point `p(x, y)` to be used in the sequencing.\n* `s` (`Num | BigInt`): a skalar, in most cases a private key.\n\nReturns a `Point` as a result of the multiplication.\n\n```\np = Point.new Num.new \"5cb1eec17e38b004a8fd90fa8e423432430f60d76c30bb33f4091243c029e86d\"\ns = Num.new \"f51ad125548b7a283ebf15ab830a25c850d4d863078c48cc9993b79ee18ee11e\"\nCurve.mul p, s\n# => #<Secp256k1::Point:0x7f4b6f6da940\n#          @x=#<Secp256k1::Num:0x7f4b6f6cef00\n#              @hex=\"748f267620fa2cbf67c925db79a9bef6f9025e642d9c15c1d34b4961471636b5\",\n#              @dec=52721215017030004050607035413180757873535914286730888523429593251155658815157,\n#              @bin=Bytes[116, 143, 38, 118, 32, 250, 44, 191, 103, 201, 37, 219, 121, 169, 190, 246, 249, 2, 94, 100, 45, 156, 21, 193, 211, 75, 73, 97, 71, 22, 54, 181]>,\n#          @y=#<Secp256k1::Num:0x7f4b6f6cee00\n#              @hex=\"73832331979d89d395912061e341f8468cfb3e619da06a057e4a5ca95bb95e77\",\n#              @dec=52247677450688090944696492452353217603423545532791062178926183551888078233207,\n#              @bin=Bytes[115, 131, 35, 49, 151, 157, 137, 211, 149, 145, 32, 97, 227, 65, 248, 70, 140, 251, 62, 97, 157, 160, 106, 5, 126, 74, 92, 169, 91, 185, 94, 119]>>\n```","summary":"<p>Computes the elliptic curve sequence multiplication of point <code>p(x, y)</code> and a skalar <code>s</code>; with <code>s</code> being a private key within the elliptic curve field size of <code>N</code>.</p>","abstract":false,"args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"s","external_name":"s","restriction":"Num | BigInt"}],"args_string":"(p : Point, s : Num | BigInt) : Point","args_html":"(p : <a href=\"../Secp256k1/Point.html\">Point</a>, s : <a href=\"../Secp256k1/Num.html\">Num</a> | BigInt) : <a href=\"../Secp256k1/Point.html\">Point</a>","location":{"filename":"src/secp256k1/curve.cr","line_number":162,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/curve.cr#L162"},"def":{"name":"mul","args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"s","external_name":"s","restriction":"Num | BigInt"}],"return_type":"Point","visibility":"Public","body":"if s.is_a?(Num)\n  s = s.to_big\nend\nif (s === 0) || s >= N.to_big\n  raise(\"Invalid scalar: outside of Secp256k1 field dimension.\")\nend\ns_bin = s.to_s(2)\nq = p\ns_bin.each_char_with_index do |char, index|\n  if index === 0\n    next\n  end\n  q = double(q)\n  if char === '1'\n    q = add(q, p)\n  end\nend\nq\n"}}]},{"html_id":"secp256k1/Secp256k1/Key","path":"Secp256k1/Key.html","kind":"class","full_name":"Secp256k1::Key","name":"Key","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/key.cr","line_number":21,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L21"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Provides a `Secp256k1` keypair containing a secret number (private key)\nand a public point on the elliptic curve (public key).\n\nProperties:\n* `private_key` (`Num`): the secret number representing the private key.\n* `public_key` (`Point`): the point on the elliptic curve representing the public key.","summary":"<p>Provides a <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> keypair containing a secret number (private key) and a public point on the elliptic curve (public key).</p>","constructors":[{"html_id":"new(priv:Num)-class-method","name":"new","doc":"Creates a public-private keypair from an existing private key.\n\nParameters:\n* `priv` (`Num`): the private key for the keypair.\n\n```\npriv = Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\"\nKey.new priv\n# => #<Secp256k1::Key:0x7fc6b2f54ee0\n#          @private_key=#<Secp256k1::Num:0x7fad7235d300\n#              @hex=\"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\",\n#              @dec=27505422793993207218034260454067205887515304192802142316084292370834437241648,\n#              @bin=Bytes[60, 207, 132, 130, 12, 32, 213, 232, 197, 54, 186, 132, 197, 43, 164, 16, 55, 91, 41, 177, 129, 43, 95, 126, 114, 36, 69, 201, 105, 160, 251, 48]>,\n#          @public_key=#<Secp256k1::Point:0x7fad7235ad20\n#              @x=#<Secp256k1::Num:0x7fad69294ec0\n#                  @hex=\"cd4a8712ee6efc15b5abe37c0dbfa979d89c427d3fe24b076008decefe94dba2\",\n#                  @dec=92855812888509048668847240903552964511053624688683992093822247249407942908834,\n#                  @bin=Bytes[205, 74, 135, 18, 238, 110, 252, 21, 181, 171, 227, 124, 13, 191, 169, 121, 216, 156, 66, 125, 63, 226, 75, 7, 96, 8, 222, 206, 254, 148, 219, 162]>,\n#              @y=#<Secp256k1::Num:0x7fad69294e80\n#                  @hex=\"81363d298e4a40ebcb13f1afa85a0b94b967f243ee59a59010cb5deaf0d7b66c\",\n#                  @dec=58444189335609256006902338825877424261513225250255958585656342678587884156524,\n#                  @bin=Bytes[129, 54, 61, 41, 142, 74, 64, 235, 203, 19, 241, 175, 168, 90, 11, 148, 185, 103, 242, 67, 238, 89, 165, 144, 16, 203, 93, 234, 240, 215, 182, 108]>>>\n```","summary":"<p>Creates a public-private keypair from an existing private key.</p>","abstract":false,"args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"args_string":"(priv : Num)","args_html":"(priv : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/key.cr","line_number":74,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L74"},"def":{"name":"new","args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(priv)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","doc":"Creates a new, random `Secp256k1` keypair.\n\n```\nKey.new\n# => #<Secp256k1::Key:0x7fad7235aee0\n#          @private_key=#<Secp256k1::Num:0x7fad7235d300\n#              @hex=\"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\",\n#              @dec=27505422793993207218034260454067205887515304192802142316084292370834437241648,\n#              @bin=Bytes[60, 207, 132, 130, 12, 32, 213, 232, 197, 54, 186, 132, 197, 43, 164, 16, 55, 91, 41, 177, 129, 43, 95, 126, 114, 36, 69, 201, 105, 160, 251, 48]>,\n#          @public_key=#<Secp256k1::Point:0x7fad7235ad20\n#              @x=#<Secp256k1::Num:0x7fad69294ec0\n#                  @hex=\"cd4a8712ee6efc15b5abe37c0dbfa979d89c427d3fe24b076008decefe94dba2\",\n#                  @dec=92855812888509048668847240903552964511053624688683992093822247249407942908834,\n#                  @bin=Bytes[205, 74, 135, 18, 238, 110, 252, 21, 181, 171, 227, 124, 13, 191, 169, 121, 216, 156, 66, 125, 63, 226, 75, 7, 96, 8, 222, 206, 254, 148, 219, 162]>,\n#              @y=#<Secp256k1::Num:0x7fad69294e80\n#                  @hex=\"81363d298e4a40ebcb13f1afa85a0b94b967f243ee59a59010cb5deaf0d7b66c\",\n#                  @dec=58444189335609256006902338825877424261513225250255958585656342678587884156524,\n#                  @bin=Bytes[129, 54, 61, 41, 142, 74, 64, 235, 203, 19, 241, 175, 168, 90, 11, 148, 185, 103, 242, 67, 238, 89, 165, 144, 16, 203, 93, 234, 240, 215, 182, 108]>>>\n```","summary":"<p>Creates a new, random <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> keypair.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":46,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L46"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"private_bytes:Bytes-instance-method","name":"private_bytes","doc":"Returns the private key as binary byte slice.\n\n```\nKey.new(Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\").private_bytes\n# => Bytes[60, 207, 132, 130, 12, 32, 213, 232, 197, 54, 186, 132, 197, 43, 164, 16, 55, 91, 41, 177, 129, 43, 95, 126, 114, 36, 69, 201, 105, 160, 251, 48]\n```","summary":"<p>Returns the private key as binary byte slice.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":95,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L95"},"def":{"name":"private_bytes","return_type":"Bytes","visibility":"Public","body":"@private_key.to_zpadded_bytes"}},{"html_id":"private_hex:String-instance-method","name":"private_hex","doc":"Returns the private key as hexadecimal string literal.\n\n```\nKey.new(Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\").private_hex\n# => \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\"\n```","summary":"<p>Returns the private key as hexadecimal string literal.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":85,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L85"},"def":{"name":"private_hex","return_type":"String","visibility":"Public","body":"@private_key.to_zpadded_hex"}},{"html_id":"private_key:Num-instance-method","name":"private_key","doc":"The secret number representing the private key.","summary":"<p>The secret number representing the private key.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":23,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L23"},"def":{"name":"private_key","return_type":"Num","visibility":"Public","body":"@private_key"}},{"html_id":"public_bytes:Bytes-instance-method","name":"public_bytes","doc":"Returns the public key as uncompressed, binary byte slice.\n\n```\nKey.new(Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\").public_bytes\n# => Bytes[4, 205, 74, 135, 18, 238, 110, 252, 21, 181, 171, 227, 124, 13, 191, 169, 121, 216, 156, 66, 125, 63, 226, 75, 7, 96, 8, 222, 206, 254, 148, 219, 162, 129, 54, 61, 41, 142, 74, 64, 235, 203, 19, 241, 175, 168, 90, 11, 148, 185, 103, 242, 67, 238, 89, 165, 144, 16, 203, 93, 234, 240, 215, 182, 108]\n```","summary":"<p>Returns the public key as uncompressed, binary byte slice.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":125,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L125"},"def":{"name":"public_bytes","return_type":"Bytes","visibility":"Public","body":"(Num.new(@public_key.uncompressed)).to_bytes"}},{"html_id":"public_bytes_compressed:Bytes-instance-method","name":"public_bytes_compressed","doc":"Returns the public key as compressed, binary byte slice.\n\n```\nKey.new(Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\").public_bytes_compressed\n# => Bytes[2, 205, 74, 135, 18, 238, 110, 252, 21, 181, 171, 227, 124, 13, 191, 169, 121, 216, 156, 66, 125, 63, 226, 75, 7, 96, 8, 222, 206, 254, 148, 219, 162]\n```","summary":"<p>Returns the public key as compressed, binary byte slice.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":135,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L135"},"def":{"name":"public_bytes_compressed","return_type":"Bytes","visibility":"Public","body":"(Num.new(@public_key.compressed)).to_bytes"}},{"html_id":"public_hex:String-instance-method","name":"public_hex","doc":"Returns the public key as uncompressed, hexadecimal string literal.\n\n```\nKey.new(Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\").public_hex\n# => \"04cd4a8712ee6efc15b5abe37c0dbfa979d89c427d3fe24b076008decefe94dba281363d298e4a40ebcb13f1afa85a0b94b967f243ee59a59010cb5deaf0d7b66c\"\n```","summary":"<p>Returns the public key as uncompressed, hexadecimal string literal.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":105,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L105"},"def":{"name":"public_hex","return_type":"String","visibility":"Public","body":"@public_key.uncompressed"}},{"html_id":"public_hex_compressed:String-instance-method","name":"public_hex_compressed","doc":"Returns the public key as compressed, hexadecimal string literal.\n\n```\nKey.new(Num.new \"3ccf84820c20d5e8c536ba84c52ba410375b29b1812b5f7e722445c969a0fb30\").public_hex_compressed\n# => \"02cd4a8712ee6efc15b5abe37c0dbfa979d89c427d3fe24b076008decefe94dba2\"\n```","summary":"<p>Returns the public key as compressed, hexadecimal string literal.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":115,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L115"},"def":{"name":"public_hex_compressed","return_type":"String","visibility":"Public","body":"@public_key.compressed"}},{"html_id":"public_key:Point-instance-method","name":"public_key","doc":"The point on the elliptic curve representing the public key.","summary":"<p>The point on the elliptic curve representing the public key.</p>","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":25,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/key.cr#L25"},"def":{"name":"public_key","return_type":"Point","visibility":"Public","body":"@public_key"}}]},{"html_id":"secp256k1/Secp256k1/Num","path":"Secp256k1/Num.html","kind":"class","full_name":"Secp256k1::Num","name":"Num","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/num.cr","line_number":25,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L25"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Provides a class to conveniently handle big numbers on the elliptic\ncurve. It allows to easily access decimal, hexadecimal, and binary\nrepresentations of the numeric. In addition, it implements some\nutilities such as zpadding or asserting hexadecimal strings. It's suited\nto temporarily handle unencrypted private keys.\n\nProperties:\n* `hex` (`String`): the hexadecimal string representation of the number.\n* `dec` (`BigInt`): the decimal big-integer representation of the number.\n* `bin` (`Bytes`): the binary bytes-slice represenation of the number.","summary":"<p>Provides a class to conveniently handle big numbers on the elliptic curve.</p>","constructors":[{"html_id":"new(hex:String)-class-method","name":"new","doc":"Creates a number from a hexadecimal string literal.\n\nParameters:\n* `hex` (`String`): a hexadecimal string representating the number.\n\n```\nNum.new \"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\"\n# => #<Secp256k1::Num:0x7fb934585480\n#          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\",\n#          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,\n#          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>\n```","summary":"<p>Creates a number from a hexadecimal string literal.</p>","abstract":false,"args":[{"name":"hex","external_name":"hex","restriction":"String"}],"args_string":"(hex : String)","args_html":"(hex : String)","location":{"filename":"src/secp256k1/num.cr","line_number":67,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L67"},"def":{"name":"new","args":[{"name":"hex","external_name":"hex","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(hex)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(num:BigInt)-class-method","name":"new","doc":"Creates a number from a big integer numeric.\n\nParameters:\n* `dec` (`BigInt`): the decimal big-integer representating the number.\n\n```\nNum.new BigInt.new \"39142835565766237398843902819171565157710677457569850027793715608438337348717\"\n# => #<Secp256k1::Num:0x7fb934585480\n#          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\",\n#          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,\n#          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>\n```","summary":"<p>Creates a number from a big integer numeric.</p>","abstract":false,"args":[{"name":"num","external_name":"num","restriction":"BigInt"}],"args_string":"(num : BigInt)","args_html":"(num : BigInt)","location":{"filename":"src/secp256k1/num.cr","line_number":87,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L87"},"def":{"name":"new","args":[{"name":"num","external_name":"num","restriction":"BigInt"}],"visibility":"Public","body":"_ = allocate\n_.initialize(num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(bin:Slice(UInt8))-class-method","name":"new","doc":"Creates a number from a binary bytes slice.\n\nParameters:\n* `bin` (`Bytes`): the binary bytes-slice represenating the number.\n\n```\nNum.new Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]\n# => #<Secp256k1::Num:0x7fb934585480\n#          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\",\n#          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,\n#          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>\n```","summary":"<p>Creates a number from a binary bytes slice.</p>","abstract":false,"args":[{"name":"bin","external_name":"bin","restriction":"Slice(UInt8)"}],"args_string":"(bin : Slice(UInt8))","args_html":"(bin : Slice(UInt8))","location":{"filename":"src/secp256k1/num.cr","line_number":107,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L107"},"def":{"name":"new","args":[{"name":"bin","external_name":"bin","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bin)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","doc":"Creates a random number using `Random::Secure` that can be used as\na secret (private key).\n\n```\nNum.new\n# => #<Secp256k1::Num:0x7ff3d98013c0\n#          @hex=\"568a0f505bde902db4a6afd207c794c7845fe7715da5999bb276d453c702a46d\",\n#          @dec=39142835565766237398843902819171565157710677457569850027793715608438337348717,\n#          @bin=Bytes[86, 138, 15, 80, 91, 222, 144, 45, 180, 166, 175, 210, 7, 199, 148, 199, 132, 95, 231, 113, 93, 165, 153, 155, 178, 118, 212, 83, 199, 2, 164, 109]>\n```","summary":"<p>Creates a random number using <code>Random::Secure</code> that can be used as a secret (private key).</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":43,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L43"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bin:Slice(UInt8)-instance-method","name":"bin","doc":"The binary bytes-slice represenation of the number.","summary":"<p>The binary bytes-slice represenation of the number.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":31,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L31"},"def":{"name":"bin","return_type":"Slice(UInt8)","visibility":"Public","body":"@bin"}},{"html_id":"dec:BigInt-instance-method","name":"dec","doc":"The decimal big-integer representation of the number.","summary":"<p>The decimal big-integer representation of the number.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":29,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L29"},"def":{"name":"dec","return_type":"BigInt","visibility":"Public","body":"@dec"}},{"html_id":"hex:String-instance-method","name":"hex","doc":"The hexadecimal string representation of the number.","summary":"<p>The hexadecimal string representation of the number.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":27,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L27"},"def":{"name":"hex","return_type":"String","visibility":"Public","body":"@hex"}},{"html_id":"to_big:BigInt-instance-method","name":"to_big","doc":"Returns a big-integer representation of the number.\n\n```\nNum.new(Bytes[137]).to_big\n# => 137\n```","summary":"<p>Returns a big-integer representation of the number.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":156,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L156"},"def":{"name":"to_big","return_type":"BigInt","visibility":"Public","body":"@dec"}},{"html_id":"to_bytes:Bytes-instance-method","name":"to_bytes","doc":"Returns a binary byte-slice representation of the number.\n\n```\nNum.new(\"0x89\").to_bytes\n# => Bytes[137]\n```","summary":"<p>Returns a binary byte-slice representation of the number.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":166,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L166"},"def":{"name":"to_bytes","return_type":"Bytes","visibility":"Public","body":"@bin"}},{"html_id":"to_hex:String-instance-method","name":"to_hex","doc":"Returns an unprefixed hexadecimal string representation.\n\n```\nNum.new(Bytes[137]).to_hex\n# => \"89\"\n```","summary":"<p>Returns an unprefixed hexadecimal string representation.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":119,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L119"},"def":{"name":"to_hex","return_type":"String","visibility":"Public","body":"@hex"}},{"html_id":"to_prefixed_hex:String-instance-method","name":"to_prefixed_hex","doc":"Returns an `0x`-prefixed hexadecimal string representation.\n\n```\nNum.new(Bytes[137]).to_prefixed_hex\n# => \"0x89\"\n```","summary":"<p>Returns an <code>0x</code>-prefixed hexadecimal string representation.</p>","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":129,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L129"},"def":{"name":"to_prefixed_hex","return_type":"String","visibility":"Public","body":"\"0x#{@hex}\""}},{"html_id":"to_zpadded_bytes(length=32):Bytes-instance-method","name":"to_zpadded_bytes","doc":"Returns a z-padded byte-slice binary representation.\n\nParameters:\n* `length` (`Int`): the byte-size of the final z-padded slice (default `32`).\n\n```\nNum.new(Bytes[137]).to_zpadded_bytes\n# => Bytes[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137]\n```","summary":"<p>Returns a z-padded byte-slice binary representation.</p>","abstract":false,"args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"args_string":"(length = 32) : Bytes","args_html":"(length = <span class=\"n\">32</span>) : Bytes","location":{"filename":"src/secp256k1/num.cr","line_number":179,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L179"},"def":{"name":"to_zpadded_bytes","args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"return_type":"Bytes","visibility":"Public","body":"zpadded_bytes = @bin\nwhile zpadded_bytes.size < length\n  zpadded_bytes = Util.concat_bytes(Bytes[0], zpadded_bytes)\nend\nzpadded_bytes\n"}},{"html_id":"to_zpadded_hex(length=32):String-instance-method","name":"to_zpadded_hex","doc":"Returns a z-padded hexadecimal string representation.\n\nParameters:\n* `length` (`Int`): the byte-size of the final z-padded hex-string (default `32`).\n\n```\nNum.new(Bytes[137]).to_zpadded_hex\n# => \"0000000000000000000000000000000000000000000000000000000000000089\"\n```","summary":"<p>Returns a z-padded hexadecimal string representation.</p>","abstract":false,"args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"args_string":"(length = 32) : String","args_html":"(length = <span class=\"n\">32</span>) : String","location":{"filename":"src/secp256k1/num.cr","line_number":142,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/num.cr#L142"},"def":{"name":"to_zpadded_hex","args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"return_type":"String","visibility":"Public","body":"zpadded_hex = @hex\nwhile zpadded_hex.size < (length * 2)\n  zpadded_hex = \"0#{zpadded_hex}\"\nend\nzpadded_hex\n"}}]},{"html_id":"secp256k1/Secp256k1/Point","path":"Secp256k1/Point.html","kind":"class","full_name":"Secp256k1::Point","name":"Point","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/point.cr","line_number":30,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L30"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Provides a point in the two-dimensional space of any elliptic curve.\nIn most cases, such a point on a given curve represents a public key.\nHowever, for keypairs, a `Key` type shall be used!\n\nProperties:\n* `x` (`Num`): the position on the x-axis.\n* `y` (`Num`): the position on the y-axis.","summary":"<p>Provides a point in the two-dimensional space of any elliptic curve.</p>","constructors":[{"html_id":"new(x:Num,y:Num)-class-method","name":"new","doc":"Provides a public point in the two-dimensional space on the given `Secp256k1`\nelliptic curve by passing the x- and y-coordinates (public key).\n\nParameters:\n* `x` (`Num`): the position on the x-axis.\n* `y` (`Num`): the position on the y-axis.\n\n```\nx = Num.new \"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\"\ny = Num.new \"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\"\nPoint.new x, y\n# => #<Secp256k1::Point:0x7f47952e6f00\n#          @x=#<Secp256k1::Num:0x7f47952e9480\n#              @hex=\"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\",\n#              @dec=108450790312736419148091503336190989867379581793003243037811027177541631669413,\n#              @bin=Bytes[239, 196, 248, 216, 191, 199, 120, 70, 62, 77, 73, 22, 216, 139, 243, 240, 87, 230, 220, 150, 203, 42, 220, 38, 223, 185, 25, 89, 196, 190, 244, 165]>,\n#          @y=#<Secp256k1::Num:0x7f47952e93c0\n#              @hex=\"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\",\n#              @dec=93539716883975436131751270446270238300906572229893209404647676230869395610336,\n#              @bin=Bytes[206, 205, 154, 131, 254, 250, 252, 179, 207, 153, 253, 224, 195, 64, 187, 226, 254, 217, 205, 208, 210, 91, 83, 244, 224, 130, 84, 172, 239, 182, 154, 224]>>\n```","summary":"<p>Provides a public point in the two-dimensional space on the given <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> elliptic curve by passing the x- and y-coordinates (public key).</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Num"},{"name":"y","external_name":"y","restriction":"Num"}],"args_string":"(x : Num, y : Num)","args_html":"(x : <a href=\"../Secp256k1/Num.html\">Num</a>, y : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":58,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L58"},"def":{"name":"new","args":[{"name":"x","external_name":"x","restriction":"Num"},{"name":"y","external_name":"y","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(x, y)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(priv:Num)-class-method","name":"new","doc":"Provides a public point in the two-dimensional space on the given `Secp256k1`\nelliptic curve by passing a random number (private key). Note, that the\nprivate key will be consumed by this constructor and should only be used\nto retrieve a public key. To manage keypairs, use the `Key` type instead.\n\nParameters:\n* `priv` (`Num`): the random number giving access to the point.\n\n```\npriv = Num.new \"e50932676c9901f259659d62f0c56fd899feca3f57ecab147a5ef8a0b59defc3\"\nPoint.new priv\n# => #<Secp256k1::Point:0x7f7377407ee0\n#          @x=#<Secp256k1::Num:0x7f736e341b00\n#              @hex=\"aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\",\n#              @dec=79593639541256659698952500103746656102855706770414568473917856266058507588367,\n#              @bin=Bytes[175, 248, 103, 77, 107, 150, 166, 197, 141, 186, 176, 139, 144, 53, 101, 54, 50, 113, 48, 136, 136, 52, 10, 44, 173, 223, 136, 229, 97, 101, 147, 15]>,\n#          @y=#<Secp256k1::Num:0x7f736e341ac0\n#              @hex=\"21f4c49cfe90da39c254a51b8ee8afcdd8c02dd566f13582c23e104c7ed5936b\",\n#              @dec=15358791661898278541670676806913272995387450360720708081975214114817468371819,\n#              @bin=Bytes[33, 244, 196, 156, 254, 144, 218, 57, 194, 84, 165, 27, 142, 232, 175, 205, 216, 192, 45, 213, 102, 241, 53, 130, 194, 62, 16, 76, 126, 213, 147, 107]>>\n```","summary":"<p>Provides a public point in the two-dimensional space on the given <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> elliptic curve by passing a random number (private key).</p>","abstract":false,"args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"args_string":"(priv : Num)","args_html":"(priv : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":84,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L84"},"def":{"name":"new","args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(priv)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pub:String)-class-method","name":"new","doc":"Provides a public point in the two-dimensional space on the given `Secp256k1`\nelliptic curve by passing a compressed or uncompressed public key.\n\nParameters:\n* `pub` (`String`): the public key string (compressed or uncompressed).\n\n```\npub = \"03aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\"\nPoint.new pub\n# => #<Secp256k1::Point:0x7f3b1b9aaf00\n#          @x=#<Secp256k1::Num:0x7f3b1b9ad380\n#              @hex=\"aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\",\n#              @dec=79593639541256659698952500103746656102855706770414568473917856266058507588367,\n#              @bin=Bytes[175, 248, 103, 77, 107, 150, 166, 197, 141, 186, 176, 139, 144, 53, 101, 54, 50, 113, 48, 136, 136, 52, 10, 44, 173, 223, 136, 229, 97, 101, 147, 15]>,\n#          @y=#<Secp256k1::Num:0x7f3b1b9ad340\n#              @hex=\"21f4c49cfe90da39c254a51b8ee8afcdd8c02dd566f13582c23e104c7ed5936b\",\n#              @dec=15358791661898278541670676806913272995387450360720708081975214114817468371819,\n#              @bin=Bytes[33, 244, 196, 156, 254, 144, 218, 57, 194, 84, 165, 27, 142, 232, 175, 205, 216, 192, 45, 213, 102, 241, 53, 130, 194, 62, 16, 76, 126, 213, 147, 107]>>\n```","summary":"<p>Provides a public point in the two-dimensional space on the given <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> elliptic curve by passing a compressed or uncompressed public key.</p>","abstract":false,"args":[{"name":"pub","external_name":"pub","restriction":"String"}],"args_string":"(pub : String)","args_html":"(pub : String)","location":{"filename":"src/secp256k1/point.cr","line_number":109,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L109"},"def":{"name":"new","args":[{"name":"pub","external_name":"pub","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pub)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"compressed:String-instance-method","name":"compressed","doc":"Returns a prefixed, compressed public key string for the given point\nin the format `prefix|x|y`.\n\n```\npriv = Num.new \"e50932676c9901f259659d62f0c56fd899feca3f57ecab147a5ef8a0b59defc3\"\nPoint.new(priv).compressed\n# => \"03aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f\"\n```","summary":"<p>Returns a prefixed, compressed public key string for the given point in the format <code>prefix|x|y</code>.</p>","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":161,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L161"},"def":{"name":"compressed","return_type":"String","visibility":"Public","body":"prefix = 2 + (@y.to_big % 2)\nprefix = \"0#{prefix}\"\n\"#{prefix}#{@x.to_zpadded_hex}\"\n"}},{"html_id":"uncompressed:String-instance-method","name":"uncompressed","doc":"Returns a prefixed, uncompressed public key string for the given point\nin the format `04|x|y`.\n\n```\npriv = Num.new \"e50932676c9901f259659d62f0c56fd899feca3f57ecab147a5ef8a0b59defc3\"\nPoint.new(priv).uncompressed\n# => \"04aff8674d6b96a6c58dbab08b903565363271308888340a2caddf88e56165930f21f4c49cfe90da39c254a51b8ee8afcdd8c02dd566f13582c23e104c7ed5936b\"\n```","summary":"<p>Returns a prefixed, uncompressed public key string for the given point in the format <code>04|x|y</code>.</p>","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":148,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L148"},"def":{"name":"uncompressed","return_type":"String","visibility":"Public","body":"prefix = \"04\"\n\"#{prefix}#{@x.to_zpadded_hex}#{@y.to_zpadded_hex}\"\n"}},{"html_id":"x:Num-instance-method","name":"x","doc":"The position on the x-axis.","summary":"<p>The position on the x-axis.</p>","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":32,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L32"},"def":{"name":"x","return_type":"Num","visibility":"Public","body":"@x"}},{"html_id":"x=(x:Num)-instance-method","name":"x=","doc":"The position on the x-axis.","summary":"<p>The position on the x-axis.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Num"}],"args_string":"(x : Num)","args_html":"(x : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":32,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L32"},"def":{"name":"x=","args":[{"name":"x","external_name":"x","restriction":"Num"}],"visibility":"Public","body":"@x = x"}},{"html_id":"y:Num-instance-method","name":"y","doc":"The position on the y-axis.","summary":"<p>The position on the y-axis.</p>","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":35,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L35"},"def":{"name":"y","return_type":"Num","visibility":"Public","body":"@y"}},{"html_id":"y=(y:Num)-instance-method","name":"y=","doc":"The position on the y-axis.","summary":"<p>The position on the y-axis.</p>","abstract":false,"args":[{"name":"y","external_name":"y","restriction":"Num"}],"args_string":"(y : Num)","args_html":"(y : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":35,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/point.cr#L35"},"def":{"name":"y=","args":[{"name":"y","external_name":"y","restriction":"Num"}],"visibility":"Public","body":"@y = y"}}]},{"html_id":"secp256k1/Secp256k1/Signature","path":"Secp256k1/Signature.html","kind":"class","full_name":"Secp256k1::Signature","name":"Signature","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/signature.cr","line_number":22,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/signature.cr#L22"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Provides an ECDSA Signature containing the random point `r`, the\nsignature proof `s`, and the recovery id or `v` value.\n\nProperties:\n* `r` (`Num`): the `x` coordinate of a random point `R` on the curve.\n* `s` (`Num`): the signature proof of a message.\n* `v` (`Num`): the recovery id or `v` value.","summary":"<p>Provides an ECDSA Signature containing the random point <code><a href=\"../Secp256k1/Signature.html#r%3ANum-instance-method\">#r</a></code>, the signature proof <code><a href=\"../Secp256k1/Signature.html#s%3ANum-instance-method\">#s</a></code>, and the recovery id or <code><a href=\"../Secp256k1/Signature.html#v%3ANum-instance-method\">#v</a></code> value.</p>","constructors":[{"html_id":"new(r:Num,s:Num,v:Num)-class-method","name":"new","doc":"Provides an ECDSA Signature containing the random point `r`, the\nsignature proof `s`, and the recovery id or `v` value.\n\nParameters:\n* `r` (`Num`): the `x` coordinate of a random point `R` on the curve.\n* `s` (`Num`): the signature proof of a message.\n* `v` (`Num`): the recovery id or `v` value.\n\n```\nr = Num.new \"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\"\ns = Num.new \"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\"\nv = Num.new \"00\"\nSignature.new r, s, v\n# => #<Secp256k1::Signature:0x7f67a3f97e40\n#          @r=#<Secp256k1::Num:0x7f67a3f91480\n#              @hex=\"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\",\n#              @dec=108450790312736419148091503336190989867379581793003243037811027177541631669413,\n#              @bin=Bytes[239, 196, 248, 216, 191, 199, 120, 70, 62, 77, 73, 22, 216, 139, 243, 240, 87, 230, 220, 150, 203, 42, 220, 38, 223, 185, 25, 89, 196, 190, 244, 165]>,\n#          @s=#<Secp256k1::Num:0x7f67a3f913c0\n#              @hex=\"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\",\n#              @dec=93539716883975436131751270446270238300906572229893209404647676230869395610336,\n#              @bin=Bytes[206, 205, 154, 131, 254, 250, 252, 179, 207, 153, 253, 224, 195, 64, 187, 226, 254, 217, 205, 208, 210, 91, 83, 244, 224, 130, 84, 172, 239, 182, 154, 224]>,\n#          @v=#<Secp256k1::Num:0x7f67a3f91380\n#              @hex=\"00\",\n#              @dec=0,\n#              @bin=Bytes[0]>>\n```","summary":"<p>Provides an ECDSA Signature containing the random point <code><a href=\"../Secp256k1/Signature.html#r%3ANum-instance-method\">#r</a></code>, the signature proof <code><a href=\"../Secp256k1/Signature.html#s%3ANum-instance-method\">#s</a></code>, and the recovery id or <code><a href=\"../Secp256k1/Signature.html#v%3ANum-instance-method\">#v</a></code> value.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"Num"},{"name":"s","external_name":"s","restriction":"Num"},{"name":"v","external_name":"v","restriction":"Num"}],"args_string":"(r : Num, s : Num, v : Num)","args_html":"(r : <a href=\"../Secp256k1/Num.html\">Num</a>, s : <a href=\"../Secp256k1/Num.html\">Num</a>, v : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/signature.cr","line_number":59,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/signature.cr#L59"},"def":{"name":"new","args":[{"name":"r","external_name":"r","restriction":"Num"},{"name":"s","external_name":"s","restriction":"Num"},{"name":"v","external_name":"v","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(r, s, v)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"compact:String-instance-method","name":"compact","doc":"Returns a compact `String` containing the concatenated signature\nin the form `r|s|v`.\n\n```\nr = Num.new \"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5\"\ns = Num.new \"cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae0\"\nv = Num.new \"00\"\nSignature.new(r, s, v).compact\n# => \"efc4f8d8bfc778463e4d4916d88bf3f057e6dc96cb2adc26dfb91959c4bef4a5cecd9a83fefafcb3cf99fde0c340bbe2fed9cdd0d25b53f4e08254acefb69ae000\"\n```","summary":"<p>Returns a compact <code>String</code> containing the concatenated signature in the form <code>r|s|v</code>.</p>","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":75,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/signature.cr#L75"},"def":{"name":"compact","return_type":"String","visibility":"Public","body":"\"#{r.to_zpadded_hex}#{s.to_zpadded_hex}#{v.to_hex}\""}},{"html_id":"r:Num-instance-method","name":"r","doc":"The `x` coordinate of a random point `R` on the curve.","summary":"<p>The <code>x</code> coordinate of a random point <code>R</code> on the curve.</p>","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":24,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/signature.cr#L24"},"def":{"name":"r","return_type":"Num","visibility":"Public","body":"@r"}},{"html_id":"s:Num-instance-method","name":"s","doc":"The signature proof of a message.","summary":"<p>The signature proof of a message.</p>","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":27,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/signature.cr#L27"},"def":{"name":"s","return_type":"Num","visibility":"Public","body":"@s"}},{"html_id":"v:Num-instance-method","name":"v","doc":"The recovery id or `v` value.","summary":"<p>The recovery id or <code><a href=\"../Secp256k1/Signature.html#v%3ANum-instance-method\">#v</a></code> value.</p>","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":30,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/signature.cr#L30"},"def":{"name":"v","return_type":"Num","visibility":"Public","body":"@v"}}]},{"html_id":"secp256k1/Secp256k1/Util","path":"Secp256k1/Util.html","kind":"module","full_name":"Secp256k1::Util","name":"Util","abstract":false,"locations":[{"filename":"src/secp256k1/util.cr","line_number":17,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L17"}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"secp256k1/Secp256k1/Util","kind":"module","full_name":"Secp256k1::Util","name":"Util"}],"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Provides a collection of utilities for convenience, e.g., to bind\nrelevant hashing algorithms, or to concatenate byte slices.","summary":"<p>Provides a collection of utilities for convenience, e.g., to bind relevant hashing algorithms, or to concatenate byte slices.</p>","instance_methods":[{"html_id":"concat_bytes(x:Bytes,y:Bytes):Bytes-instance-method","name":"concat_bytes","doc":"Concatenates two byte slices in the order provided, i.e., `x|y`.\n\nParameters:\n* `x` (`Bytes`): a byte slice.\n* `y` (`Bytes`): another byte slice.\n\nReturns a concatenated `Bytes` slice.\n\n```\nUtil.concat_bytes Bytes[1, 2, 3], Bytes[9, 8, 7]\n# => Bytes[1, 2, 3, 9, 8, 7]\n```","summary":"<p>Concatenates two byte slices in the order provided, i.e., <code>x|y</code>.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Bytes"},{"name":"y","external_name":"y","restriction":"Bytes"}],"args_string":"(x : Bytes, y : Bytes) : Bytes","args_html":"(x : Bytes, y : Bytes) : Bytes","location":{"filename":"src/secp256k1/util.cr","line_number":177,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L177"},"def":{"name":"concat_bytes","args":[{"name":"x","external_name":"x","restriction":"Bytes"},{"name":"y","external_name":"y","restriction":"Bytes"}],"return_type":"Bytes","visibility":"Public","body":"z = IO::Memory.new(x.bytesize + y.bytesize)\nx.each do |b|\n  z.write_bytes(UInt8.new(b))\nend\ny.each do |b|\n  z.write_bytes(UInt8.new(b))\nend\nreturn z.to_slice\n"}},{"html_id":"deterministic_k(priv:Num,hash:Num,order=N):Num-instance-method","name":"deterministic_k","doc":"Provides a deterministic secret based on private key and message hash\nas defined in RFC-6979.\n\nRef: [datatracker.ietf.org/doc/html/rfc6979](https://datatracker.ietf.org/doc/html/rfc6979)\n\nParameters:\n* `priv` (`Num`): the private key or secret number.\n* `hash` (`Num`): the message hash or arbirtrary data hash.\n* `order` (`Num`): the order of the curve over `G` (default `N`).\n\nReturns a deterministically random number of type `Num`.\n\n```\npriv = Num.new \"3b74fcc0b0c419a00d2d9e88b15fbd99e03920138da22e2a00c327b88d24cf45\"\nhash = Util.sha256 \"Henlo, Wordl\"\nUtil.deterministic_k(priv, hash)\n# => #<Secp256k1::Num:0x7f0eb8447280\n#          @hex=\"b7ede9a5b5b328ac680be6765213c7b5b2920469bdaaf8070c1fb43cb5c440da\",\n#          @dec=83193606619515454920331057246310791124858301167609726617990890481932799590618,\n#          @bin=Bytes[183, 237, 233, 165, 181, 179, 40, 172, 104, 11, 230, 118, 82, 19, 199, 181, 178, 146, 4, 105, 189, 170, 248, 7, 12, 31, 180, 60, 181, 196, 64, 218]>\n```","summary":"<p>Provides a deterministic secret based on private key and message hash as defined in RFC-6979.</p>","abstract":false,"args":[{"name":"priv","external_name":"priv","restriction":"Num"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"order","default_value":"N","external_name":"order","restriction":""}],"args_string":"(priv : Num, hash : Num, order = N) : Num","args_html":"(priv : <a href=\"../Secp256k1/Num.html\">Num</a>, hash : <a href=\"../Secp256k1/Num.html\">Num</a>, order = <span class=\"t\">N</span>) : <a href=\"../Secp256k1/Num.html\">Num</a>","location":{"filename":"src/secp256k1/util.cr","line_number":135,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L135"},"def":{"name":"deterministic_k","args":[{"name":"priv","external_name":"priv","restriction":"Num"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"order","default_value":"N","external_name":"order","restriction":""}],"return_type":"Num","visibility":"Public","body":"order_size = order.hex.size // 2\nv = Num.new(Bytes.new(order_size, 1))\nk = Num.new(Bytes.new(order_size, 0))\nconcat = Util.concat_bytes(v.bin, Bytes[0])\nconcat = Util.concat_bytes(concat, priv.bin)\nconcat = Util.concat_bytes(concat, hash.bin)\nk = OpenSSL::HMAC.digest(:sha256, k.bin, concat)\nv = OpenSSL::HMAC.digest(:sha256, k, v.bin)\nconcat = Util.concat_bytes(v, Bytes[0])\nconcat = Util.concat_bytes(concat, priv.bin)\nconcat = Util.concat_bytes(concat, hash.bin)\nk = OpenSSL::HMAC.digest(:sha256, k, concat)\nv = OpenSSL::HMAC.digest(:sha256, k, v)\nwhile true\n  t = IO::Memory.new.to_slice\n  while t.size < order_size\n    v = OpenSSL::HMAC.digest(:sha256, k, v)\n    t = Util.concat_bytes(t, v)\n  end\n  secret = Num.new(t)\n  if secret.dec < order.dec && secret.dec > 0\n    return secret\n  end\n  increment = Util.concat_bytes(v, Bytes[0])\n  k = OpenSSL::HMAC.digest(:sha256, k, increment)\n  v = OpenSSL::HMAC.digest(:sha256, k, v)\nend\n"}},{"html_id":"keccak(data:Num|Bytes|String,entropy=256):Num-instance-method","name":"keccak","doc":"Operating a Keccak hash on a binary/number or string literal.\n\nParameters:\n* `data` (`Num | Bytes | String`): the binary numeric or string literal to be hashed.\n* `entropy` (`Int32`): the required entropy (default `256`).\n\nReturns a `Num` representing the Keccak hash.\n\n```\nUtil.keccak(Num.new \"0xdeadbeef\").hex\n# => \"d4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1\"\n\nUtil.keccak(\"0xdeadbeef\").hex\n# => \"4f440a001006a49f24a7de53c04eca3f79aef851ac58e460c9630d044277c8b0\"\n```","summary":"<p>Operating a Keccak hash on a binary/number or string literal.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"args_string":"(data : Num | Bytes | String, entropy = 256) : Num","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | Bytes | String, entropy = <span class=\"n\">256</span>) : <a href=\"../Secp256k1/Num.html\">Num</a>","location":{"filename":"src/secp256k1/util.cr","line_number":35,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L35"},"def":{"name":"keccak","args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"return_type":"Num","visibility":"Public","body":"keccak = Digest::Keccak3.new(entropy)\nif data.is_a?(Num)\n  return Num.new((keccak.update(data.to_bytes)).hexdigest)\nelse\n  return Num.new((keccak.update(data)).hexdigest)\nend\n"}},{"html_id":"ripemd160(data:Num|Bytes|String):Num-instance-method","name":"ripemd160","doc":"Operating a RIPEMD-160 hash on a binary/number or string literal.\n\nParameters:\n* `data` (`Num | Bytes | String`): the binary numeric or string literal to be hashed.\n\nReturns a `Num` representing the RIPEMD hash.\n\n```\nUtil.ripemd160(Num.new \"0xdeadbeef\").hex\n# => \"226821c2f5423e11fe9af68bd285c249db2e4b5a\"\n\nUtil.ripemd160(\"0xdeadbeef\").hex\n# => \"4caf817f14e84b564e47afd19966e5d123ee0183\"\n```","summary":"<p>Operating a RIPEMD-160 hash on a binary/number or string literal.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"}],"args_string":"(data : Num | Bytes | String) : Num","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | Bytes | String) : <a href=\"../Secp256k1/Num.html\">Num</a>","location":{"filename":"src/secp256k1/util.cr","line_number":105,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L105"},"def":{"name":"ripemd160","args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"}],"return_type":"Num","visibility":"Public","body":"ripemd = OpenSSL::Digest.new(\"RIPEMD160\")\nif data.is_a?(Num)\n  return Num.new((ripemd.update(data.to_bytes)).final.hexstring)\nelse\n  return Num.new((ripemd.update(data)).final.hexstring)\nend\n"}},{"html_id":"sha256(data:Num|Bytes|String):Num-instance-method","name":"sha256","doc":"Operating a SHA2-256 hash on a binary/number or string literal.\n\nParameters:\n* `data` (`Num | Bytes | String`): the binary numeric or string literal to be hashed.\n\nReturns a `Num` representing the SHA2 hash.\n\n```\nUtil.sha256(Num.new \"0xdeadbeef\").hex\n# => \"5f78c33274e43fa9de5659265c1d917e25c03722dcb0b8d27db8d5feaa813953\"\n\nUtil.sha256(\"0xdeadbeef\").hex\n# => \"4142710b9b4caaeb000b8e5de271bbebac7f509aab2f5e61d1ed1958bfe6d583\"\n```","summary":"<p>Operating a SHA2-256 hash on a binary/number or string literal.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"}],"args_string":"(data : Num | Bytes | String) : Num","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | Bytes | String) : <a href=\"../Secp256k1/Num.html\">Num</a>","location":{"filename":"src/secp256k1/util.cr","line_number":82,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L82"},"def":{"name":"sha256","args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"}],"return_type":"Num","visibility":"Public","body":"sha2 = OpenSSL::Digest.new(\"SHA256\")\nif data.is_a?(Num)\n  return Num.new((sha2.update(data.to_bytes)).final.hexstring)\nelse\n  return Num.new((sha2.update(data)).final.hexstring)\nend\n"}},{"html_id":"sha3(data:Num|Bytes|String,entropy=256):Num-instance-method","name":"sha3","doc":"Operating a SHA3 hash on a binary/number or string literal.\n\nParameters:\n* `data` (`Num | Bytes | String`): the binary numeric or string literal to be hashed.\n* `entropy` (`Int32`): the required entropy (default `256`).\n\nReturns a `Num` representing the SHA3 hash.\n\n```\nUtil.sha3(Num.new \"0xdeadbeef\").hex\n# => \"352b82608dad6c7ac3dd665bc2666e5d97803cb13f23a1109e2105e93f42c448\"\n\nUtil.sha3(\"0xdeadbeef\").hex\n# => \"c12811e13ed75afe3e0945ef34e8a25b9d321a46e131c6463731de25a21b39eb\"\n```","summary":"<p>Operating a SHA3 hash on a binary/number or string literal.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"args_string":"(data : Num | Bytes | String, entropy = 256) : Num","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | Bytes | String, entropy = <span class=\"n\">256</span>) : <a href=\"../Secp256k1/Num.html\">Num</a>","location":{"filename":"src/secp256k1/util.cr","line_number":59,"url":"https://github.com/q9f/secp256k1.cr/blob/v0.5.0/src/secp256k1/util.cr#L59"},"def":{"name":"sha3","args":[{"name":"data","external_name":"data","restriction":"Num | Bytes | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"return_type":"Num","visibility":"Public","body":"sha3 = Digest::SHA3.new(entropy)\nif data.is_a?(Num)\n  return Num.new((sha3.update(data.to_bytes)).hexdigest)\nelse\n  return Num.new((sha3.update(data)).hexdigest)\nend\n"}}]}]}]}}