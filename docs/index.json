{"repository_name":"secp256k1","body":"# secp256k1.cr\n\n[![Build Status](https://img.shields.io/github/workflow/status/q9f/secp256k1.cr/Nightly)](https://github.com/q9f/secp256k1.cr/actions)\n[![Code Coverage](https://codecov.io/gh/q9f/secp256k1.cr/branch/main/graph/badge.svg?token=ngxRs9HdJA)](https://codecov.io/gh/q9f/secp256k1.cr)\n[![Documentation](https://img.shields.io/badge/docs-html-black)](https://q9f.github.io/secp256k1.cr/)\n[![Release](https://img.shields.io/github/v/release/q9f/secp256k1.cr?include_prereleases&color=black)](https://github.com/q9f/secp256k1.cr/releases/latest)\n[![Language](https://img.shields.io/github/languages/top/q9f/secp256k1.cr?color=black)](https://github.com/q9f/secp256k1.cr/search?l=crystal)\n[![License](https://img.shields.io/github/license/q9f/secp256k1.cr.svg?color=black)](LICENSE)\n\na native library implementing `secp256k1` purely for the crystal language. `secp256k1` is the elliptic curve used in the public-private-key cryptography required by bitcoin and ethereum.\n\nthis library allows for key generation of:\n* private keys (from secure random within the elliptic curve field size)\n* mini private keys (short 30-char base-56 keys)\n* wallet import format (checksummed base-58 private keys)\n* public keys, prefixed, compressed (from private)\n* public keys, unprefixed and prefixed, uncompressed (from private)\n* conversion between the different public key formats\n\nthis library allows for address generation of:\n* bitcoin address, compressed and uncompressed (from private or public key)\n* any other bitcoin-based address by passing a `version` byte\n* ethereum address, checksummed and unchecksummed (from private or public key)\n* any other ethereum-based address\n\nfurthermore, this library allows for:\n* signing `(r, s)` and verification of arbitrary messages and message-hashes (with key pairs)\n* managing `enode` addresses as per `devp2p` specification for ethereum nodes\n\n# installation\n\nadd the `secp256k1` library to your `shard.yml`\n\n```yaml\ndependencies:\n  secp256k1:\n    github: q9f/secp256k1.cr\n    version: \"~> 0.3\"\n```\n\n# usage\n\n_tl;dr,_ check out [`crystal run ./try.cr`](./try.cr)!\n\n\n```crystal\n# import secp256k1\nrequire \"secp256k1\"\n```\n\nthis library exposes the following modules (in logical order):\n\n* `Secp256k1`: necessary constants and data structures, including:\n  - `Secp256k1::Keypair`: for managing private-public key-pairs\n  - `Secp256k1::ECPoint`: for handling of secp256k1 elliptic curve points (public keys)\n  - `Secp256k1::ECDSASignature`: for secp256k1 ecdsa signatures\n* `Secp256k1::Core`: the entire core mathematics behind the elliptic curve cryptography\n* `Secp256k1::Util`: all tools for the handling of private-public key-pairs\n* `Secp256k1::Hash`: implementation of various hashing algorithms for convenience\n* `Secp256k1::Signature`: allows for signing messages and verifying signatures\n* `Secp256k1::Bitcoin`: for the generation of bitcoin addresses, including:\n  - `Secp256k1::Bitcoin::Account`: for bitcoin account management\n* `Secp256k1::Ethereum`: for the generation of ethereum addresses, including\n  - `Secp256k1::Ethereum::Account`: for ethereum account management\n  - `Secp256k1::Ethereum::Enode`: for devp2p enode address management\n\nbasic usage:\n\n```crystal\n# generates a new keypair\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f8be5611d80>\n\n# gets the private key\nkey.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n\n# gets the compressed public key with prefix\ncompressed = Secp256k1::Util.public_key_compressed_prefix key.public_key\n# => \"03e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b\"\n```\n\ngenerate a compressed bitcoin mainnet address:\n\n```crystal\n# generates a new keypair\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f8be5611d80>\n\n# generates a compressed bitcoin account from the keypair\nbtc = Secp256k1::Bitcoin::Account.new key, \"00\", true\n# => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>\n\n# gets the wallet-import format (checksummed private key)\nbtc.wif\n# => \"Kz2grUzxEAxNopiREbNpVbjoitAGQVXnUZY4n8pNdmWdVqub99qu\"\n\n# gets the compressed bitcoin addresss\nbtc.address\n# => \"1Q1zbmPZtS2chwxpviqz6qHgoM8UUuviGN\"\n```\n\ngenerate a checksummed ethereum address:\n\n```crystal\n# generates a new keypair\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f81ef21ad00>\n\n# generates an ethereum account from the keypair\neth = Secp256k1::Ethereum::Account.new key\n# => #<Secp256k1::Ethereum::Account:0x7f81ef1faac0>\n\n# gets the private key\neth.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n\n# gets the ethereum addresss\neth.address\n# => \"0x224008a0F3d3cB989c807F568c7f99Bf451328A6\"\n```\n\n# documentation\n\nthe full library documentation can be found here: [q9f.github.io/secp256k1.cr](https://q9f.github.io/secp256k1.cr/)\n\ngenerate a local copy with:\n\n```\ncrystal docs\n```\n\n# testing\n\nthe library is entirely specified through tests in `./spec`; run:\n\n```bash\ncrystal spec --verbose\n```\n\n# understand\n\nprivate keys are just scalars and public keys are points with `x` and `y` coordinates.\n\nbitcoin public keys can be uncompressed `#{p}#{x}#{y}` or compressed `#{p}#{x}`. both come with a prefix `p` which is useless for uncompressed keys but necessary for compressed keys to recover the `y` coordinate on the `secp256k1` elliptic curve.\n\nethereum public keys are uncompressed `#{x}#{y}` without any prefix. the last 20 bytes slice of the `y` coordinate is actually used as address without any checksum. a checksum was later added in eip-55 using a `keccak256` hash and indicating character capitalization.\n\nneither bitcoin nor ethereum allow for recovering public keys from an address unless there exists a transaction with a valid signature on the blockchain.\n\n# known issues\n\n_note: this library should not be used in production without proper auditing._\n\n* this library is not constant time and might be subject to side-channel attacks. ([#4](https://github.com/q9f/secp256k1.cr/issues/4))\n* this library does unnecessary big-integer math and should someday rather correctly implement the secp256k1 prime field ([#5](https://github.com/q9f/secp256k1.cr/issues/5))\n\nfound another issue? report it: [github.com/q9f/secp256k1.cr/issues](https://github.com/q9f/secp256k1.cr/issues)\n\n# contribute\n\ncreate a pull request, and make sure tests and linter passes.\n\nthis pure crystal implementation is based on the python implementation [wobine/blackboard101](https://github.com/wobine/blackboard101) which is also used as reference to write tests against. it's a complete rewrite of the abandoned [packetzero/bitcoinutils](https://github.com/packetzero/bitcoinutils) for educational purposes.\n\nhonerable mention for the [bitcoin wiki](https://en.bitcoin.it/wiki/Main_Page) and the [ethereum stackexchange](https://ethereum.stackexchange.com/) for providing so many in-depth resources that supported this project in reimplementing everything.\n\nlicense: apache license v2.0\n\ncontributors: [**@q9f**](https://github.com/q9f/), [@cserb](https://github.com/cserb), [MrSorcus](https://github.com/MrSorcus)\n","program":{"html_id":"secp256k1/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"secp256k1","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"secp256k1/Secp256k1","path":"Secp256k1.html","kind":"module","full_name":"Secp256k1","name":"Secp256k1","abstract":false,"locations":[{"filename":"src/secp256k1.cr","line_number":29,"url":null},{"filename":"src/secp256k1/context.cr","line_number":15,"url":null},{"filename":"src/secp256k1/version.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"G","name":"G","value":"Point.new(Num.new(\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"), Num.new(\"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"))"},{"id":"N","name":"N","value":"Num.new(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\")"},{"id":"P","name":"P","value":"Num.new(\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\")"},{"id":"VERSION","name":"VERSION","value":"\"0.5.0\""}],"types":[{"html_id":"secp256k1/Secp256k1/Context","path":"Secp256k1/Context.html","kind":"class","full_name":"Secp256k1::Context","name":"Context","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/context.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"instance_methods":[{"html_id":"deterministic_k(priv:Num,hash:Num,order=N)-instance-method","name":"deterministic_k","abstract":false,"args":[{"name":"priv","external_name":"priv","restriction":"Num"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"order","default_value":"N","external_name":"order","restriction":""}],"args_string":"(priv : Num, hash : Num, order = N)","args_html":"(priv : <a href=\"../Secp256k1/Num.html\">Num</a>, hash : <a href=\"../Secp256k1/Num.html\">Num</a>, order = <span class=\"t\">N</span>)","location":{"filename":"src/secp256k1/context.cr","line_number":50,"url":null},"def":{"name":"deterministic_k","args":[{"name":"priv","external_name":"priv","restriction":"Num"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"order","default_value":"N","external_name":"order","restriction":""}],"visibility":"Public","body":"order_size = order.hex.size // 2\nv = Num.new(Bytes.new(order_size, 1))\nk = Num.new(Bytes.new(order_size, 0))\nconcat = Util.concat_bytes(v.bin, Bytes[0])\nconcat = Util.concat_bytes(concat, priv.bin)\nconcat = Util.concat_bytes(concat, hash.bin)\nk = OpenSSL::HMAC.digest(:sha256, k.bin, concat)\nv = OpenSSL::HMAC.digest(:sha256, k, v.bin)\nconcat = Util.concat_bytes(v, Bytes[0])\nconcat = Util.concat_bytes(concat, priv.bin)\nconcat = Util.concat_bytes(concat, hash.bin)\nk = OpenSSL::HMAC.digest(:sha256, k, concat)\nv = OpenSSL::HMAC.digest(:sha256, k, v)\nwhile true\n  t = IO::Memory.new.to_slice\n  while t.size < order_size\n    v = OpenSSL::HMAC.digest(:sha256, k, v)\n    t = Util.concat_bytes(t, v)\n  end\n  secret = Num.new(t)\n  if secret.dec < order.dec && secret.dec > 0\n    return secret\n  end\n  increment = Util.concat_bytes(v, Bytes[0])\n  k = OpenSSL::HMAC.digest(:sha256, k, increment)\n  v = OpenSSL::HMAC.digest(:sha256, k, v)\nend\n"}},{"html_id":"sign(key:Key,hash:Num)-instance-method","name":"sign","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Key"},{"name":"hash","external_name":"hash","restriction":"Num"}],"args_string":"(key : Key, hash : Num)","args_html":"(key : <a href=\"../Secp256k1/Key.html\">Key</a>, hash : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/context.cr","line_number":16,"url":null},"def":{"name":"sign","args":[{"name":"key","external_name":"key","restriction":"Key"},{"name":"hash","external_name":"hash","restriction":"Num"}],"visibility":"Public","body":"k = deterministic_k(key.private_key, hash)\nhash = hash.to_big\npriv = key.private_key.to_big\npoint = Curve.mul(G, k)\nr = point.x.to_big % N.to_big\nk_inv = Curve.mod_inv(k, N)\ns = ((hash + (r * priv)) * k_inv.to_big) % N.to_big\nx_mag = point.x.to_big > N.to_big\ny_parity = (point.y.to_big % 2) == 0\nrec_id : Int8 = -1\nif (!y_parity) && x_mag\n  rec_id = 3\nelse\n  if y_parity && x_mag\n    rec_id = 2\n  else\n    if (!y_parity) && (!x_mag)\n      rec_id = 1\n    else\n      rec_id = 0\n    end\n  end\nend\nr = Num.new(r)\ns = Num.new(s)\nv = Num.new(BigInt.new(rec_id))\nSignature.new(r, s, v)\n"}},{"html_id":"verify(sig:Signature,hash:Num,publ:Point)-instance-method","name":"verify","abstract":false,"args":[{"name":"sig","external_name":"sig","restriction":"Signature"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"publ","external_name":"publ","restriction":"Point"}],"args_string":"(sig : Signature, hash : Num, publ : Point)","args_html":"(sig : <a href=\"../Secp256k1/Signature.html\">Signature</a>, hash : <a href=\"../Secp256k1/Num.html\">Num</a>, publ : <a href=\"../Secp256k1/Point.html\">Point</a>)","location":{"filename":"src/secp256k1/context.cr","line_number":42,"url":null},"def":{"name":"verify","args":[{"name":"sig","external_name":"sig","restriction":"Signature"},{"name":"hash","external_name":"hash","restriction":"Num"},{"name":"publ","external_name":"publ","restriction":"Point"}],"visibility":"Public","body":"s_inv = Curve.mod_inv(sig.s, N)\np0 = Curve.mul(G, (hash.to_big * s_inv.to_big) % N.to_big)\np1 = Curve.mul(publ, (sig.r.to_big * s_inv.to_big) % N.to_big)\np = Curve.add(p0, p1)\nsig.r.to_big === p.x.to_big\n"}}]},{"html_id":"secp256k1/Secp256k1/Curve","path":"Secp256k1/Curve.html","kind":"module","full_name":"Secp256k1::Curve","name":"Curve","abstract":false,"locations":[{"filename":"src/secp256k1/curve.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"secp256k1/Secp256k1/Curve","kind":"module","full_name":"Secp256k1::Curve","name":"Curve"}],"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"instance_methods":[{"html_id":"add(p:Point,q:Point,prime=P)-instance-method","name":"add","abstract":false,"args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"q","external_name":"q","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"args_string":"(p : Point, q : Point, prime = P)","args_html":"(p : <a href=\"../Secp256k1/Point.html\">Point</a>, q : <a href=\"../Secp256k1/Point.html\">Point</a>, prime = <span class=\"t\">P</span>)","location":{"filename":"src/secp256k1/curve.cr","line_number":42,"url":null},"def":{"name":"add","args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"q","external_name":"q","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"visibility":"Public","body":"if prime.is_a?(Num)\n  prime = prime.to_big\nend\np_x = p.x.to_big\np_y = p.y.to_big\nq_x = q.x.to_big\nq_y = q.y.to_big\nx_delta = q_x - p_x\nx_inv = mod_inv(x_delta)\ny_delta = q_y - p_y\nm = (y_delta * x_inv.to_big) % prime\nx = (((m * m) - p_x) - q_x) % prime\ny = ((m * (p_x - x)) - p_y) % prime\nx = Num.new(x)\ny = Num.new(y)\nPoint.new(x, y)\n"}},{"html_id":"double(p:Point,prime=P)-instance-method","name":"double","abstract":false,"args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"args_string":"(p : Point, prime = P)","args_html":"(p : <a href=\"../Secp256k1/Point.html\">Point</a>, prime = <span class=\"t\">P</span>)","location":{"filename":"src/secp256k1/curve.cr","line_number":59,"url":null},"def":{"name":"double","args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"visibility":"Public","body":"if prime.is_a?(Num)\n  prime = prime.to_big\nend\np_x = p.x.to_big\np_y = p.y.to_big\nlam_numer = (3 * p_x) * p_x\nlam_denom = 2 * p_y\nlam_inv = mod_inv(Num.new(lam_denom))\nlam = (lam_numer * lam_inv.to_big) % prime\nx = ((lam * lam) - (2 * p_x)) % prime\ny = ((lam * (p_x - x)) - p_y) % prime\nx = Num.new(x)\ny = Num.new(y)\nPoint.new(x, y)\n"}},{"html_id":"mod_inv(a:Num|BigInt,prime=P)-instance-method","name":"mod_inv","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Num | BigInt"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"args_string":"(a : Num | BigInt, prime = P)","args_html":"(a : <a href=\"../Secp256k1/Num.html\">Num</a> | BigInt, prime = <span class=\"t\">P</span>)","location":{"filename":"src/secp256k1/curve.cr","line_number":21,"url":null},"def":{"name":"mod_inv","args":[{"name":"a","external_name":"a","restriction":"Num | BigInt"},{"name":"prime","default_value":"P","external_name":"prime","restriction":""}],"visibility":"Public","body":"if a.is_a?(Num)\n  a = a.to_big\nend\nif prime.is_a?(Num)\n  prime = prime.to_big\nend\nm_low = 1\nm_high = 0\nv_low = a % prime\nv_high = prime\nwhile v_low > 1\n  v_ratio = v_high // v_low\n  m_low_r = m_low * v_ratio\n  v_low_r = v_low * v_ratio\n  m = m_high - m_low_r\n  v = v_high - v_low_r\n  m_high = m_low\n  v_high = v_low\n  m_low = m\n  v_low = v\nend\nNum.new(m_low % prime)\n"}},{"html_id":"mul(p:Point,s:Num|BigInt)-instance-method","name":"mul","abstract":false,"args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"s","external_name":"s","restriction":"Num | BigInt"}],"args_string":"(p : Point, s : Num | BigInt)","args_html":"(p : <a href=\"../Secp256k1/Point.html\">Point</a>, s : <a href=\"../Secp256k1/Num.html\">Num</a> | BigInt)","location":{"filename":"src/secp256k1/curve.cr","line_number":74,"url":null},"def":{"name":"mul","args":[{"name":"p","external_name":"p","restriction":"Point"},{"name":"s","external_name":"s","restriction":"Num | BigInt"}],"visibility":"Public","body":"if s.is_a?(Num)\n  s = s.to_big\nend\nif (s === 0) || s >= N.to_big\n  raise(\"Invalid scalar: outside of Secp256k1 field dimension.\")\nend\ns_bin = s.to_s(2)\nq = p\ns_bin.each_char_with_index do |char, index|\n  if index === 0\n    next\n  end\n  q = double(q)\n  if char === '1'\n    q = add(q, p)\n  end\nend\nq\n"}},{"html_id":"sign(hash:Num)-instance-method","name":"sign","abstract":false,"args":[{"name":"hash","external_name":"hash","restriction":"Num"}],"args_string":"(hash : Num)","args_html":"(hash : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/curve.cr","line_number":18,"url":null},"def":{"name":"sign","args":[{"name":"hash","external_name":"hash","restriction":"Num"}],"visibility":"Public","body":""}}]},{"html_id":"secp256k1/Secp256k1/Key","path":"Secp256k1/Key.html","kind":"class","full_name":"Secp256k1::Key","name":"Key","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/key.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"constructors":[{"html_id":"new(priv:Num)-class-method","name":"new","abstract":false,"args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"args_string":"(priv : Num)","args_html":"(priv : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/key.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(priv)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":19,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"private_bytes-instance-method","name":"private_bytes","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":33,"url":null},"def":{"name":"private_bytes","visibility":"Public","body":"@private_key.to_zpadded_bytes"}},{"html_id":"private_hex-instance-method","name":"private_hex","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":29,"url":null},"def":{"name":"private_hex","visibility":"Public","body":"@private_key.to_zpadded_hex"}},{"html_id":"private_key:Num-instance-method","name":"private_key","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":16,"url":null},"def":{"name":"private_key","return_type":"Num","visibility":"Public","body":"@private_key"}},{"html_id":"private_key=(private_key:Num)-instance-method","name":"private_key=","abstract":false,"args":[{"name":"private_key","external_name":"private_key","restriction":"Num"}],"args_string":"(private_key : Num)","args_html":"(private_key : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/key.cr","line_number":16,"url":null},"def":{"name":"private_key=","args":[{"name":"private_key","external_name":"private_key","restriction":"Num"}],"visibility":"Public","body":"@private_key = private_key"}},{"html_id":"public_bytes-instance-method","name":"public_bytes","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":41,"url":null},"def":{"name":"public_bytes","visibility":"Public","body":"(Num.new(@public_key.uncompressed)).to_bytes"}},{"html_id":"public_hex-instance-method","name":"public_hex","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":37,"url":null},"def":{"name":"public_hex","visibility":"Public","body":"@public_key.uncompressed"}},{"html_id":"public_key:Point-instance-method","name":"public_key","abstract":false,"location":{"filename":"src/secp256k1/key.cr","line_number":17,"url":null},"def":{"name":"public_key","return_type":"Point","visibility":"Public","body":"@public_key"}},{"html_id":"public_key=(public_key:Point)-instance-method","name":"public_key=","abstract":false,"args":[{"name":"public_key","external_name":"public_key","restriction":"Point"}],"args_string":"(public_key : Point)","args_html":"(public_key : <a href=\"../Secp256k1/Point.html\">Point</a>)","location":{"filename":"src/secp256k1/key.cr","line_number":17,"url":null},"def":{"name":"public_key=","args":[{"name":"public_key","external_name":"public_key","restriction":"Point"}],"visibility":"Public","body":"@public_key = public_key"}}]},{"html_id":"secp256k1/Secp256k1/Num","path":"Secp256k1/Num.html","kind":"class","full_name":"Secp256k1::Num","name":"Num","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/num.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"constructors":[{"html_id":"new(hex:String)-class-method","name":"new","abstract":false,"args":[{"name":"hex","external_name":"hex","restriction":"String"}],"args_string":"(hex : String)","args_html":"(hex : String)","location":{"filename":"src/secp256k1/num.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"hex","external_name":"hex","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(hex)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(num:BigInt)-class-method","name":"new","abstract":false,"args":[{"name":"num","external_name":"num","restriction":"BigInt"}],"args_string":"(num : BigInt)","args_html":"(num : BigInt)","location":{"filename":"src/secp256k1/num.cr","line_number":40,"url":null},"def":{"name":"new","args":[{"name":"num","external_name":"num","restriction":"BigInt"}],"visibility":"Public","body":"_ = allocate\n_.initialize(num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(bin:Slice(UInt8))-class-method","name":"new","abstract":false,"args":[{"name":"bin","external_name":"bin","restriction":"Slice(UInt8)"}],"args_string":"(bin : Slice(UInt8))","args_html":"(bin : Slice(UInt8))","location":{"filename":"src/secp256k1/num.cr","line_number":48,"url":null},"def":{"name":"new","args":[{"name":"bin","external_name":"bin","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bin)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":20,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bin:Slice(UInt8)-instance-method","name":"bin","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":18,"url":null},"def":{"name":"bin","return_type":"Slice(UInt8)","visibility":"Public","body":"@bin"}},{"html_id":"bin=(bin:Slice(UInt8))-instance-method","name":"bin=","abstract":false,"args":[{"name":"bin","external_name":"bin","restriction":"Slice(UInt8)"}],"args_string":"(bin : Slice(UInt8))","args_html":"(bin : Slice(UInt8))","location":{"filename":"src/secp256k1/num.cr","line_number":18,"url":null},"def":{"name":"bin=","args":[{"name":"bin","external_name":"bin","restriction":"Slice(UInt8)"}],"visibility":"Public","body":"@bin = bin"}},{"html_id":"dec:BigInt-instance-method","name":"dec","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":17,"url":null},"def":{"name":"dec","return_type":"BigInt","visibility":"Public","body":"@dec"}},{"html_id":"dec=(dec:BigInt)-instance-method","name":"dec=","abstract":false,"args":[{"name":"dec","external_name":"dec","restriction":"BigInt"}],"args_string":"(dec : BigInt)","args_html":"(dec : BigInt)","location":{"filename":"src/secp256k1/num.cr","line_number":17,"url":null},"def":{"name":"dec=","args":[{"name":"dec","external_name":"dec","restriction":"BigInt"}],"visibility":"Public","body":"@dec = dec"}},{"html_id":"hex:String-instance-method","name":"hex","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":16,"url":null},"def":{"name":"hex","return_type":"String","visibility":"Public","body":"@hex"}},{"html_id":"hex=(hex:String)-instance-method","name":"hex=","abstract":false,"args":[{"name":"hex","external_name":"hex","restriction":"String"}],"args_string":"(hex : String)","args_html":"(hex : String)","location":{"filename":"src/secp256k1/num.cr","line_number":16,"url":null},"def":{"name":"hex=","args":[{"name":"hex","external_name":"hex","restriction":"String"}],"visibility":"Public","body":"@hex = hex"}},{"html_id":"to_big:BigInt-instance-method","name":"to_big","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":70,"url":null},"def":{"name":"to_big","visibility":"Public","body":"@dec"}},{"html_id":"to_bytes:Slice(UInt8)-instance-method","name":"to_bytes","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":74,"url":null},"def":{"name":"to_bytes","visibility":"Public","body":"@bin"}},{"html_id":"to_hex:String-instance-method","name":"to_hex","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":54,"url":null},"def":{"name":"to_hex","visibility":"Public","body":"@hex"}},{"html_id":"to_prefixed_hex-instance-method","name":"to_prefixed_hex","abstract":false,"location":{"filename":"src/secp256k1/num.cr","line_number":58,"url":null},"def":{"name":"to_prefixed_hex","visibility":"Public","body":"\"0x#{@hex}\""}},{"html_id":"to_zpadded_bytes(length=32)-instance-method","name":"to_zpadded_bytes","abstract":false,"args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"args_string":"(length = 32)","args_html":"(length = <span class=\"n\">32</span>)","location":{"filename":"src/secp256k1/num.cr","line_number":78,"url":null},"def":{"name":"to_zpadded_bytes","args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"visibility":"Public","body":"zpadded_bytes = @bin\nbyte_zero = Bytes[0]\nwhile zpadded_bytes.size < length\n  slice_size = zpadded_bytes.size + 1\n  zpadded_slice = Slice(UInt8).new(slice_size)\n  slice_pointer = zpadded_slice.to_unsafe\n  byte_zero.copy_to(slice_pointer, 0)\n  slice_pointer = slice_pointer + 1\n  zpadded_bytes.copy_to(slice_pointer, zpadded_bytes.size)\n  zpadded_bytes = zpadded_slice\nend\nzpadded_bytes\n"}},{"html_id":"to_zpadded_hex(length=32)-instance-method","name":"to_zpadded_hex","abstract":false,"args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"args_string":"(length = 32)","args_html":"(length = <span class=\"n\">32</span>)","location":{"filename":"src/secp256k1/num.cr","line_number":62,"url":null},"def":{"name":"to_zpadded_hex","args":[{"name":"length","default_value":"32","external_name":"length","restriction":""}],"visibility":"Public","body":"zpadded_hex = @hex\nwhile zpadded_hex.size < (length * 2)\n  zpadded_hex = \"0#{zpadded_hex}\"\nend\nzpadded_hex\n"}}]},{"html_id":"secp256k1/Secp256k1/Point","path":"Secp256k1/Point.html","kind":"class","full_name":"Secp256k1::Point","name":"Point","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/point.cr","line_number":20,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"constructors":[{"html_id":"new(x:Num,y:Num)-class-method","name":"new","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Num"},{"name":"y","external_name":"y","restriction":"Num"}],"args_string":"(x : Num, y : Num)","args_html":"(x : <a href=\"../Secp256k1/Num.html\">Num</a>, y : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"x","external_name":"x","restriction":"Num"},{"name":"y","external_name":"y","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(x, y)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(priv:Num)-class-method","name":"new","abstract":false,"args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"args_string":"(priv : Num)","args_html":"(priv : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"priv","external_name":"priv","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(priv)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pub:String)-class-method","name":"new","abstract":false,"args":[{"name":"pub","external_name":"pub","restriction":"String"}],"args_string":"(pub : String)","args_html":"(pub : String)","location":{"filename":"src/secp256k1/point.cr","line_number":35,"url":null},"def":{"name":"new","args":[{"name":"pub","external_name":"pub","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pub)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"compressed-instance-method","name":"compressed","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":71,"url":null},"def":{"name":"compressed","visibility":"Public","body":"prefix = 2 + (@y.to_big % 2)\nprefix = \"0#{prefix}\"\n\"#{prefix}#{@x.to_zpadded_hex}\"\n"}},{"html_id":"uncompressed-instance-method","name":"uncompressed","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":66,"url":null},"def":{"name":"uncompressed","visibility":"Public","body":"prefix = \"04\"\n\"#{prefix}#{@x.to_zpadded_hex}#{@y.to_zpadded_hex}\"\n"}},{"html_id":"x:Num-instance-method","name":"x","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":21,"url":null},"def":{"name":"x","return_type":"Num","visibility":"Public","body":"@x"}},{"html_id":"x=(x:Num)-instance-method","name":"x=","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Num"}],"args_string":"(x : Num)","args_html":"(x : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":21,"url":null},"def":{"name":"x=","args":[{"name":"x","external_name":"x","restriction":"Num"}],"visibility":"Public","body":"@x = x"}},{"html_id":"y:Num-instance-method","name":"y","abstract":false,"location":{"filename":"src/secp256k1/point.cr","line_number":22,"url":null},"def":{"name":"y","return_type":"Num","visibility":"Public","body":"@y"}},{"html_id":"y=(y:Num)-instance-method","name":"y=","abstract":false,"args":[{"name":"y","external_name":"y","restriction":"Num"}],"args_string":"(y : Num)","args_html":"(y : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/point.cr","line_number":22,"url":null},"def":{"name":"y=","args":[{"name":"y","external_name":"y","restriction":"Num"}],"visibility":"Public","body":"@y = y"}}]},{"html_id":"secp256k1/Secp256k1/Signature","path":"Secp256k1/Signature.html","kind":"class","full_name":"Secp256k1::Signature","name":"Signature","abstract":false,"superclass":{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"secp256k1/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"secp256k1/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/secp256k1/signature.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"constructors":[{"html_id":"new(r:Num,s:Num,v:Num)-class-method","name":"new","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"Num"},{"name":"s","external_name":"s","restriction":"Num"},{"name":"v","external_name":"v","restriction":"Num"}],"args_string":"(r : Num, s : Num, v : Num)","args_html":"(r : <a href=\"../Secp256k1/Num.html\">Num</a>, s : <a href=\"../Secp256k1/Num.html\">Num</a>, v : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/signature.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"r","external_name":"r","restriction":"Num"},{"name":"s","external_name":"s","restriction":"Num"},{"name":"v","external_name":"v","restriction":"Num"}],"visibility":"Public","body":"_ = allocate\n_.initialize(r, s, v)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"compact-instance-method","name":"compact","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":26,"url":null},"def":{"name":"compact","visibility":"Public","body":"\"#{r.to_zpadded_hex}#{s.to_zpadded_hex}#{v.to_hex}\""}},{"html_id":"r:Num-instance-method","name":"r","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":16,"url":null},"def":{"name":"r","return_type":"Num","visibility":"Public","body":"@r"}},{"html_id":"r=(r:Num)-instance-method","name":"r=","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"Num"}],"args_string":"(r : Num)","args_html":"(r : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/signature.cr","line_number":16,"url":null},"def":{"name":"r=","args":[{"name":"r","external_name":"r","restriction":"Num"}],"visibility":"Public","body":"@r = r"}},{"html_id":"s:Num-instance-method","name":"s","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":17,"url":null},"def":{"name":"s","return_type":"Num","visibility":"Public","body":"@s"}},{"html_id":"s=(s:Num)-instance-method","name":"s=","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"Num"}],"args_string":"(s : Num)","args_html":"(s : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/signature.cr","line_number":17,"url":null},"def":{"name":"s=","args":[{"name":"s","external_name":"s","restriction":"Num"}],"visibility":"Public","body":"@s = s"}},{"html_id":"v:Num-instance-method","name":"v","abstract":false,"location":{"filename":"src/secp256k1/signature.cr","line_number":18,"url":null},"def":{"name":"v","return_type":"Num","visibility":"Public","body":"@v"}},{"html_id":"v=(v:Num)-instance-method","name":"v=","abstract":false,"args":[{"name":"v","external_name":"v","restriction":"Num"}],"args_string":"(v : Num)","args_html":"(v : <a href=\"../Secp256k1/Num.html\">Num</a>)","location":{"filename":"src/secp256k1/signature.cr","line_number":18,"url":null},"def":{"name":"v=","args":[{"name":"v","external_name":"v","restriction":"Num"}],"visibility":"Public","body":"@v = v"}}]},{"html_id":"secp256k1/Secp256k1/Util","path":"Secp256k1/Util.html","kind":"module","full_name":"Secp256k1::Util","name":"Util","abstract":false,"locations":[{"filename":"src/secp256k1/util.cr","line_number":15,"url":null}],"repository_name":"secp256k1","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"secp256k1/Secp256k1/Util","kind":"module","full_name":"Secp256k1::Util","name":"Util"}],"namespace":{"html_id":"secp256k1/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"instance_methods":[{"html_id":"concat_bytes(x:Bytes,y:Bytes)-instance-method","name":"concat_bytes","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Bytes"},{"name":"y","external_name":"y","restriction":"Bytes"}],"args_string":"(x : Bytes, y : Bytes)","args_html":"(x : Bytes, y : Bytes)","location":{"filename":"src/secp256k1/util.cr","line_number":54,"url":null},"def":{"name":"concat_bytes","args":[{"name":"x","external_name":"x","restriction":"Bytes"},{"name":"y","external_name":"y","restriction":"Bytes"}],"visibility":"Public","body":"z = IO::Memory.new(x.bytesize + y.bytesize)\nx.each do |b|\n  z.write_bytes(UInt8.new(b))\nend\ny.each do |b|\n  z.write_bytes(UInt8.new(b))\nend\nreturn z.to_slice\n"}},{"html_id":"keccak(data:Num|String,entropy=256)-instance-method","name":"keccak","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"args_string":"(data : Num | String, entropy = 256)","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | String, entropy = <span class=\"n\">256</span>)","location":{"filename":"src/secp256k1/util.cr","line_number":18,"url":null},"def":{"name":"keccak","args":[{"name":"data","external_name":"data","restriction":"Num | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"visibility":"Public","body":"keccak = Digest::Keccak3.new(entropy)\nif data.is_a?(String)\n  return Num.new((keccak.update(data)).hexdigest)\nelse\n  return Num.new((keccak.update(data.to_bytes)).hexdigest)\nend\n"}},{"html_id":"ripemd160(data:Num|String)-instance-method","name":"ripemd160","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | String"}],"args_string":"(data : Num | String)","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | String)","location":{"filename":"src/secp256k1/util.cr","line_number":45,"url":null},"def":{"name":"ripemd160","args":[{"name":"data","external_name":"data","restriction":"Num | String"}],"visibility":"Public","body":"ripemd = OpenSSL::Digest.new(\"RIPEMD160\")\nif data.is_a?(String)\n  return Num.new((ripemd.update(data)).final.hexstring)\nelse\n  return Num.new((ripemd.update(data.to_bytes)).final.hexstring)\nend\n"}},{"html_id":"sha256(data:Num|String)-instance-method","name":"sha256","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | String"}],"args_string":"(data : Num | String)","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | String)","location":{"filename":"src/secp256k1/util.cr","line_number":36,"url":null},"def":{"name":"sha256","args":[{"name":"data","external_name":"data","restriction":"Num | String"}],"visibility":"Public","body":"sha2 = OpenSSL::Digest.new(\"SHA256\")\nif data.is_a?(String)\n  return Num.new((sha2.update(data)).final.hexstring)\nelse\n  return Num.new((sha2.update(data.to_bytes)).final.hexstring)\nend\n"}},{"html_id":"sha3(data:Num|String,entropy=256)-instance-method","name":"sha3","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Num | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"args_string":"(data : Num | String, entropy = 256)","args_html":"(data : <a href=\"../Secp256k1/Num.html\">Num</a> | String, entropy = <span class=\"n\">256</span>)","location":{"filename":"src/secp256k1/util.cr","line_number":27,"url":null},"def":{"name":"sha3","args":[{"name":"data","external_name":"data","restriction":"Num | String"},{"name":"entropy","default_value":"256","external_name":"entropy","restriction":""}],"visibility":"Public","body":"sha3 = Digest::SHA3.new(entropy)\nif data.is_a?(String)\n  return Num.new((sha3.update(data)).hexdigest)\nelse\n  return Num.new((sha3.update(data.to_bytes)).hexdigest)\nend\n"}}]}]}]}}