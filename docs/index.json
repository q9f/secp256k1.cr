{"repository_name":"github.com/q9f/secp256k1.cr","body":"# secp256k1.cr\n\n[![Build Status](https://img.shields.io/github/workflow/status/q9f/secp256k1.cr/Nightly)](https://github.com/q9f/secp256k1.cr/actions)\n[![Documentation](https://img.shields.io/badge/docs-html-black)](https://q9f.github.io/secp256k1.cr/)\n[![Release](https://img.shields.io/github/v/release/q9f/secp256k1.cr?include_prereleases&color=black)](https://github.com/q9f/secp256k1.cr/releases/latest)\n[![Language](https://img.shields.io/github/languages/top/q9f/secp256k1.cr?color=black)](https://github.com/q9f/secp256k1.cr/search?l=crystal)\n[![License](https://img.shields.io/github/license/q9f/secp256k1.cr.svg?color=black)](LICENSE)\n\na native library implementing `secp256k1` purely for the crystal language. `secp256k1` is the elliptic curve used in the public-private-key cryptography required by bitcoin and ethereum.\n\nthis library allows for key generation of:\n* private keys (from secure random within the elliptic curve field size)\n* mini private keys (short 30-char base-56 keys)\n* wallet import format (checksummed base-58 private keys)\n* public keys, prefixed, compressed (from private)\n* public keys, unprefixed and prefixed, uncompressed (from private)\n* conversion between the different public key formats\n\nthis library allows for address generation of:\n* bitcoin address, compressed and uncompressed (from private or public key)\n* any other bitcoin-based address by passing a `version` byte\n* ethereum address, checksummed and unchecksummed (from private or public key)\n* any other ethereum-based address\n\nfurthermore, this library allows for:\n* signing `(r, s)` and verification of arbitrary messages and message-hashes (with key pairs)\n* managing `enode` addresses as per `devp2p` specification for ethereum nodes\n\n# installation\n\nadd the `secp256k1` library to your `shard.yml`\n\n```yaml\ndependencies:\n  secp256k1:\n    github: q9f/secp256k1.cr\n    version: \"~> 0.2\"\n```\n\n# usage\n\n_tl;dr,_ check out [`crystal run ./try.cr`](./try.cr)!\n\n\n```crystal\n# import secp256k1\nrequire \"secp256k1\"\n```\n\nthis library exposes the following modules (in logical order):\n\n* `Secp256k1`: necessary constants and data structures, including:\n  - `Secp256k1::Keypair`: for managing private-public key-pairs\n  - `Secp256k1::EC_Point`: for handling of secp256k1 elliptic curve points (public keys)\n  - `Secp256k1::ECDSA_Signature`: for secp256k1 ecdsa signatures\n* `Secp256k1::Core`: the entire core mathematics behind the elliptic curve cryptography\n* `Secp256k1::Util`: all tools for the handling of private-public key-pairs\n* `Secp256k1::Hash`: implementation of various hashing algorithms for convenience\n* `Secp256k1::Signature`: allows for signing messages and verifying signatures\n* `Secp256k1::Bitcoin`: for the generation of bitcoin addresses, including:\n  - `Secp256k1::Bitcoin::Account`: for bitcoin account management\n* `Secp256k1::Ethereum`: for the generation of ethereum addresses, including\n  - `Secp256k1::Ethereum::Account`: for ethereum account management\n  - `Secp256k1::Ethereum::Enode`: for devp2p enode address management\n\nbasic usage:\n\n```crystal\n# generates a new keypair\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f8be5611d80>\n\n# gets the private key\nkey.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n\n# gets the compressed public key with prefix\ncompressed = Secp256k1::Util.public_key_compressed_prefix key.public_key\n# => \"03e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b\"\n```\n\ngenerate a compressed bitcoin mainnet address:\n\n```crystal\n# generates a new keypair\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f8be5611d80>\n\n# generates a compressed bitcoin account from the keypair\nbtc = Secp256k1::Bitcoin::Account.new key, \"00\", true\n# => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>\n\n# gets the wallet-import format (checksummed private key)\nbtc.wif\n# => \"Kz2grUzxEAxNopiREbNpVbjoitAGQVXnUZY4n8pNdmWdVqub99qu\"\n\n# gets the compressed bitcoin addresss\nbtc.address\n# => \"1Q1zbmPZtS2chwxpviqz6qHgoM8UUuviGN\"\n```\n\ngenerate a checksummed ethereum address:\n\n```crystal\n# generates a new keypair\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f81ef21ad00>\n\n# generates an ethereum account from the keypair\neth = Secp256k1::Ethereum::Account.new key\n# => #<Secp256k1::Ethereum::Account:0x7f81ef1faac0>\n\n# gets the private key\neth.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n\n# gets the ethereum addresss\neth.address\n# => \"0x224008a0F3d3cB989c807F568c7f99Bf451328A6\"\n```\n\n# documentation\n\nthe full library documentation can be found here: [q9f.github.io/secp256k1.cr](https://q9f.github.io/secp256k1.cr/)\n\ngenerate a local copy with:\n\n```\ncrystal docs\n```\n\n# testing\n\nthe library is entirely specified through tests in `./spec`; run:\n\n```bash\ncrystal spec --verbose\n```\n\n# understand\n\nprivate keys are just scalars and public keys are points with `x` and `y` coordinates.\n\nbitcoin public keys can be uncompressed `#{p}#{x}#{y}` or compressed `#{p}#{x}`. both come with a prefix `p` which is useless for uncompressed keys but necessary for compressed keys to recover the `y` coordinate on the `secp256k1` elliptic curve.\n\nethereum public keys are uncompressed `#{x}#{y}` without any prefix. the last 20 bytes slice of the `y` coordinate is actually used as address without any checksum. a checksum was later added in eip-55 using a `keccak256` hash and indicating character capitalization.\n\nneither bitcoin nor ethereum allow for recovering public keys from an address unless there exists a transaction with a valid signature on the blockchain.\n\n# known issues\n\n_note: this library should not be used in production without proper auditing._\n\n* this library is not constant time and might be subject to side-channel attacks. ([#4](https://github.com/q9f/secp256k1.cr/issues/4))\n* this library does unnecessary big-integer math and should someday rather correctly implement the secp256k1 prime field ([#5](https://github.com/q9f/secp256k1.cr/issues/5))\n\nfound another issue? report it: [github.com/q9f/secp256k1.cr/issues](https://github.com/q9f/secp256k1.cr/issues)\n\n# contribute\n\ncreate a pull request, and make sure tests and linter passes.\n\nthis pure crystal implementation is based on the python implementation [wobine/blackboard101](https://github.com/wobine/blackboard101) which is also used as reference to write tests against. it's a complete rewrite of the abandoned [packetzero/bitcoinutils](https://github.com/packetzero/bitcoinutils) for educational purposes.\n\nhonerable mention for the [bitcoin wiki](https://en.bitcoin.it/wiki/Main_Page) and the [ethereum stackexchange](https://ethereum.stackexchange.com/) for providing so many in-depth resources that supported this project in reimplementing everything.\n\nlicense: apache license v2.0\n\ncontributors: [**@q9f**](https://github.com/q9f/)\n","program":{"html_id":"github.com/q9f/secp256k1.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/q9f/secp256k1.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","path":"Secp256k1.html","kind":"module","full_name":"Secp256k1","name":"Secp256k1","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"bitcoin.cr","line_number":16,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr"},{"filename":"constants.cr","line_number":22,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/constants.cr"},{"filename":"structs.cr","line_number":20,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr"},{"filename":"version.cr","line_number":20,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/version.cr"},{"filename":"secp256k1.cr","line_number":30,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/secp256k1.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EC_BASE_G","name":"EC_BASE_G","value":"EC_Point.new(EC_BASE_G_X, EC_BASE_G_Y)","doc":"The commonly used base point `G` coordinates `x`, `y`;\nany other point that satisfies `y^2 = x^3 + 7` would also do.","summary":"<p>The commonly used base point <code>G</code> coordinates <code>x</code>, <code>y</code>; any other point that satisfies <code>y^2 = x^3 + 7</code> would also do.</p>"},{"id":"EC_BASE_G_COMPRESSED","name":"EC_BASE_G_COMPRESSED","value":"BigInt.new((Secp256k1::Util.public_key_compressed_prefix(EC_BASE_G)), 16)","doc":"The base point `G` in compressed form.","summary":"<p>The base point <code>G</code> in compressed form.</p>"},{"id":"EC_BASE_G_UNCOMPRESSED","name":"EC_BASE_G_UNCOMPRESSED","value":"BigInt.new((Secp256k1::Util.public_key_uncompressed_prefix(EC_BASE_G)), 16)","doc":"The base point `G` in uncompressed form.","summary":"<p>The base point <code>G</code> in uncompressed form.</p>"},{"id":"EC_BASE_G_X","name":"EC_BASE_G_X","value":"BigInt.new(\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", 16)","doc":"The `x`-coordinate of the base point `G`.","summary":"<p>The <code>x</code>-coordinate of the base point <code>G</code>.</p>"},{"id":"EC_BASE_G_Y","name":"EC_BASE_G_Y","value":"BigInt.new(\"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\", 16)","doc":"The `y`-coordinate of the base point `G`.","summary":"<p>The <code>y</code>-coordinate of the base point <code>G</code>.</p>"},{"id":"EC_COFACTOR_H","name":"EC_COFACTOR_H","value":"BigInt.new(\"01\", 16)","doc":"The elliptic curve cofactor `h`.","summary":"<p>The elliptic curve cofactor <code>h</code>.</p>"},{"id":"EC_FACTOR_A","name":"EC_FACTOR_A","value":"BigInt.new(\"00\", 16)","doc":"The curve `E`: `y^2 = x^3 + ax + b` over `F_p` is defined by `a = 0`.\nAs the `a` constant is zero, the `ax` term in the curve equation is always zero,\nhence the curve equation becomes `y^2 = x^3 + b`.","summary":"<p>The curve <code>E</code>: <code>y^2 = x^3 + ax + b</code> over <code>F_p</code> is defined by <code>a = 0</code>.</p>"},{"id":"EC_FACTOR_B","name":"EC_FACTOR_B","value":"BigInt.new(\"07\", 16)","doc":"The curve `E`: `y^2 = x^3 + b` over `F_p` is defined by `b = 7`,\nhence the curve equation becomes `y^2 = x^3 + 7`.","summary":"<p>The curve <code>E</code>: <code>y^2 = x^3 + b</code> over <code>F_p</code> is defined by <code>b = 7</code>, hence the curve equation becomes <code>y^2 = x^3 + 7</code>.</p>"},{"id":"EC_ORDER_N","name":"EC_ORDER_N","value":"BigInt.new(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", 16)","doc":"The order `n` of `G` defines the finite size of the Secp256k1 field `E`.","summary":"<p>The order <code>n</code> of <code>G</code> defines the finite size of the Secp256k1 field <code>E</code>.</p>"},{"id":"EC_PRIME_P","name":"EC_PRIME_P","value":"BigInt.new(\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\", 16)","doc":"The elliptic curve domain parameters over `F_p` associated with a Koblitz curve\nSecp256k1 are specified by the sextuple `T = (p, a, b, G, n, h)` where the finite\nfield `F_p` is defined by the prime `p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1`.","summary":"<p>The elliptic curve domain parameters over <code>F_p</code> associated with a Koblitz curve Secp256k1 are specified by the sextuple <code>T = (p, a, b, G, n, h)</code> where the finite field <code>F_p</code> is defined by the prime <code>p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1</code>.</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.2.2\"","doc":"The `VERSION` of the `Secp256k1` module.","summary":"<p>The <code><a href=\"Secp256k1.html#VERSION\">VERSION</a></code> of the <code><a href=\"Secp256k1.html\">Secp256k1</a></code> module.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Implements 256-bit `Secp256k1` Koblitz elliptic curve.\nRef: [secg.org/sec2-v2.pdf](https://www.secg.org/sec2-v2.pdf)\n\n`Secp256k1` has the characteristic prime `p`, it is defined over the prime field ℤ_p.\nRef: [en.bitcoin.it/wiki/Secp256k1](https://en.bitcoin.it/wiki/Secp256k1)","summary":"<p>Implements 256-bit <code><a href=\"Secp256k1.html\">Secp256k1</a></code> Koblitz elliptic curve.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Bitcoin","path":"Secp256k1/Bitcoin.html","kind":"module","full_name":"Secp256k1::Bitcoin","name":"Bitcoin","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"bitcoin.cr","line_number":16,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Implements the `Bitcoin` address space for the `Secp256k1` library.","summary":"<p>Implements the <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address space for the <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> library.</p>","class_methods":[{"id":"address_from_private(priv:BigInt,version=&quot;00&quot;,compressed=true)-class-method","html_id":"address_from_private(priv:BigInt,version=&amp;quot;00&amp;quot;,compressed=true)-class-method","name":"address_from_private","doc":"Generates a `Bitcoin` address from a private key.\n\nParameters:\n* `priv` (`BigInt`): the private key as number.\n* `version` (`String`): the version byte, default: `\"00\"` (Bitcoin).\n* `compressed` (`Bool`): indicator if address should be compressed or not, default: `true` (compressed).\n\n```\nSecp256k1::Bitcoin.address_from_private BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\n# => \"1Q1zbmPZtS2chwxpviqz6qHgoM8UUuviGN\"\n```","summary":"<p>Generates a <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address from a private key.</p>","abstract":false,"args":[{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"00\"","external_name":"version","restriction":""},{"name":"compressed","doc":null,"default_value":"true","external_name":"compressed","restriction":""}],"args_string":"(priv : BigInt, version = <span class=\"s\">&quot;00&quot;</span>, compressed = <span class=\"n\">true</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L570","def":{"name":"address_from_private","args":[{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"00\"","external_name":"version","restriction":""},{"name":"compressed","doc":null,"default_value":"true","external_name":"compressed","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"p = Secp256k1::Util.public_key_from_private(priv)\nreturn address_from_public_point(p, version, compressed)\n"}},{"id":"address_from_public_key(pub:String,version=&quot;00&quot;)-class-method","html_id":"address_from_public_key(pub:String,version=&amp;quot;00&amp;quot;)-class-method","name":"address_from_public_key","doc":"Generates a `Bitcoin` address for any public key, compressed or uncompressed.\n\nParameters:\n* `pub` (`String`): the public key, compressed or uncompressed.\n* `version` (`String`): the version byte, default: `\"00\"` (Bitcoin).\n\n```\nSecp256k1::Bitcoin.address_from_public_key \"03e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b\"\n# => \"1Q1zbmPZtS2chwxpviqz6qHgoM8UUuviGN\"\n```\n\nNote, compressed public keys generate compressed addresses, whereas\nuncompressed keys generate uncompressed addresses.\n\nRaises if the public key is malformed.","summary":"<p>Generates a <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address for any public key, compressed or uncompressed.</p>","abstract":false,"args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"},{"name":"version","doc":null,"default_value":"\"00\"","external_name":"version","restriction":""}],"args_string":"(pub : String, version = <span class=\"s\">&quot;00&quot;</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L472","def":{"name":"address_from_public_key","args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"},{"name":"version","doc":null,"default_value":"\"00\"","external_name":"version","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (pub.size === 130) || (pub.size === 66)\n  sha2 = Hash.sha256(Hash.hex_to_bin(pub))\n  ripe = Hash.ripemd160(Hash.hex_to_bin(sha2))\n  ripe_versioned = \"#{version}#{ripe}\"\n  hashed = Hash.sha256(Hash.hex_to_bin(ripe_versioned))\n  hashed_twice = Hash.sha256(Hash.hex_to_bin(hashed))\n  binary = \"#{ripe_versioned}#{hashed_twice[0, 8]}\"\n  return Hash.base58_encode(binary)\nelse\n  raise(\"malformed public key (invalid key size: #{pub.size})\")\nend\nreturn \"-999\"\n"}},{"id":"address_from_public_point(p:Secp256k1::EC_Point,version=&quot;00&quot;,compressed=true)-class-method","html_id":"address_from_public_point(p:Secp256k1::EC_Point,version=&amp;quot;00&amp;quot;,compressed=true)-class-method","name":"address_from_public_point","doc":"Generates a `Bitcoin` address from an public key as `EC_Point`.\n\nParameters:\n* `p` (`EC_Point`): the public key as point with `x` and `y` coordinates.\n* `version` (`String`): the version byte, default: `\"00\"` (Bitcoin).\n* `compressed` (`Bool`): indicator if address should be compressed or not, default: `true` (compressed).\n\nSee `address_from_public_key` and `EC_Point` for usage instructions.","summary":"<p>Generates a <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address from an public key as <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Secp256k1::EC_Point"},{"name":"version","doc":null,"default_value":"\"00\"","external_name":"version","restriction":""},{"name":"compressed","doc":null,"default_value":"true","external_name":"compressed","restriction":""}],"args_string":"(p : Secp256k1::EC_Point, version = <span class=\"s\">&quot;00&quot;</span>, compressed = <span class=\"n\">true</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L512","def":{"name":"address_from_public_point","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Secp256k1::EC_Point"},{"name":"version","doc":null,"default_value":"\"00\"","external_name":"version","restriction":""},{"name":"compressed","doc":null,"default_value":"true","external_name":"compressed","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pub = Secp256k1::Util.public_key_uncompressed_prefix(p)\nif compressed\n  pub = Secp256k1::Util.public_key_compressed_prefix(p)\nend\nreturn address_from_public_key(pub, version)\n"}},{"id":"address_from_wif(wif:String)-class-method","html_id":"address_from_wif(wif:String)-class-method","name":"address_from_wif","doc":"Gets a `Bitcoin` address from a Base-58 Wallet-Import Format (WIF).\n\nParameters:\n* `wif` (`String`): the Base-58 Wallet-Import Format (WIF).\n\n```\nSecp256k1::Bitcoin.address_from_wif \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\n# => \"1Gbxhju13BpwpzzFRgNr2TDYCRTg94kgFC\"\n```\n\nRaises if Wallet-Import Format (WIF) is invalid.","summary":"<p>Gets a <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address from a Base-58 Wallet-Import Format (WIF).</p>","abstract":false,"args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"args_string":"(wif : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L532","def":{"name":"address_from_wif","args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if wif_is_valid?(wif)\n  vers = version_byte_from_wif(wif)\n  vers = vers.to_i(16)\n  vers = vers - 128\n  vers = Secp256k1::Util.to_padded_hex_01(vers)\n  priv = private_key_from_wif(wif)\n  priv = BigInt.new(priv, 16)\n  comp = is_wif_compressed?(wif)\n  return address_from_private(priv, vers, comp)\nelse\n  raise(\"invalid wallet import format (invalid wif: #{wif})\")\n  return \"-999\"\nend"}},{"id":"is_wif_compressed?(wif:String)-class-method","html_id":"is_wif_compressed?(wif:String)-class-method","name":"is_wif_compressed?","doc":"Checks if it's a compressed or an uncompressed Wallet-Import Format (WIF).\n\nParameters:\n* `wif` (`String`): the Base-58 Wallet-Import Format (WIF).\n\n```\nSecp256k1::Bitcoin.is_wif_compressed? \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\n# => false\n```\n\nReturns _true_ if the key is compressed.\n\nRaises if Wallet-Import Format (WIF) is invalid.","summary":"<p>Checks if it's a compressed or an uncompressed Wallet-Import Format (WIF).</p>","abstract":false,"args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"args_string":"(wif : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L396","def":{"name":"is_wif_compressed?","args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"versioned = Hash.base58_decode(wif)\nif (versioned.size === 74) || (versioned.size === 76)\n  return versioned.size === 76\nelse\n  raise(\"invalid wallet import format (invalid wif size: #{versioned.size})\")\n  return \"-999\"\nend\n"}},{"id":"mini_is_valid?(m:String)-class-method","html_id":"mini_is_valid?(m:String)-class-method","name":"mini_is_valid?","doc":"Validates wether a mini-private key has a correct checksum and formatting.\n\nParameters:\n* `m` (`String`): the mini-private key.\n\n```\nSecp256k1::Bitcoin.mini_is_valid? \"S7qq5k98DAvee6mtQgpg4xAJatT9mR\"\n# => true\n```\n\nReturns _true_ if the key contains a valid checksum and is formatted correctly.","summary":"<p>Validates wether a mini-private key has a correct checksum and formatting.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"String"}],"args_string":"(m : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L254","def":{"name":"mini_is_valid?","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"valid = m.size === 30\nvalid = valid && (m[0, 1] === \"S\")\nchecksum = Hash.sha256_string(\"#{m}?\")\nvalid = valid && (checksum[0, 2] === \"00\")\nreturn valid\n"}},{"id":"new_mini_private_key-class-method","html_id":"new_mini_private_key-class-method","name":"new_mini_private_key","doc":"Generates a new mini-private key (30 characters length, Base-56 encoded).\n\n```\nSecp256k1::Bitcoin.new_mini_private_key\n# => S7qq5k98DAvee6mtQgpg4xAJatT9mR\n```","summary":"<p>Generates a new mini-private key (30 characters length, Base-56 encoded).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L193","def":{"name":"new_mini_private_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"valid = false\nkey = String.new\nwhile !valid\n  i = 1\n  key = \"S\"\n  while i < 30\n    i = i + 1\n    r = Random.rand(56)\n    key = key + (Hash.base56_char(r))\n  end\n  valid = mini_is_valid?(key)\n  if valid\n    priv = private_key_from_mini(key)\n    valid = valid && priv > 0\n    valid = valid && (priv === (priv % Secp256k1::EC_ORDER_N))\n  end\nend\nreturn key\n"}},{"id":"private_key_from_mini(m:String)-class-method","html_id":"private_key_from_mini(m:String)-class-method","name":"private_key_from_mini","doc":"Gets a private key from a mini-private key if the key is valid.\n\nParameters:\n* `m` (`String`): the mini-private key.\n\n```\nSecp256k1::Bitcoin.private_key_from_mini \"S7qq5k98DAvee6mtQgpg4xAJatT9mR\"\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n```\n\nRaises if the key is invalid.","summary":"<p>Gets a private key from a mini-private key if the key is valid.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"String"}],"args_string":"(m : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L232","def":{"name":"private_key_from_mini","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if mini_is_valid?(m)\n  private_key = Hash.sha256_string(m)\n  return BigInt.new(private_key, 16)\nelse\n  raise(\"mini private key is not valid (invalid checksum for: #{m})\")\nend\nreturn BigInt.new(\"-999\")\n"}},{"id":"private_key_from_wif(wif:String)-class-method","html_id":"private_key_from_wif(wif:String)-class-method","name":"private_key_from_wif","doc":"Gets a private key from a Base-58 Wallet-Import Format (WIF).\n\nParameters:\n* `wif` (`String`): the Base-58 Wallet-Import Format (WIF).\n\n```\nSecp256k1::Bitcoin.private_key_from_wif \"Kz2grUzxEAxNopiREbNpVbjoitAGQVXnUZY4n8pNdmWdVqub99qu\"\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n```\n\nRaises if Wallet-Import Format (WIF) is invalid.","summary":"<p>Gets a private key from a Base-58 Wallet-Import Format (WIF).</p>","abstract":false,"args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"args_string":"(wif : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L343","def":{"name":"private_key_from_wif","args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"checksum_key = Hash.base58_decode(wif)\nif (checksum_key.size == 74) || (checksum_key.size == 76)\n  private_key = BigInt.new(checksum_key[2, 64], 16)\n  return Secp256k1::Util.to_padded_hex_32(private_key)\nelse\n  raise(\"invalid wallet import format (invalid wif size: #{checksum_key.size})\")\n  return \"-999\"\nend\n"}},{"id":"version_byte_from_wif(wif:String)-class-method","html_id":"version_byte_from_wif(wif:String)-class-method","name":"version_byte_from_wif","doc":"Gets the version byte from a Base-58 Wallet-Import Format (WIF).\n\nParameters:\n* `wif` (`String`): the Base-58 Wallet-Import Format (WIF).\n\n```\nSecp256k1::Bitcoin.version_byte_from_wif \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\n# => \"80\"\n```\n\nRaises if Wallet-Import Format (WIF) is invalid.","summary":"<p>Gets the version byte from a Base-58 Wallet-Import Format (WIF).</p>","abstract":false,"args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"args_string":"(wif : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L369","def":{"name":"version_byte_from_wif","args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"versioned = Hash.base58_decode(wif)\nif (versioned.size === 74) || (versioned.size === 76)\n  return versioned[0, 2]\nelse\n  raise(\"invalid wallet import format (invalid wif size: #{versioned.size})\")\n  return \"-999\"\nend\n"}},{"id":"wif_from_private(k:BigInt,version=&quot;80&quot;,compr=&quot;&quot;)-class-method","html_id":"wif_from_private(k:BigInt,version=&amp;quot;80&amp;quot;,compr=&amp;quot;&amp;quot;)-class-method","name":"wif_from_private","doc":"Gets a Base-58 Wallet-Import Format (WIF) from a private key.\n\nParameters:\n* `k` (`BigInt`): the private key.\n* `version` (`String`): the version byte, default: `\"80\"` (Bitcoin).\n* `compr` (`String`): the compression byte, default: `\"\"` (uncompressed).\n\n```\nSecp256k1::Bitcoin.wif_from_private BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\n# => \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\n```\n\nNote, the compression byte `compr` is either empty `\"\"` for uncompressed keys or\n`\"01\"` for compressed keys. See also `wif_from_private_compressed` and  `wif_from_private_uncompressed`.","summary":"<p>Gets a Base-58 Wallet-Import Format (WIF) from a private key.</p>","abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"80\"","external_name":"version","restriction":""},{"name":"compr","doc":null,"default_value":"\"\"","external_name":"compr","restriction":""}],"args_string":"(k : BigInt, version = <span class=\"s\">&quot;80&quot;</span>, compr = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L279","def":{"name":"wif_from_private","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"80\"","external_name":"version","restriction":""},{"name":"compr","doc":null,"default_value":"\"\"","external_name":"compr","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"priv = Secp256k1::Util.to_padded_hex_32(k)\nversioned = \"#{version}#{priv}#{compr}\"\nhashed = Hash.sha256(Hash.hex_to_bin(versioned))\nhashed_twice = Hash.sha256(Hash.hex_to_bin(hashed))\nbinary = \"#{versioned}#{hashed_twice[0, 8]}\"\nreturn Hash.base58_encode(binary)\n"}},{"id":"wif_from_private_compressed(k:BigInt,version=&quot;80&quot;)-class-method","html_id":"wif_from_private_compressed(k:BigInt,version=&amp;quot;80&amp;quot;)-class-method","name":"wif_from_private_compressed","doc":"Gets a compressed Base-58 Wallet-Import Format (WIF) from a private key.\n\nParameters:\n* `k` (`BigInt`): the private key\n* `version` (`String`): the version byte, default: `\"80\"` (Bitcoin)\n\n```\nSecp256k1::Bitcoin.wif_from_private_compressed BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\n# => \"Kz2grUzxEAxNopiREbNpVbjoitAGQVXnUZY4n8pNdmWdVqub99qu\"\n```","summary":"<p>Gets a compressed Base-58 Wallet-Import Format (WIF) from a private key.</p>","abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"80\"","external_name":"version","restriction":""}],"args_string":"(k : BigInt, version = <span class=\"s\">&quot;80&quot;</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L312","def":{"name":"wif_from_private_compressed","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"80\"","external_name":"version","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return wif_from_private(k, version, \"01\")"}},{"id":"wif_from_private_uncompressed(k:BigInt,version=&quot;80&quot;)-class-method","html_id":"wif_from_private_uncompressed(k:BigInt,version=&amp;quot;80&amp;quot;)-class-method","name":"wif_from_private_uncompressed","doc":"Gets an uncompressed Base-58 Wallet-Import Format (WIF) from a private key.\n\nParameters:\n* `k` (`BigInt`): the private key\n* `version` (`String`): the version byte, default: `\"80\"` (Bitcoin)\n\n```\nSecp256k1::Bitcoin.wif_from_private_uncompressed BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\n# => \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\n```","summary":"<p>Gets an uncompressed Base-58 Wallet-Import Format (WIF) from a private key.</p>","abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"80\"","external_name":"version","restriction":""}],"args_string":"(k : BigInt, version = <span class=\"s\">&quot;80&quot;</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L327","def":{"name":"wif_from_private_uncompressed","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"BigInt"},{"name":"version","doc":null,"default_value":"\"80\"","external_name":"version","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return wif_from_private(k, version, \"\")"}},{"id":"wif_is_valid?(wif:String)-class-method","html_id":"wif_is_valid?(wif:String)-class-method","name":"wif_is_valid?","doc":"Validates wether a Wallet-Import Format (WIF) has a correct checksum and formatting.\n\nParameters:\n* `wif` (`String`): the Base-58 Wallet-Import Format (WIF).\n\n```\nSecp256k1::Bitcoin.wif_is_valid? \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\n# => true\n```\n\nReturns _true_ if the key contains a valid checksum and is formatted correctly.","summary":"<p>Validates wether a Wallet-Import Format (WIF) has a correct checksum and formatting.</p>","abstract":false,"args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"args_string":"(wif : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L421","def":{"name":"wif_is_valid?","args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"checksum_key = Hash.base58_decode(wif)\nvalid = (checksum_key.size === 74) || (checksum_key.size === 76)\nif valid\n  private_key = private_key_from_wif(wif)\n  valid = (valid && (private_key != \"-999\")) && (private_key.size === 64)\n  versioned = checksum_key[0, 66]\n  wif_checksum = checksum_key[66, 8]\n  if checksum_key.size === 76\n    versioned = checksum_key[0, 68]\n    wif_checksum = checksum_key[68, 8]\n  end\n  hashed = Hash.sha256(Hash.hex_to_bin(versioned))\n  hashed_twice = Hash.sha256(Hash.hex_to_bin(hashed))\n  pk_checksum = hashed_twice[0, 8]\n  valid = valid && (wif_checksum === pk_checksum)\nend\nreturn valid\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Bitcoin/Account","path":"Secp256k1/Bitcoin/Account.html","kind":"class","full_name":"Secp256k1::Bitcoin::Account","name":"Account","abstract":false,"superclass":{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/q9f/secp256k1.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bitcoin.cr","line_number":34,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Bitcoin","kind":"module","full_name":"Secp256k1::Bitcoin","name":"Bitcoin"},"doc":"Implements a `Bitcoin` account containing a `Keypair`, a Wallet-Import Format,\nand an address.\n\nProperties:\n* `key_pair` (`Keypair`): the `Keypair` containing the secret key.\n* `version` (`String`): the version byte determining the used network encoding.\n* `compressed` (`Bool`): an indicator whether a compressed format should be used.\n* `address` (`String`): the public `Bitcoin` address.\n* `wif` (`String`): the private Wallet-Import Format (WIF).\n\n```\nbtc = Secp256k1::Bitcoin::Account.new\nbtc.wif\n# => \"5JTDCfWtwBsA26NcrJJdb7xvBPvJY9jKTdppXckp3SVTrBe6pg1\"\nbtc.address\n# => \"1Gbxhju13BpwpzzFRgNr2TDYCRTg94kgFC\"\n```","summary":"<p>Implements a <code><a href=\"../../Secp256k1/Bitcoin.html\">Bitcoin</a></code> account containing a <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>, a Wallet-Import Format, and an address.</p>","class_methods":[],"constructors":[{"id":"new(key_pair,version,compressed)-class-method","html_id":"new(key_pair,version,compressed)-class-method","name":"new","doc":"Generates a `Bitcoin::Account` from a provided `Keypair` allowing for a custom\nnetwork version byte and compression.\n\nParameters:\n* `key_pair` (`Keypair`): the `Keypair` containing the secret key.\n* `version` (`String`): the version byte determining the used network encoding.\n* `compressed` (`Bool`): an indicator whether a compressed format should be used.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\nbtc = Secp256k1::Bitcoin::Account.new key, \"00\", true\n# => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>\n```\n\nRaises if the version byte is out of range.","summary":"<p>Generates a <code><a href=\"../../Secp256k1/Bitcoin/Account.html\">Bitcoin::Account</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> allowing for a custom network version byte and compression.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":""},{"name":"compressed","doc":null,"default_value":"","external_name":"compressed","restriction":""}],"args_string":"(key_pair, version, compressed)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L125","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":""},{"name":"compressed","doc":null,"default_value":"","external_name":"compressed","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair, version, compressed)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(key_pair,version)-class-method","html_id":"new(key_pair,version)-class-method","name":"new","doc":"Generates a `Bitcoin::Account` from a provided `Keypair` allowing for a custom\nnetwork version byte.\n\nParameters:\n* `key_pair` (`Keypair`): the `Keypair` containing the secret key.\n* `version` (`String`): the version byte determining the used network encoding.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\nbtc = Secp256k1::Bitcoin::Account.new key, \"1e\"\n# => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>\n```\n\nNote, this always generates an uncompressed account for the specified network.\n\nRaises if the version byte is out of range.","summary":"<p>Generates a <code><a href=\"../../Secp256k1/Bitcoin/Account.html\">Bitcoin::Account</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> allowing for a custom network version byte.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":""}],"args_string":"(key_pair, version)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L97","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair, version)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(key_pair)-class-method","html_id":"new(key_pair)-class-method","name":"new","doc":"Generates a `Bitcoin::Account` from a provided `Keypair`.\n\nParameters:\n* `key_pair` (`Keypair`): the `Keypair` containing the secret key.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\nbtc = Secp256k1::Bitcoin::Account.new key\n# => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>\n```\n\nNote, this always generates an uncompressed mainnet Bitcoin account.","summary":"<p>Generates a <code><a href=\"../../Secp256k1/Bitcoin/Account.html\">Bitcoin::Account</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""}],"args_string":"(key_pair)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L74","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Generates a new `Bitcoin::Account` from a fresh random `Keypair`.\n\n```\nbtc = Secp256k1::Bitcoin::Account.new\n# => #<Secp256k1::Bitcoin::Account:0x7f81ef21ab80>\n```\n\nNote, this always generates an uncompressed mainnet Bitcoin account.","summary":"<p>Generates a new <code><a href=\"../../Secp256k1/Bitcoin/Account.html\">Bitcoin::Account</a></code> from a fresh random <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L54","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"address:String-instance-method","html_id":"address:String-instance-method","name":"address","doc":"The public `Bitcoin` address.","summary":"<p>The public <code><a href=\"../../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L42","def":{"name":"address","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@address"}},{"id":"address=(address:String)-instance-method","html_id":"address=(address:String)-instance-method","name":"address=","doc":"The public `Bitcoin` address.","summary":"<p>The public <code><a href=\"../../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address.</p>","abstract":false,"args":[{"name":"address","doc":null,"default_value":"","external_name":"address","restriction":"String"}],"args_string":"(address : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L42","def":{"name":"address=","args":[{"name":"address","doc":null,"default_value":"","external_name":"address","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@address = address"}},{"id":"compressed:Bool-instance-method","html_id":"compressed:Bool-instance-method","name":"compressed","doc":"An indicator whether a compressed format should be used.","summary":"<p>An indicator whether a compressed format should be used.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L40","def":{"name":"compressed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@compressed"}},{"id":"compressed=(compressed:Bool)-instance-method","html_id":"compressed=(compressed:Bool)-instance-method","name":"compressed=","doc":"An indicator whether a compressed format should be used.","summary":"<p>An indicator whether a compressed format should be used.</p>","abstract":false,"args":[{"name":"compressed","doc":null,"default_value":"","external_name":"compressed","restriction":"Bool"}],"args_string":"(compressed : Bool)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L40","def":{"name":"compressed=","args":[{"name":"compressed","doc":null,"default_value":"","external_name":"compressed","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@compressed = compressed"}},{"id":"get_secret-instance-method","html_id":"get_secret-instance-method","name":"get_secret","doc":"Gets the private key as hexadecimal formatted string literal.\n\n```\nbtc.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n```","summary":"<p>Gets the private key as hexadecimal formatted string literal.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L172","def":{"name":"get_secret","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Util.to_padded_hex_32(@key_pair.private_key)"}},{"id":"is_compressed?-instance-method","html_id":"is_compressed?-instance-method","name":"is_compressed?","doc":"Tells if the `Bitcoin::Account` is compressed.\n\n```\nbtc.is_compressed?\n# => false\n```\n\nReturns _true_ if the compressed format is used.","summary":"<p>Tells if the <code><a href=\"../../Secp256k1/Bitcoin/Account.html\">Bitcoin::Account</a></code> is compressed.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L151","def":{"name":"is_compressed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @compressed"}},{"id":"key_pair:Keypair-instance-method","html_id":"key_pair:Keypair-instance-method","name":"key_pair","doc":"The `Keypair` containing the secret key.","summary":"<p>The <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> containing the secret key.</p>","abstract":false,"args":[],"args_string":" : Keypair","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L36","def":{"name":"key_pair","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Keypair","visibility":"Public","body":"@key_pair"}},{"id":"key_pair=(key_pair:Keypair)-instance-method","html_id":"key_pair=(key_pair:Keypair)-instance-method","name":"key_pair=","doc":"The `Keypair` containing the secret key.","summary":"<p>The <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> containing the secret key.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":"Keypair"}],"args_string":"(key_pair : Keypair)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L36","def":{"name":"key_pair=","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":"Keypair"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_pair = key_pair"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Gets the account formatted as `Bitcoin` address.\n\n```\nbtc.to_s\n# => \"1Gbxhju13BpwpzzFRgNr2TDYCRTg94kgFC\"\n```","summary":"<p>Gets the account formatted as <code><a href=\"../../Secp256k1/Bitcoin.html\">Bitcoin</a></code> address.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L182","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @address"}},{"id":"version:String-instance-method","html_id":"version:String-instance-method","name":"version","doc":"The version byte determining the used network encoding.","summary":"<p>The version byte determining the used network encoding.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L38","def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@version"}},{"id":"version=(version:String)-instance-method","html_id":"version=(version:String)-instance-method","name":"version=","doc":"The version byte determining the used network encoding.","summary":"<p>The version byte determining the used network encoding.</p>","abstract":false,"args":[{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":"String"}],"args_string":"(version : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L38","def":{"name":"version=","args":[{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@version = version"}},{"id":"version_wif-instance-method","html_id":"version_wif-instance-method","name":"version_wif","doc":"Computes the version byte for the private Wallet-Import Format which is\noffset by `+ 0x80` from the public address `version` byte.\n\n```\nbtc.version_wif\n# => \"80\"\n```","summary":"<p>Computes the version byte for the private Wallet-Import Format which is offset by <code>+ 0x80</code> from the public address <code><a href=\"../../Secp256k1/Bitcoin/Account.html#version:String-instance-method\">#version</a></code> byte.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L162","def":{"name":"version_wif","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Util.to_padded_hex_01((@version.to_i(16)) + 128)"}},{"id":"wif:String-instance-method","html_id":"wif:String-instance-method","name":"wif","doc":"The private Wallet-Import Format (WIF).","summary":"<p>The private Wallet-Import Format (WIF).</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L44","def":{"name":"wif","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@wif"}},{"id":"wif=(wif:String)-instance-method","html_id":"wif=(wif:String)-instance-method","name":"wif=","doc":"The private Wallet-Import Format (WIF).","summary":"<p>The private Wallet-Import Format (WIF).</p>","abstract":false,"args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"args_string":"(wif : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/bitcoin.cr#L44","def":{"name":"wif=","args":[{"name":"wif","doc":null,"default_value":"","external_name":"wif","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@wif = wif"}}],"macros":[],"types":[]}]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Core","path":"Secp256k1/Core.html","kind":"module","full_name":"Secp256k1::Core","name":"Core","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core.cr","line_number":20,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/core.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Implements 256-bit `Secp256k1` Koblitz elliptic curve.\nRef: [secg.org/sec2-v2.pdf](https://www.secg.org/sec2-v2.pdf)\n\n`Secp256k1` has the characteristic prime `p`, it is defined over the prime field ℤ_p.\nRef: [en.bitcoin.it/wiki/Secp256k1](https://en.bitcoin.it/wiki/Secp256k1)","summary":"<p>Implements 256-bit <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> Koblitz elliptic curve.</p>","class_methods":[{"id":"ec_add(p:EC_Point,q:EC_Point,prime=EC_PRIME_P)-class-method","html_id":"ec_add(p:EC_Point,q:EC_Point,prime=EC_PRIME_P)-class-method","name":"ec_add","doc":"The elliptic curve jive addition of point `p(x, y)` and `q(x, y)`.\n\nWe basically _draw_ a line between `p` and `q` which will intersect the\ncurve in the point `r` which will be mirrored over the `x`-axis.\n\nParamters:\n* `p` (`EC_Point`): the point `p(x, y)` to be used in the jive addition.\n* `q` (`EC_Point`): the point `q(x, y)` to be used in the jive addition.\n* `prime` (`BigInt`): the prime number that shapes the field, default: `EC_PRIME_P`.\n\nReturns another `EC_Point` as result.","summary":"<p>The elliptic curve jive addition of point <code>p(x, y)</code> and <code>q(x, y)</code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"},{"name":"q","doc":null,"default_value":"","external_name":"q","restriction":"EC_Point"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"args_string":"(p : EC_Point, q : EC_Point, prime = <span class=\"t\">EC_PRIME_P</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/core.cr#L60","def":{"name":"ec_add","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"},{"name":"q","doc":null,"default_value":"","external_name":"q","restriction":"EC_Point"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x_delta = q.x - p.x\nx_inv = ec_mod_inv(x_delta)\ny_delta = q.y - p.y\nm = (y_delta * x_inv) % prime\nx = (((m * m) - p.x) - q.x) % prime\ny = ((m * (p.x - x)) - p.y) % prime\nx = BigInt.new(x)\ny = BigInt.new(y)\nreturn EC_Point.new(x, y)\n"}},{"id":"ec_double(p:EC_Point,prime=EC_PRIME_P)-class-method","html_id":"ec_double(p:EC_Point,prime=EC_PRIME_P)-class-method","name":"ec_double","doc":"The elliptic curve juke point doubling of `p(x, y)`.\n\nThis is a special case of addition where both points are the same.\nWe _draw_ a tangent line at `p` which will intersect the curve\nat point `r` which will be mirrored over the `x`-axis.\n\nParamters:\n* `p` (`EC_Point`): the point `p(x, y)` to be used in the juke doubling.\n* `prime` (`BigInt`): the prime number that shapes the field, default: `EC_PRIME_P`.\n\nReturns another `EC_Point` as result.","summary":"<p>The elliptic curve juke point doubling of <code>p(x, y)</code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"args_string":"(p : EC_Point, prime = <span class=\"t\">EC_PRIME_P</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/core.cr#L83","def":{"name":"ec_double","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"lam_numer = ((3 * p.x) * p.x) + EC_FACTOR_A\nlam_denom = 2 * p.y\nlam_inv = ec_mod_inv(lam_denom)\nlam = (lam_numer * lam_inv) % prime\nx = ((lam * lam) - (2 * p.x)) % prime\ny = ((lam * (p.x - x)) - p.y) % prime\nx = BigInt.new(x)\ny = BigInt.new(y)\nreturn EC_Point.new(x, y)\n"}},{"id":"ec_mod_inv(a:BigInt,prime=EC_PRIME_P)-class-method","html_id":"ec_mod_inv(a:BigInt,prime=EC_PRIME_P)-class-method","name":"ec_mod_inv","doc":"Computes the elliptic curve modular multiplicative inverse of `a`.\n\nParemeters:\n* `a` (`BigInt`): the integer that we want the modular inverse of.\n* `prime` (`BigInt`): the prime number that shapes the field, default: `EC_PRIME_P`.\n\nReturns a `BigInt` value as result.","summary":"<p>Computes the elliptic curve modular multiplicative inverse of <code>a</code>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"BigInt"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"args_string":"(a : BigInt, prime = <span class=\"t\">EC_PRIME_P</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/core.cr#L28","def":{"name":"ec_mod_inv","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"BigInt"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"m_low = 1\nm_high = 0\nv_low = a % prime\nv_high = prime\nwhile v_low > 1\n  v_ratio = v_high // v_low\n  m_low_r = m_low * v_ratio\n  v_low_r = v_low * v_ratio\n  m = m_high - m_low_r\n  v = v_high - v_low_r\n  m_high = m_low\n  v_high = v_low\n  m_low = m\n  v_low = v\nend\nreturn m_low % prime\n"}},{"id":"ec_mul(p:EC_Point,s:BigInt)-class-method","html_id":"ec_mul(p:EC_Point,s:BigInt)-class-method","name":"ec_mul","doc":"The elliptic curve sequence multiplication of point `p(x, y)` and\na skalar `s`.\n\nWith `s` being a private key within the elliptic curve field size of `EC_ORDER_N`.\n\nParamters:\n* `p` (`EC_Point`): the point `p(x, y)` to be used in the sequencing.\n* `s` (`BigInt`): a skalar, in most cases a private key.\n\nReturns another `EC_Point` as result, in most cases a public key.","summary":"<p>The elliptic curve sequence multiplication of point <code>p(x, y)</code> and a skalar <code>s</code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"BigInt"}],"args_string":"(p : EC_Point, s : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/core.cr#L105","def":{"name":"ec_mul","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (s === 0) || s >= EC_ORDER_N\n  raise(\"invalid private key: outside of ec field size.\")\n  exit(1)\nend\ns_bin = s.to_s(2)\nq = p\ns_bin.each_char_with_index do |char, index|\n  if index === 0\n    next\n  end\n  q = ec_double(q)\n  if char === '1'\n    q = ec_add(q, p)\n  end\nend\nreturn q\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/EC_Point","path":"Secp256k1/EC_Point.html","kind":"struct","full_name":"Secp256k1::EC_Point","name":"EC_Point","abstract":false,"superclass":{"html_id":"github.com/q9f/secp256k1.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/q9f/secp256k1.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/q9f/secp256k1.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/q9f/secp256k1.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"structs.cr","line_number":99,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"A point in the two-dimensional space of an elliptic curve.\n\nProperties:\n* `x` (`BigInt`): the position on the x-axis.\n* `y` (`BigInt`): the position on the y-axis.\n\n```\np = EC_Point.new BigInt.new(0), BigInt.new(0)\np.x\n# => 0\np.y\n# => 0\n```","summary":"<p>A point in the two-dimensional space of an elliptic curve.</p>","class_methods":[],"constructors":[{"id":"new(x:BigInt,y:BigInt)-class-method","html_id":"new(x:BigInt,y:BigInt)-class-method","name":"new","doc":"An EC_Point always requires two coordinates `x`, `y`.\n\nParameters:\n* `x` (`BigInt`): the position on the x-axis.\n* `y` (`BigInt`): the position on the y-axis.","summary":"<p>An EC_Point always requires two coordinates <code><a href=\"../Secp256k1/EC_Point.html#x:BigInt-instance-method\">#x</a></code>, <code><a href=\"../Secp256k1/EC_Point.html#y:BigInt-instance-method\">#y</a></code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"BigInt"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"BigInt"}],"args_string":"(x : BigInt, y : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L111","def":{"name":"new","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"BigInt"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(x, y)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"x:BigInt-instance-method","html_id":"x:BigInt-instance-method","name":"x","doc":"The position on the x-axis.","summary":"<p>The position on the x-axis.</p>","abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L101","def":{"name":"x","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@x"}},{"id":"x=(x:BigInt)-instance-method","html_id":"x=(x:BigInt)-instance-method","name":"x=","doc":"The position on the x-axis.","summary":"<p>The position on the x-axis.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"BigInt"}],"args_string":"(x : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L101","def":{"name":"x=","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@x = x"}},{"id":"y:BigInt-instance-method","html_id":"y:BigInt-instance-method","name":"y","doc":"The position on the y-axis.","summary":"<p>The position on the y-axis.</p>","abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L104","def":{"name":"y","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@y"}},{"id":"y=(y:BigInt)-instance-method","html_id":"y=(y:BigInt)-instance-method","name":"y=","doc":"The position on the y-axis.","summary":"<p>The position on the y-axis.</p>","abstract":false,"args":[{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"BigInt"}],"args_string":"(y : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L104","def":{"name":"y=","args":[{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@y = y"}}],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/ECDSA_Signature","path":"Secp256k1/ECDSA_Signature.html","kind":"struct","full_name":"Secp256k1::ECDSA_Signature","name":"ECDSA_Signature","abstract":false,"superclass":{"html_id":"github.com/q9f/secp256k1.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/q9f/secp256k1.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/q9f/secp256k1.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/q9f/secp256k1.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"structs.cr","line_number":127,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"A basic ECDSA Signature containing a random point `r` and the\nsignature proof `s`.\n\nSee: `Signature` for signature generation.\n\nProperties:\n* `r` (`BigInt`): the `x` coordinate of a random point `R`.\n* `s` (`BigInt`): the signature proof of a message.\n\n```\nsig = ECDSA_Signature.new r.x, proof\n```","summary":"<p>A basic ECDSA Signature containing a random point <code><a href=\"../Secp256k1/ECDSA_Signature.html#r:BigInt-instance-method\">#r</a></code> and the signature proof <code><a href=\"../Secp256k1/ECDSA_Signature.html#s:BigInt-instance-method\">#s</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(r:BigInt,s:BigInt)-class-method","html_id":"new(r:BigInt,s:BigInt)-class-method","name":"new","doc":"A signature always requires the random point `r` and the signature proof `s`.\n\nParameters:\n* `r` (`BigInt`): the `x` coordinate of a random point `R`.\n* `s` (`BigInt`): the signature proof of a message.","summary":"<p>A signature always requires the random point <code><a href=\"../Secp256k1/ECDSA_Signature.html#r:BigInt-instance-method\">#r</a></code> and the signature proof <code><a href=\"../Secp256k1/ECDSA_Signature.html#s:BigInt-instance-method\">#s</a></code>.</p>","abstract":false,"args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"BigInt"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"BigInt"}],"args_string":"(r : BigInt, s : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L139","def":{"name":"new","args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"BigInt"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(r, s)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"r:BigInt-instance-method","html_id":"r:BigInt-instance-method","name":"r","doc":"The `x` coordinate of a random point `R`.","summary":"<p>The <code>x</code> coordinate of a random point <code>R</code>.</p>","abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L129","def":{"name":"r","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@r"}},{"id":"r=(r:BigInt)-instance-method","html_id":"r=(r:BigInt)-instance-method","name":"r=","doc":"The `x` coordinate of a random point `R`.","summary":"<p>The <code>x</code> coordinate of a random point <code>R</code>.</p>","abstract":false,"args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"BigInt"}],"args_string":"(r : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L129","def":{"name":"r=","args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@r = r"}},{"id":"s:BigInt-instance-method","html_id":"s:BigInt-instance-method","name":"s","doc":"The signature proof of a message.","summary":"<p>The signature proof of a message.</p>","abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L132","def":{"name":"s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@s"}},{"id":"s=(s:BigInt)-instance-method","html_id":"s=(s:BigInt)-instance-method","name":"s=","doc":"The signature proof of a message.","summary":"<p>The signature proof of a message.</p>","abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"BigInt"}],"args_string":"(s : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L132","def":{"name":"s=","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@s = s"}}],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Ethereum","path":"Secp256k1/Ethereum.html","kind":"module","full_name":"Secp256k1::Ethereum","name":"Ethereum","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"ethereum.cr","line_number":19,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Implements the `Ethereum` address space for the `Secp256k1` library.","summary":"<p>Implements the <code><a href=\"../Secp256k1/Ethereum.html\">Ethereum</a></code> address space for the <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> library.</p>","class_methods":[{"id":"address_checksum(adr:String)-class-method","html_id":"address_checksum(adr:String)-class-method","name":"address_checksum","doc":"Returns a checksummed `Ethereum` address as per EIP-55.\n\nReference: [eips.ethereum.org/EIPS/eip-55](https://eips.ethereum.org/EIPS/eip-55)\n\nParameters:\n* `adr` (`String`): an unchecked `Ethereum` address.\n\n```\nSecp256k1::Ethereum.address_checksum \"0x7598c0fbaeb021161ce2e598f45ddee90fe5c6f7\"\n# => \"0x7598c0FBAEB021161ce2E598F45dDEe90FE5C6f7\"\n```\n\nRaises if address is malformed.","summary":"<p>Returns a checksummed <code><a href=\"../Secp256k1/Ethereum.html\">Ethereum</a></code> address as per EIP-55.</p>","abstract":false,"args":[{"name":"adr","doc":null,"default_value":"","external_name":"adr","restriction":"String"}],"args_string":"(adr : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L210","def":{"name":"address_checksum","args":[{"name":"adr","doc":null,"default_value":"","external_name":"adr","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"adr = adr.downcase\nif adr.size === 42\n  adr = adr[2, 40]\nend\nif adr.size === 40\n  keccak = Hash.keccak256_string(adr)\n  address = \"0x\"\n  i = 0\n  while i < adr.size\n    k = keccak[i].to_i(16)\n    if k >= 8\n      address = address + \"#{adr[i]}\".upcase\n    else\n      address = address + \"#{adr[i]}\".downcase\n    end\n    i = i + 1\n  end\n  return address\nelse\n  raise(\"malformed ethereum address (invalid size: #{adr.size})\")\nend\nreturn \"-999\"\n"}},{"id":"address_from_private(priv:BigInt)-class-method","html_id":"address_from_private(priv:BigInt)-class-method","name":"address_from_private","doc":"Generates a checksummed `Ethereum` address from a private key.\n\nParameters:\n* `priv` (`BigInt`): a private key as number.\n\n```\nSecp256k1::Ethereum.address_from_private BigInt.new(\"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\", 16)\n# => \"0x7598c0FBAEB021161ce2E598F45dDEe90FE5C6f7\"\n```\n\nNote, that the returned `Ethereum` address is already checksummed.","summary":"<p>Generates a checksummed <code><a href=\"../Secp256k1/Ethereum.html\">Ethereum</a></code> address from a private key.</p>","abstract":false,"args":[{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"}],"args_string":"(priv : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L299","def":{"name":"address_from_private","args":[{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"p = Secp256k1::Util.public_key_from_private(priv)\nreturn address_from_public_point(p)\n"}},{"id":"address_from_public_key(pub:String)-class-method","html_id":"address_from_public_key(pub:String)-class-method","name":"address_from_public_key","doc":"Generates a checksummed `Ethereum` address for an uncompressed public key.\n\nParameters:\n* `pub` (`String`): an uncompressed public key string.\n\n```\nSecp256k1::Ethereum.address_from_public_key \"d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a67299d1cf25955e9b6425583cbc33f4ab831f5a31ef88c7167e9eb714cc758a5\"\n# => \"0x7598c0FBAEB021161ce2E598F45dDEe90FE5C6f7\"\n```\n\nNote, that the returned `Ethereum` address is already checksummed.\n\nRaises if the public key is malformed.","summary":"<p>Generates a checksummed <code><a href=\"../Secp256k1/Ethereum.html\">Ethereum</a></code> address for an uncompressed public key.</p>","abstract":false,"args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"}],"args_string":"(pub : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L257","def":{"name":"address_from_public_key","args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if pub.size === 130\n  pub = pub[2, 128]\nend\nif pub.size === 128\n  keccak = Hash.keccak256(Hash.hex_to_bin(pub))\n  return address_checksum(keccak[24, 40])\nelse\n  raise(\"malformed public key (invalid key size: #{pub.size})\")\nend\nreturn \"-999\"\n"}},{"id":"address_from_public_point(p:Secp256k1::EC_Point)-class-method","html_id":"address_from_public_point(p:Secp256k1::EC_Point)-class-method","name":"address_from_public_point","doc":"Generates a checksummed `Ethereum` address from an public key as `EC_Point`.\n\nParameters:\n* `p` (`EC_Point`): a public key point with `x` and `y` coordinates.\n\nSee `address_from_public_key` and `EC_Point` for usage instructions.","summary":"<p>Generates a checksummed <code><a href=\"../Secp256k1/Ethereum.html\">Ethereum</a></code> address from an public key as <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Secp256k1::EC_Point"}],"args_string":"(p : Secp256k1::EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L282","def":{"name":"address_from_public_point","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Secp256k1::EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pub = Secp256k1::Util.public_key_uncompressed(p)\nreturn address_from_public_key(pub)\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Ethereum/Account","path":"Secp256k1/Ethereum/Account.html","kind":"class","full_name":"Secp256k1::Ethereum::Account","name":"Account","abstract":false,"superclass":{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/q9f/secp256k1.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"ethereum.cr","line_number":33,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Ethereum","kind":"module","full_name":"Secp256k1::Ethereum","name":"Ethereum"},"doc":"Implements an `Ethereum` account containing a `Keypair` and an address.\n\nProperties:\n* `key_pair` (`Keypair`): the `Keypair` containing the secret key.\n* `address` (`String`): the public checksummed `Ethereum` address.\n\n```\neth = Secp256k1::Ethereum::Account.new\neth.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\neth.address\n# => \"0x224008a0F3d3cB989c807F568c7f99Bf451328A6\"\n```","summary":"<p>Implements an <code><a href=\"../../Secp256k1/Ethereum.html\">Ethereum</a></code> account containing a <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> and an address.</p>","class_methods":[],"constructors":[{"id":"new(key_pair)-class-method","html_id":"new(key_pair)-class-method","name":"new","doc":"Generates an `Ethereum::Account` from a provided `Keypair`.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\neth = Secp256k1::Ethereum::Account.new key\n# => #<Secp256k1::Ethereum::Account:0x7f81ef21ab80>\n```","summary":"<p>Generates an <code><a href=\"../../Secp256k1/Ethereum/Account.html\">Ethereum::Account</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""}],"args_string":"(key_pair)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L57","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Generates a new `Ethereum::Account` from a fresh random `Keypair`.\n\n```\neth = Secp256k1::Ethereum::Account.new\n# => #<Secp256k1::Ethereum::Account:0x7f81ef21ab80>\n```","summary":"<p>Generates a new <code><a href=\"../../Secp256k1/Ethereum/Account.html\">Ethereum::Account</a></code> from a fresh random <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L45","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"address:String-instance-method","html_id":"address:String-instance-method","name":"address","doc":"The public checksummed `Ethereum` address.","summary":"<p>The public checksummed <code><a href=\"../../Secp256k1/Ethereum.html\">Ethereum</a></code> address.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L37","def":{"name":"address","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@address"}},{"id":"address=(address:String)-instance-method","html_id":"address=(address:String)-instance-method","name":"address=","doc":"The public checksummed `Ethereum` address.","summary":"<p>The public checksummed <code><a href=\"../../Secp256k1/Ethereum.html\">Ethereum</a></code> address.</p>","abstract":false,"args":[{"name":"address","doc":null,"default_value":"","external_name":"address","restriction":"String"}],"args_string":"(address : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L37","def":{"name":"address=","args":[{"name":"address","doc":null,"default_value":"","external_name":"address","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@address = address"}},{"id":"get_secret-instance-method","html_id":"get_secret-instance-method","name":"get_secret","doc":"Gets the private key as hexadecimal formatted string literal.\n\n```\neth.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n```","summary":"<p>Gets the private key as hexadecimal formatted string literal.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L67","def":{"name":"get_secret","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Util.to_padded_hex_32(@key_pair.private_key)"}},{"id":"key_pair:Keypair-instance-method","html_id":"key_pair:Keypair-instance-method","name":"key_pair","doc":"The `Keypair` containing the secret key.","summary":"<p>The <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> containing the secret key.</p>","abstract":false,"args":[],"args_string":" : Keypair","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L35","def":{"name":"key_pair","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Keypair","visibility":"Public","body":"@key_pair"}},{"id":"key_pair=(key_pair:Keypair)-instance-method","html_id":"key_pair=(key_pair:Keypair)-instance-method","name":"key_pair=","doc":"The `Keypair` containing the secret key.","summary":"<p>The <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> containing the secret key.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":"Keypair"}],"args_string":"(key_pair : Keypair)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L35","def":{"name":"key_pair=","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":"Keypair"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_pair = key_pair"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Gets the account formatted as `Ethereum` address.\n\n```\neth.to_s\n# => \"0x224008a0F3d3cB989c807F568c7f99Bf451328A6\"\n```","summary":"<p>Gets the account formatted as <code><a href=\"../../Secp256k1/Ethereum.html\">Ethereum</a></code> address.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L77","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Ethereum.address_checksum(@address)"}}],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Ethereum/Enode","path":"Secp256k1/Ethereum/Enode.html","kind":"class","full_name":"Secp256k1::Ethereum::Enode","name":"Enode","abstract":false,"superclass":{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/q9f/secp256k1.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"ethereum.cr","line_number":95,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Ethereum","kind":"module","full_name":"Secp256k1::Ethereum","name":"Ethereum"},"doc":"Implements an `Ethereum` devp2p enode containing a `Keypair` and an IP address.\n\nProperties:\n* `key_pair` (`Keypair`): the `Keypair` containing the secret key.\n* `address` (`Socket::IPAddress`): the public (or local) IP address with port.\n\n```\np2p = Secp256k1::Ethereum::Enode.new\np2p.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\np2p.to_s\n# => \"enode://e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b7d9011bb589e883d8a7947cfb37dc6b3c8beae9c614cab4a83009bd9d8732a9f@84.160.86.205:30303\"\n```","summary":"<p>Implements an <code><a href=\"../../Secp256k1/Ethereum.html\">Ethereum</a></code> devp2p enode containing a <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> and an IP address.</p>","class_methods":[],"constructors":[{"id":"new(key_pair,host,port)-class-method","html_id":"new(key_pair,host,port)-class-method","name":"new","doc":"Generates an `Ethereum::Enode` from a provided `Keypair` and a custom IP address with port.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\np2p = Secp256k1::Ethereum::Enode.new key, \"192.168.13.37\", 31337\n# => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>\n```","summary":"<p>Generates an <code><a href=\"../../Secp256k1/Ethereum/Enode.html\">Ethereum::Enode</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> and a custom IP address with port.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":""},{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"args_string":"(key_pair, host, port)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L147","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":""},{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair, host, port)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(key_pair,port)-class-method","html_id":"new(key_pair,port)-class-method","name":"new","doc":"Generates an `Ethereum::Enode` from a provided `Keypair` and a custom port.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\np2p = Secp256k1::Ethereum::Enode.new key, 50000\n# => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>\n```\n\nNote, this tries to find out the public IP address and silently falls back to \"127.0.0.1\" if it fails.","summary":"<p>Generates an <code><a href=\"../../Secp256k1/Ethereum/Enode.html\">Ethereum::Enode</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> and a custom port.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"args_string":"(key_pair, port)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L136","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""},{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair, port)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(key_pair)-class-method","html_id":"new(key_pair)-class-method","name":"new","doc":"Generates an `Ethereum::Enode` from a provided `Keypair`.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\np2p = Secp256k1::Ethereum::Enode.new key\n# => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>\n```\n\nNote, this tries to find out the public IP address and silently falls back to \"127.0.0.1\" if it fails.","summary":"<p>Generates an <code><a href=\"../../Secp256k1/Ethereum/Enode.html\">Ethereum::Enode</a></code> from a provided <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""}],"args_string":"(key_pair)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L123","def":{"name":"new","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key_pair)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Generates a new `Ethereum::Enode` from a fresh random `Keypair`.\n\n```\np2p = Secp256k1::Ethereum::Enode.new\n# => #<Secp256k1::Ethereum::Enode:0x7f81ef21ab80>\n```\n\nNote, this tries to find out the public IP address and silently falls back to \"127.0.0.1\" if it fails.","summary":"<p>Generates a new <code><a href=\"../../Secp256k1/Ethereum/Enode.html\">Ethereum::Enode</a></code> from a fresh random <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L109","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"address:Socket::IPAddress-instance-method","html_id":"address:Socket::IPAddress-instance-method","name":"address","doc":"The public (or local) IP address with port.","summary":"<p>The public (or local) IP address with port.</p>","abstract":false,"args":[],"args_string":" : Socket::IPAddress","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L99","def":{"name":"address","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Socket::IPAddress","visibility":"Public","body":"@address"}},{"id":"address=(address:Socket::IPAddress)-instance-method","html_id":"address=(address:Socket::IPAddress)-instance-method","name":"address=","doc":"The public (or local) IP address with port.","summary":"<p>The public (or local) IP address with port.</p>","abstract":false,"args":[{"name":"address","doc":null,"default_value":"","external_name":"address","restriction":"Socket::IPAddress"}],"args_string":"(address : Socket::IPAddress)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L99","def":{"name":"address=","args":[{"name":"address","doc":null,"default_value":"","external_name":"address","restriction":"Socket::IPAddress"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@address = address"}},{"id":"get_my_ip-instance-method","html_id":"get_my_ip-instance-method","name":"get_my_ip","doc":"Tries to find out the public IP address for the node.\n\nIt queries [ident.me](http://ident.me/) for a potential public IP and silently\nfalls back to \"127.0.0.1\" if it fails without raising. _Should be used with caution._\n\n```\np2p.get_my_ip\n# => \"84.160.86.205\"\n```","summary":"<p>Tries to find out the public IP address for the node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L160","def":{"name":"get_my_ip","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ip = nil\nbegin\n  ip = (HTTP::Client.get(\"http://ident.me/\")).body.to_s\nrescue\n  ip = \"127.0.0.1\"\nensure\n  if ip.nil? || ip.size < 2\n    ip = \"127.0.0.1\"\n  end\nend\nreturn ip\n"}},{"id":"get_secret-instance-method","html_id":"get_secret-instance-method","name":"get_secret","doc":"Gets the private key as hexadecimal formatted string literal.\n\n```\np2p.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n```","summary":"<p>Gets the private key as hexadecimal formatted string literal.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L182","def":{"name":"get_secret","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Util.to_padded_hex_32(@key_pair.private_key)"}},{"id":"key_pair:Keypair-instance-method","html_id":"key_pair:Keypair-instance-method","name":"key_pair","doc":"The `Keypair` containing the secret key.","summary":"<p>The <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> containing the secret key.</p>","abstract":false,"args":[],"args_string":" : Keypair","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L97","def":{"name":"key_pair","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Keypair","visibility":"Public","body":"@key_pair"}},{"id":"key_pair=(key_pair:Keypair)-instance-method","html_id":"key_pair=(key_pair:Keypair)-instance-method","name":"key_pair=","doc":"The `Keypair` containing the secret key.","summary":"<p>The <code><a href=\"../../Secp256k1/Keypair.html\">Keypair</a></code> containing the secret key.</p>","abstract":false,"args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":"Keypair"}],"args_string":"(key_pair : Keypair)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L97","def":{"name":"key_pair=","args":[{"name":"key_pair","doc":null,"default_value":"","external_name":"key_pair","restriction":"Keypair"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_pair = key_pair"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Gets the `Enode` formatted as devp2p enode address.\n\n```\np2p.to_s\n# => \"enode://e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b7d9011bb589e883d8a7947cfb37dc6b3c8beae9c614cab4a83009bd9d8732a9f@84.160.86.205:30303\"\n```","summary":"<p>Gets the <code><a href=\"../../Secp256k1/Ethereum/Enode.html\">Enode</a></code> formatted as devp2p enode address.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/ethereum.cr#L192","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return \"enode://#{@key_pair.to_s}@#{@address.to_s}\""}}],"macros":[],"types":[]}]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Hash","path":"Secp256k1/Hash.html","kind":"module","full_name":"Secp256k1::Hash","name":"Hash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"hash.cr","line_number":20,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"BASE_56","name":"BASE_56","value":"\"23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz\"","doc":"The Base-56 alphabet for `Bitcoin` mini-private keys is a Base-58 alphabet\nwithout `1` and `o` to additionally omit more similar-looking letters.","summary":"<p>The Base-56 alphabet for <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> mini-private keys is a Base-58 alphabet without <code>1</code> and <code>o</code> to additionally omit more similar-looking letters.</p>"},{"id":"BASE_58","name":"BASE_58","value":"\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","doc":"The Base-58 alphabet for `Bitcoin` addresses is a Base-64 alphabet without\n`0`, `O`, `I`, and `l` to omit similar-looking letters.","summary":"<p>The Base-58 alphabet for <code><a href=\"../Secp256k1/Bitcoin.html\">Bitcoin</a></code> addresses is a Base-64 alphabet without <code>0</code>, <code>O</code>, <code>I</code>, and <code>l</code> to omit similar-looking letters.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"The `Secp256k1::Hash` module wraps various hashing functions for convenience\nand exposes them for general use.","summary":"<p>The <code><a href=\"../Secp256k1/Hash.html\">Secp256k1::Hash</a></code> module wraps various hashing functions for convenience and exposes them for general use.</p>","class_methods":[{"id":"base56_char(i:Int32)-class-method","html_id":"base56_char(i:Int32)-class-method","name":"base56_char","doc":"Gets a character from the Base-56 alphabet at position `i`.\n\nParameters:\n* `i` (`Int32`): the position in the Base-56 alphabet.\n\n```\nSecp256k1::Hash.base56_char 13\n# => 'F'\n```","summary":"<p>Gets a character from the Base-56 alphabet at position <code>i</code>.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L212","def":{"name":"base56_char","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"i = i % 56\nreturn BASE_56[i]\n"}},{"id":"base58_char(i:Int32)-class-method","html_id":"base58_char(i:Int32)-class-method","name":"base58_char","doc":"Gets a character from the Base-58 alphabet at position `i`.\n\nParameters:\n* `i` (`Int32`): the position in the Base-58 alphabet.\n\n```\nSecp256k1::Hash.base58_char 13\n# => 'E'\n```","summary":"<p>Gets a character from the Base-58 alphabet at position <code>i</code>.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L226","def":{"name":"base58_char","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"i = i % 58\nreturn BASE_58[i]\n"}},{"id":"base58_decode(s:String)-class-method","html_id":"base58_decode(s:String)-class-method","name":"base58_decode","doc":"Decodes a hexadecimal string from a Base-58 encoded string.\n\nParameters:\n* `s` (`String`): The Base-58 encoded string to be decoded.\n\n```\nSecp256k1::Hash.base58_decode \"1CSSfnxKnQK1GDWSaWqNpYXSdfPTtSooHt\"\n# => \"007d7935bde6c9341de87a4d64588783033e23472d7322c46b\"\n```","summary":"<p>Decodes a hexadecimal string from a Base-58 encoded string.</p>","abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"args_string":"(s : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L146","def":{"name":"base58_decode","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"index = 0\ndecimal = BigInt.new(0)\nwhile index < s.size\n  b58_char = s[index]\n  position = BASE_58.index(b58_char)\n  if !position.nil?\n    decimal = (decimal * 58) + position\n    index = index + 1\n  else\n    raise(\"cannot decode, invalid base58 character: '#{s[index]}'\")\n    return \"-999\"\n  end\nend\nhex = decimal.to_s(16)\nleading = 0\nwhile s[leading] === '1'\n  leading = leading + 1\n  hex = \"00#{hex}\"\nend\nreturn hex\n"}},{"id":"base58_encode(h:String)-class-method","html_id":"base58_encode(h:String)-class-method","name":"base58_encode","doc":"Encodes a Base-58 string from a hexadecimal string.\n\nParameters:\n* `h` (`String`): The hexadecimal string to be encoded.\n\n```\nSecp256k1::Hash.base58_encode \"007d7935bde6c9341de87a4d64588783033e23472d7322c46b\"\n# => \"1CSSfnxKnQK1GDWSaWqNpYXSdfPTtSooHt\"\n```","summary":"<p>Encodes a Base-58 string from a hexadecimal string.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"args_string":"(h : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L181","def":{"name":"base58_encode","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pub = BigInt.new(h, 16)\nadr = String.new\nwhile pub > 0\n  pub, rem = pub.divmod(58)\n  adr = adr + (base58_char(rem.to_i))\nend\ni, s = 0, 2\ncurrent_byte = h[i, s]\nwhile (current_byte.to_i(16)) === 0\n  adr = \"#{adr}1\"\n  i = i + s\n  current_byte = h[i, s]\nend\nreturn adr.reverse\n"}},{"id":"bin_to_hex(b:Bytes)-class-method","html_id":"bin_to_hex(b:Bytes)-class-method","name":"bin_to_hex","doc":"Helper function to convert byte arrays to hexadecimal strings.\n\nParameters:\n* `b` (`Bytes`): the byte array to be converted.\n\n```\nSecp256k1::Hash.bin_to_hex Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]\n=> \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n```","summary":"<p>Helper function to convert byte arrays to hexadecimal strings.</p>","abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"args_string":"(b : Bytes)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L240","def":{"name":"bin_to_hex","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return b.hexstring"}},{"id":"hex_to_bin(h:String)-class-method","html_id":"hex_to_bin(h:String)-class-method","name":"hex_to_bin","doc":"Helper function to convert hexadecimal strings to byte arrays.\n\nParameters:\n* `h` (`String`): the hexadecimal string to be converted.\n\n```\nSecp256k1::Hash.hex_to_bin \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n=> Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]\n```","summary":"<p>Helper function to convert hexadecimal strings to byte arrays.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"args_string":"(h : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L253","def":{"name":"hex_to_bin","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return h.hexbytes"}},{"id":"keccak256(b:Bytes)-class-method","html_id":"keccak256(b:Bytes)-class-method","name":"keccak256","doc":"Operating a Keccak-256 hash on a byte array.\n\nParameters:\n* `b` (`Bytes`): the byte array to be hashed.\n\n```\nSecp256k1::Hash.keccak256 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]\n# => \"fcb41efa0456ba9f27e573422d6b5898c61da6f2137d07e4dae618eddd72e003\"\n```","summary":"<p>Operating a Keccak-256 hash on a byte array.</p>","abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"args_string":"(b : Bytes)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L66","def":{"name":"keccak256","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"keccak = Digest::Keccak3.new(256)\nreturn (keccak.update(b)).hexdigest\n"}},{"id":"keccak256_string(h:String)-class-method","html_id":"keccak256_string(h:String)-class-method","name":"keccak256_string","doc":"Operating a Keccak-256 hash on an actual string literal.\n\nParameters:\n* `h` (`String`): the string literal to be hashed.\n\n```\nSecp256k1::Hash.keccak256_string \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n# => \"99cfa79866ec88f87f8e25a98a4b9873f3f8ee82482a317a5494572b00f51cec\"\n```","summary":"<p>Operating a Keccak-256 hash on an actual string literal.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"args_string":"(h : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L80","def":{"name":"keccak256_string","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"keccak = Digest::Keccak3.new(256)\nreturn (keccak.update(h)).hexdigest\n"}},{"id":"ripemd160(b:Bytes)-class-method","html_id":"ripemd160(b:Bytes)-class-method","name":"ripemd160","doc":"Operating a RIPEMD-160 hash on a byte array.\n\nParameters:\n* `b` (`Bytes`): the byte array to be hashed.\n\n```\nSecp256k1::Hash.ripemd160 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]\n# => \"5f3455f9ac58e25be08c99a7090108751b4796b9\"\n```","summary":"<p>Operating a RIPEMD-160 hash on a byte array.</p>","abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"args_string":"(b : Bytes)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L120","def":{"name":"ripemd160","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return ((OpenSSL::Digest.new(\"RIPEMD160\")).update(b)).hexdigest"}},{"id":"ripemd160_string(h:String)-class-method","html_id":"ripemd160_string(h:String)-class-method","name":"ripemd160_string","doc":"Operating a RIPEMD-160 hash on an actual string literal.\n\nParameters:\n* `h` (`String`): the string literal to be hashed.\n\n```\nSecp256k1::Hash.ripemd160_string \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n# => \"46dff6cd5666c8e67db26ac0dfaf685bf71fc5f6\"\n```","summary":"<p>Operating a RIPEMD-160 hash on an actual string literal.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"args_string":"(h : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L133","def":{"name":"ripemd160_string","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return ((OpenSSL::Digest.new(\"RIPEMD160\")).update(h)).hexdigest"}},{"id":"sha256(b:Bytes)-class-method","html_id":"sha256(b:Bytes)-class-method","name":"sha256","doc":"Operating a SHA2-256 hash on a byte array.\n\nParameters:\n* `b` (`Bytes`): the byte array to be hashed.\n\n```\nSecp256k1::Hash.sha256 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]\n# => \"2739cc5f45c0e05236527e4e687dc54f0d5e88be64b9a90e5264a6721c0c71f2\"\n```","summary":"<p>Operating a SHA2-256 hash on a byte array.</p>","abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"args_string":"(b : Bytes)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L94","def":{"name":"sha256","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return ((OpenSSL::Digest.new(\"SHA256\")).update(b)).hexdigest"}},{"id":"sha256_string(h:String)-class-method","html_id":"sha256_string(h:String)-class-method","name":"sha256_string","doc":"Operating a SHA2-256 hash on an actual string literal.\n\nParameters:\n* `h` (`String`): the string literal to be hashed.\n\n```\nSecp256k1::Hash.sha256_string \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n# => \"452a41c28c9981faebb402095a5d553de28dc212338057aed27081110dfb907a\"\n```","summary":"<p>Operating a SHA2-256 hash on an actual string literal.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"args_string":"(h : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L107","def":{"name":"sha256_string","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return ((OpenSSL::Digest.new(\"SHA256\")).update(h)).hexdigest"}},{"id":"sha3(b:Bytes)-class-method","html_id":"sha3(b:Bytes)-class-method","name":"sha3","doc":"Operating a SHA3-256 hash on a byte array.\n\nParameters:\n* `b` (`Bytes`): the byte array to be hashed.\n\n```\nSecp256k1::Hash.sha3 Bytes[183, 149, 205, 44, 92, 224, 204, 99, 44, 161, 246, 94, 146, 27, 156, 117, 27, 54, 62, 151, 252, 174, 236, 129, 192, 42, 133, 183, 99, 68, 130, 104]\n# => \"66bb65180108362a3e25ba8282f7b96bfe840ce34a2e5dbc421aa8a590cc5f2e\"\n```","summary":"<p>Operating a SHA3-256 hash on a byte array.</p>","abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"args_string":"(b : Bytes)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L38","def":{"name":"sha3","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sha3 = Digest::SHA3.new(256)\nreturn (sha3.update(b)).hexdigest\n"}},{"id":"sha3_string(h:String)-class-method","html_id":"sha3_string(h:String)-class-method","name":"sha3_string","doc":"Operating a SHA3-256 hash on an actual string literal.\n\nParameters:\n* `h` (`String`): the string literal to be hashed.\n\n```\nSecp256k1::Hash.sha3_string \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n# => \"aedc012933679615eb93fb0063f53010e6f0034e92aaccf97dacc46e338037e9\"\n```","summary":"<p>Operating a SHA3-256 hash on an actual string literal.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"args_string":"(h : String)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/hash.cr#L52","def":{"name":"sha3_string","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sha3 = Digest::SHA3.new(256)\nreturn (sha3.update(h)).hexdigest\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Keypair","path":"Secp256k1/Keypair.html","kind":"class","full_name":"Secp256k1::Keypair","name":"Keypair","abstract":false,"superclass":{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/q9f/secp256k1.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/q9f/secp256k1.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"structs.cr","line_number":34,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Implements a `Secp256k1` key pair containing a private and a public key.\n\nProperties:\n* `private_key` (`BigInt`): the secret as known as the private key.\n* `public_key` (`EC_Point`): the point on the elliptic curve as known as the public key.\n\n```\nkey = Secp256k1::Keypair.new\nkey.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\nkey.to_s\n# => \"e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b7d9011bb589e883d8a7947cfb37dc6b3c8beae9c614cab4a83009bd9d8732a9f\"\n```","summary":"<p>Implements a <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> key pair containing a private and a public key.</p>","class_methods":[],"constructors":[{"id":"new(private_key)-class-method","html_id":"new(private_key)-class-method","name":"new","doc":"Generates a new keypair using a provided private key.\n\nParameters:\n* `private_key` (`BigInt`): the secret as known as the private key.\n\n```\nkey = Secp256k1::Keypair.new BigInt.new(\"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\", 16)\n# => #<Secp256k1::Keypair:0x7f8be5611d80>\n```","summary":"<p>Generates a new keypair using a provided private key.</p>","abstract":false,"args":[{"name":"private_key","doc":null,"default_value":"","external_name":"private_key","restriction":""}],"args_string":"(private_key)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L61","def":{"name":"new","args":[{"name":"private_key","doc":null,"default_value":"","external_name":"private_key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(private_key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Generates a new keypair using a fresh random private key.\n\n```\nkey = Secp256k1::Keypair.new\n# => #<Secp256k1::Keypair:0x7f8be5611d80>\n```","summary":"<p>Generates a new keypair using a fresh random private key.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L47","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get_secret-instance-method","html_id":"get_secret-instance-method","name":"get_secret","doc":"Gets the private key as hexadecimal formatted string literal.\n\n```\nkey.get_secret\n# => \"53d77137b39427a35d8c4b187f532d3912e1e7135985e730633e1e3c1b87ce97\"\n```","summary":"<p>Gets the private key as hexadecimal formatted string literal.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L71","def":{"name":"get_secret","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Util.to_padded_hex_32(@private_key)"}},{"id":"private_key:BigInt-instance-method","html_id":"private_key:BigInt-instance-method","name":"private_key","doc":"The secret as known as the private key.","summary":"<p>The secret as known as the private key.</p>","abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L36","def":{"name":"private_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@private_key"}},{"id":"private_key=(private_key:BigInt)-instance-method","html_id":"private_key=(private_key:BigInt)-instance-method","name":"private_key=","doc":"The secret as known as the private key.","summary":"<p>The secret as known as the private key.</p>","abstract":false,"args":[{"name":"private_key","doc":null,"default_value":"","external_name":"private_key","restriction":"BigInt"}],"args_string":"(private_key : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L36","def":{"name":"private_key=","args":[{"name":"private_key","doc":null,"default_value":"","external_name":"private_key","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@private_key = private_key"}},{"id":"public_key:EC_Point-instance-method","html_id":"public_key:EC_Point-instance-method","name":"public_key","doc":"The point on the elliptic curve as known as the public key.","summary":"<p>The point on the elliptic curve as known as the public key.</p>","abstract":false,"args":[],"args_string":" : EC_Point","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L39","def":{"name":"public_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"EC_Point","visibility":"Public","body":"@public_key"}},{"id":"public_key=(public_key:EC_Point)-instance-method","html_id":"public_key=(public_key:EC_Point)-instance-method","name":"public_key=","doc":"The point on the elliptic curve as known as the public key.","summary":"<p>The point on the elliptic curve as known as the public key.</p>","abstract":false,"args":[{"name":"public_key","doc":null,"default_value":"","external_name":"public_key","restriction":"EC_Point"}],"args_string":"(public_key : EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L39","def":{"name":"public_key=","args":[{"name":"public_key","doc":null,"default_value":"","external_name":"public_key","restriction":"EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@public_key = public_key"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Gets the key formatted as uncompressed public key string.\n\n```\nkey.to_s\n# => \"e097fc69f0b92f711620511c07fefdd648e469df46b1e4385a00a1786f6bc55b7d9011bb589e883d8a7947cfb37dc6b3c8beae9c614cab4a83009bd9d8732a9f\"\n```","summary":"<p>Gets the key formatted as uncompressed public key string.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/structs.cr#L81","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Util.public_key_uncompressed(@public_key)"}}],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Signature","path":"Secp256k1/Signature.html","kind":"module","full_name":"Secp256k1::Signature","name":"Signature","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"signature.cr","line_number":18,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/signature.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"Implements `ECDSA_Signature` generation and verification for `Secp256k1`\nelliptic curves.\nRef: [cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages](https://cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages)","summary":"<p>Implements <code><a href=\"../Secp256k1/ECDSA_Signature.html\">ECDSA_Signature</a></code> generation and verification for <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> elliptic curves.</p>","class_methods":[{"id":"sign(msg:String,priv:BigInt)-class-method","html_id":"sign(msg:String,priv:BigInt)-class-method","name":"sign","doc":"Signs a message and creates a signature proof using a private key.\n\nThe ECDSA signing algorithm (RFC-6979) takes as input a message `msg`\nand a private key `priv`. It produces as output a signature, which\nconsists of pair of integers `(r, s)`, where `r` is the `x`-coordinate\nof a random point on our curve and `s` is the signature proof.\n\nParameters:\n* `msg` (`String`): A message string to sign.\n* `priv` (`BigInt`): A private key to sign with.\n\n```\nsig = Secp256k1::Signature.sign \"Hello, World!\", BigInt.new(\"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\", 16)\nsig.r\n# => \"63945398370917837063250848409972066837033757647691696776146735867163610886143\"\nsig.s\n# => \"20291418537568297129028959685291490143232574306335372594306006819765182564103\"\n```","summary":"<p>Signs a message and creates a signature proof using a private key.</p>","abstract":false,"args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":"String"},{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"}],"args_string":"(msg : String, priv : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/signature.cr#L37","def":{"name":"sign","args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":"String"},{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hash = BigInt.new(Hash.sha256_string(msg), 16)\nk = Util.new_private_key\nr = (Core.ec_mul(EC_BASE_G, k)).x % EC_ORDER_N\nk_inv = Core.ec_mod_inv(k, EC_ORDER_N)\ns = ((hash + (r * priv)) * k_inv) % EC_ORDER_N\nsig = ECDSA_Signature.new(r, s)\nreturn sig\n"}},{"id":"verify(msg:String,sig:ECDSA_Signature,pub:EC_Point)-class-method","html_id":"verify(msg:String,sig:ECDSA_Signature,pub:EC_Point)-class-method","name":"verify","doc":"Verifies a signature of a message against a public key.\n\nThe algorithm to verify an ECDSA signature takes as input the signed message `msg`\nand the signature `(r, s)` produced from `sign` and the public key `pub`,\ncorresponding to the signer's private key. The result is boolean.\n\nParameters:\n* `msg` (`String`): A message string to verify.\n* `sig` (`ECDSA_Signature`): A signature to verify the message.\n* `pub` (`EC_Point`): A public key to verify the signature against.\n\n```\npub = Secp256k1::Util.restore_public_key \"03d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a\"\nmsg = \"Hello, World!\"\nsig = Secp256k1::ECDSA_Signature.new BigInt.new(\"63945398370917837063250848409972066837033757647691696776146735867163610886143\"), BigInt.new(\"20291418537568297129028959685291490143232574306335372594306006819765182564103\")\n\nSecp256k1::Signature.verify msg, sig, pub\n# => true\n```","summary":"<p>Verifies a signature of a message against a public key.</p>","abstract":false,"args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":"String"},{"name":"sig","doc":null,"default_value":"","external_name":"sig","restriction":"ECDSA_Signature"},{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"EC_Point"}],"args_string":"(msg : String, sig : ECDSA_Signature, pub : EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/signature.cr#L76","def":{"name":"verify","args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":"String"},{"name":"sig","doc":null,"default_value":"","external_name":"sig","restriction":"ECDSA_Signature"},{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hash = BigInt.new(Hash.sha256_string(msg), 16)\nreturn verify_hash(hash, sig, pub)\n"}},{"id":"verify_hash(hash:BigInt,sig:ECDSA_Signature,pub:EC_Point)-class-method","html_id":"verify_hash(hash:BigInt,sig:ECDSA_Signature,pub:EC_Point)-class-method","name":"verify_hash","doc":"Verifies a signature of a message hash against a public key.\n\nSame as `verify`, just using the hashed message directly.\n\nParameters:\n* `hash` (`BigInt`): A SHA-256 hash of the message to verify.\n* `sig` (`ECDSA_Signature`): A signature to verify the message.\n* `pub` (`EC_Point`): A public key to verify the signature against.\n\nReturns _true_ if signature is valid. See `verify` for usage example.","summary":"<p>Verifies a signature of a message hash against a public key.</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"BigInt"},{"name":"sig","doc":null,"default_value":"","external_name":"sig","restriction":"ECDSA_Signature"},{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"EC_Point"}],"args_string":"(hash : BigInt, sig : ECDSA_Signature, pub : EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/signature.cr#L92","def":{"name":"verify_hash","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"BigInt"},{"name":"sig","doc":null,"default_value":"","external_name":"sig","restriction":"ECDSA_Signature"},{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"s_inv = Core.ec_mod_inv(sig.s, EC_ORDER_N)\np0 = Core.ec_mul(EC_BASE_G, (hash * s_inv) % EC_ORDER_N)\np1 = Core.ec_mul(pub, (sig.r * s_inv) % EC_ORDER_N)\np = Core.ec_add(p0, p1)\nreturn sig.r === p.x\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1/Util","path":"Secp256k1/Util.html","kind":"module","full_name":"Secp256k1::Util","name":"Util","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"util.cr","line_number":23,"url":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr"}],"repository_name":"github.com/q9f/secp256k1.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/q9f/secp256k1.cr/Secp256k1","kind":"module","full_name":"Secp256k1","name":"Secp256k1"},"doc":"A collection of utilities for `Secp256k1` key management, e.g., private key\ngeneration, public key conversions, key formatting, or hex padding.","summary":"<p>A collection of utilities for <code><a href=\"../Secp256k1.html\">Secp256k1</a></code> key management, e.g., private key generation, public key conversions, key formatting, or hex padding.</p>","class_methods":[{"id":"decode_compressed_public_key(pub:String,prime=EC_PRIME_P)-class-method","html_id":"decode_compressed_public_key(pub:String,prime=EC_PRIME_P)-class-method","name":"decode_compressed_public_key","doc":"Decodes a public key as `EC_Point` from a compressed public key string.\n\nIf unsure, `restore_public_key` should be used.\n\nParameters:\n* `pub` (`String`): the public key in prefixed compressed format.\n* `prime` (`BigInt`): the prime number that shapes the field, default: `EC_PRIME_P`.\n\n```\nSecp256k1::Util.decode_compressed_public_key \"03d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a\"\n```\n\nReturns an `EC_Point` containing the public key.\n\nRaises if compressed public key is malformed or comes with invalid prefix.","summary":"<p>Decodes a public key as <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code> from a compressed public key string.</p>","abstract":false,"args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"args_string":"(pub : String, prime = <span class=\"t\">EC_PRIME_P</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L163","def":{"name":"decode_compressed_public_key","args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if pub.size === 66\n  prefix = pub[0, 2]\n  if (prefix === \"02\") || (prefix === \"03\")\n    x = BigInt.new(pub[2, 64], 16)\n    a = (x ** 3) % prime\n    a = (a + 7) % prime\n    e = ((prime + 1) // 4) % prime\n    y = BigInt.new\n    LibGMP.mpz_powm_sec(y, a, e, prime)\n    parity = prefix.to_i - 2\n    if (y % 2) != parity\n      y = (-y) % prime\n    end\n    return EC_Point.new(x, y)\n  else\n    raise(\"invalid prefix for compressed public key: #{prefix}\")\n  end\nelse\n  raise(\"malformed compressed public key (invalid key size: #{pub.size})\")\nend\ni = BigInt.new(-999)\nreturn EC_Point.new(i, i)\n"}},{"id":"new_private_key-class-method","html_id":"new_private_key-class-method","name":"new_private_key","doc":"A helper function to generate 32 pseudo-random bytes within the elliptic\ncurve field size of `EC_ORDER_N`.\n\n```\nSecp256k1::Util.new_private_key\n# => \"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\"\n```","summary":"<p>A helper function to generate 32 pseudo-random bytes within the elliptic curve field size of <code><a href=\"../Secp256k1.html#EC_ORDER_N\">EC_ORDER_N</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L66","def":{"name":"new_private_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"key = -999\nwhile !key > 0\n  key = Random::Secure.hex(32)\n  key = BigInt.new(key, 16)\nend\nreturn key % EC_ORDER_N\n"}},{"id":"public_key_compressed_prefix(p:EC_Point)-class-method","html_id":"public_key_compressed_prefix(p:EC_Point)-class-method","name":"public_key_compressed_prefix","doc":"Exports the compressed public key from an `EC_Point` with either the\nprefix `\"02\"` or `\"03\"`.\n\nThe prefix can be later used to recover the `y` coordinate of the public key,\nsee `decode_compressed_public_key`. `Bitcoin` uses this format\nto generate shorter addresses as compared to using uncompressed keys.\n\nParameters:\n* `p` (`EC_Point`): the public key point which shall be compressed.\n\n```\nSecp256k1::Util.public_key_compressed_prefix my_public_key\n# => \"03d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a\"\n```","summary":"<p>Exports the compressed public key from an <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code> with either the prefix <code>\"02\"</code> or <code>\"03\"</code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"}],"args_string":"(p : EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L109","def":{"name":"public_key_compressed_prefix","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"prefix = (p.y % 2) === 1 ? \"03\" : \"02\"\nreturn \"#{prefix}#{public_key_compressed(p)}\"\n"}},{"id":"public_key_from_private(priv:BigInt)-class-method","html_id":"public_key_from_private(priv:BigInt)-class-method","name":"public_key_from_private","doc":"Gets a public key from a private key.\n\nThis is basically a wrapper function to perform an elliptic curve\nmultiplication with the generator point `g` and a provided private key `priv`.\n\nParameters:\n* `priv` (`BigInt`): the private key to be used.\n\n```\nSecp256k1::Util.public_key_from_private BigInt.new(\"b795cd2c5ce0cc632ca1f65e921b9c751b363e97fcaeec81c02a85b763448268\", 16)\n```\n\nReturns an `EC_Point` containing the public key.","summary":"<p>Gets a public key from a private key.</p>","abstract":false,"args":[{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"}],"args_string":"(priv : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L264","def":{"name":"public_key_from_private","args":[{"name":"priv","doc":null,"default_value":"","external_name":"priv","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return Core.ec_mul(EC_BASE_G, priv)"}},{"id":"public_key_uncompressed(p:EC_Point)-class-method","html_id":"public_key_uncompressed(p:EC_Point)-class-method","name":"public_key_uncompressed","doc":"Exports the uncompressed public key from an `EC_Point` without prefix.\n\n`Ethereum` uses this format to generate addresses. For prefixed\nuncompressed public keys, see `public_key_uncompressed_prefix`.\n\nParameters:\n* `p` (`EC_Point`): the public key point which shall be uncompressed.\n\n```\nSecp256k1::Util.public_key_uncompressed my_public_key\n# => \"d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a67299d1cf25955e9b6425583cbc33f4ab831f5a31ef88c7167e9eb714cc758a5\"\n```","summary":"<p>Exports the uncompressed public key from an <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code> without prefix.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"}],"args_string":"(p : EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L126","def":{"name":"public_key_uncompressed","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = to_padded_hex_32(p.x)\ny = to_padded_hex_32(p.y)\nreturn \"#{x}#{y}\"\n"}},{"id":"public_key_uncompressed_prefix(p:EC_Point)-class-method","html_id":"public_key_uncompressed_prefix(p:EC_Point)-class-method","name":"public_key_uncompressed_prefix","doc":"Exports the uncompressed public key from an `EC_Point` with prefix `\"04\"`.\n\n`Bitcoin` uses this format to generate uncompressed addresses.\nFor unprefixed public keys, see `public_key_uncompressed`.\n\nParameters:\n* `p` (`EC_Point`): the public key point which shall be uncompressed.\n\n```\nSecp256k1::Util.public_key_uncompressed_prefix my_public_key\n# => \"04d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a67299d1cf25955e9b6425583cbc33f4ab831f5a31ef88c7167e9eb714cc758a5\"\n```","summary":"<p>Exports the uncompressed public key from an <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code> with prefix <code>\"04\"</code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"}],"args_string":"(p : EC_Point)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L144","def":{"name":"public_key_uncompressed_prefix","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"EC_Point"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return \"04#{public_key_uncompressed(p)}\""}},{"id":"restore_public_key(pub:String,prime=EC_PRIME_P)-class-method","html_id":"restore_public_key(pub:String,prime=EC_PRIME_P)-class-method","name":"restore_public_key","doc":"Detects public key type and tries to restore the `EC_Point` from it.\n\nParameters:\n* `pub` (`String`): the public key in any format.\n* `prime` (`BigInt`): the prime number that shapes the field, default: `EC_PRIME_P`.\n\n```\nSecp256k1::Util.restore_public_key \"d885aed4bcaf3a8c95a57e3be08caa1bd6a060a68b9795c03129073597fcb19a67299d1cf25955e9b6425583cbc33f4ab831f5a31ef88c7167e9eb714cc758a5\"\n```\n\nReturns an `EC_Point` containing the public key.\n\nRaises if public key format is unknown.","summary":"<p>Detects public key type and tries to restore the <code><a href=\"../Secp256k1/EC_Point.html\">EC_Point</a></code> from it.</p>","abstract":false,"args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"args_string":"(pub : String, prime = <span class=\"t\">EC_PRIME_P</span>)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L238","def":{"name":"restore_public_key","args":[{"name":"pub","doc":null,"default_value":"","external_name":"pub","restriction":"String"},{"name":"prime","doc":null,"default_value":"EC_PRIME_P","external_name":"prime","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case pub.size\nwhen 130, 128\n  return decode_uncompressed_public_key(pub)\nwhen 66\n  return decode_compressed_public_key(pub, prime)\nelse\n  raise(\"unknown public key format (invalid key size: #{pub.size})\")\nend\ni = BigInt.new(-999)\nreturn EC_Point.new(i, i)\n"}},{"id":"to_padded_hex_01(i:Int32)-class-method","html_id":"to_padded_hex_01(i:Int32)-class-method","name":"to_padded_hex_01","doc":"A generic utility to encode single hex bytes as strings, e.g., \"07\"\n\nParameters:\n* `i` (`Int32`): the integer to be formatted as padded hex byte.\n\n```\nSecp256k1::Util.to_padded_hex_01 7\n# => \"07\"\n```","summary":"<p>A generic utility to encode single hex bytes as strings, e.g., \"07\"</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L33","def":{"name":"to_padded_hex_01","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hex = i.to_s(16)\nwhile hex.size < 2\n  hex = '0' + hex\nend\nreturn hex\n"}},{"id":"to_padded_hex_32(i:BigInt)-class-method","html_id":"to_padded_hex_32(i:BigInt)-class-method","name":"to_padded_hex_32","doc":"An utility tool to ensure hex keys are always 32 bytes;\nit pads the number with leading zeros if it's shorter.\n\nParameters:\n* `i` (`BigInt`): the integer to be formatted as padded hex byte string.\n\n```\nSecp256k1::Util.to_padded_hex_32 BigInt.new 7\n# => \"0000000000000000000000000000000000000000000000000000000000000007\"\n```","summary":"<p>An utility tool to ensure hex keys are always 32 bytes; it pads the number with leading zeros if it's shorter.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"BigInt"}],"args_string":"(i : BigInt)","source_link":"https://github.com/q9f/secp256k1.cr/blob/22fc923228949b495a7c4842683d270569e2151c/src/util.cr#L51","def":{"name":"to_padded_hex_32","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"BigInt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hex = i.to_s(16)\nwhile hex.size < 64\n  hex = '0' + hex\nend\nreturn hex\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}